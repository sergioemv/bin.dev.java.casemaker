<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- edited with XMLSpy v2007 (http://www.altova.com) by Sergio (EMBRACE) -->
<!--W3C Schema generated by XMLSpy v2006 U (http://www.altova.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.ilog.com/products/xml/schemas/xrl_2.0" targetNamespace="http://www.ilog.com/products/xml/schemas/xrl_2.0" elementFormDefault="qualified">
	<xs:element name="argument">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="constant" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="type" type="xs:string" use="required"/>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="modifier" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="arguments">
		<xs:annotation>
			<xs:documentation> The Arguments from a method</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="new" minOccurs="0"/>
				<xs:element ref="newArray" minOccurs="0"/>
				<xs:element ref="arrayElement" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="arrayElement">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="arrayLength">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="assign">
		<xs:annotation>
			<xs:documentation> simple assignment</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable" maxOccurs="unbounded"/>
				<xs:element ref="new" maxOccurs="unbounded"/>
				<xs:element ref="field" maxOccurs="unbounded"/>
				<xs:element ref="constant" maxOccurs="unbounded"/>
				<xs:element ref="binaryOp" maxOccurs="unbounded"/>
				<xs:element ref="cast" maxOccurs="unbounded"/>
				<xs:element ref="method" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="binaryOp">
		<xs:annotation>
			<xs:documentation> Binary operators</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="arrayLength" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="binaryOp" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="field" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="method" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="cast" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="interval" minOccurs="0"/>
				<xs:element ref="newArray" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="bind">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
				<xs:element ref="naryOp" minOccurs="0"/>
				<xs:element ref="newArray" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="block">
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="method"/>
				<xs:element ref="assign"/>
				<xs:element ref="for"/>
				<xs:element ref="var"/>
				<xs:element ref="return"/>
				<xs:element ref="variable"/>
				<xs:element ref="cast"/>
				<xs:element ref="binaryOp"/>
				<xs:element ref="naryOp"/>
				<xs:element ref="constant"/>
				<xs:element ref="block"/>
				<xs:element ref="collect"/>
				<xs:element ref="field"/>
				<xs:element ref="foreach"/>
				<xs:element ref="newArray"/>
				<xs:element ref="notCondition"/>
				<xs:element ref="unaryOp"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="cast">
		<xs:annotation>
			<xs:documentation>Cast from one type to another</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="new" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="type" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="class">
		<xs:complexType>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="constant">
		<xs:annotation>
			<xs:documentation> A fixed value</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="type" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="default-package">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="hierarchical-properties"/>
				<xs:element ref="propertyDefinitions"/>
				<xs:element ref="packageVariables"/>
				<xs:element ref="function" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="rule" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="pkgName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="dimension">
		<xs:complexType>
			<xs:attribute name="value" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="1"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="else">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="assign" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="method" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="enumerator">
		<xs:annotation>
			<xs:documentation>wildcard for different types of content</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="evaluateCondition">
		<xs:annotation>
			<xs:documentation> Complex condition with and&apos;s and or&apos;s</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="naryOp"/>
				<xs:element ref="bind"/>
				<xs:element ref="binaryOp"/>
				<xs:element ref="method"/>
				<xs:element ref="variable"/>
				<xs:element ref="field"/>
				<xs:element ref="cast"/>
				<xs:element ref="constant"/>
				<xs:element ref="unaryOp"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="field">
		<xs:annotation>
			<xs:documentation> A Field from a Class</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="class" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="for">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="init"/>
				<xs:element ref="test"/>
				<xs:element ref="step"/>
				<xs:element ref="block"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="collect">
		<xs:annotation>
			<xs:documentation>Defines a Collection of objects</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="element"/>
			</xs:choice>
			<xs:attribute name="bind" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="function">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="argument"/>
				<xs:element ref="block"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="type" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="hierarchical-properties">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="hierarchical-property"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="hierarchical-property">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="hierarchical-property-node"/>
			</xs:sequence>
			<xs:attribute name="name" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="ilog.rules.PackageHierarchy"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="hierarchical-property-node">
		<xs:complexType mixed="true">
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="hierarchical-property-node"/>
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="init">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="var"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="initValues">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="constant" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="field" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="cast" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="variable" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="method">
		<xs:annotation>
			<xs:documentation> A method from a class</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="variable"/>
				<xs:element ref="class"/>
				<xs:element ref="field"/>
				<xs:element ref="arguments"/>
				<xs:element ref="method"/>
				<xs:element ref="constant"/>
				<xs:element ref="cast"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="naryOp">
		<xs:complexType>
			<xs:sequence minOccurs="2" maxOccurs="2">
				<xs:element ref="naryOp"/>
				<xs:element ref="binaryOp"/>
				<xs:element ref="variable"/>
				<xs:element ref="field"/>
				<xs:element ref="method"/>
				<xs:element ref="constant"/>
				<xs:element ref="cast"/>
				<xs:element ref="new"/>
				<xs:element ref="unaryOp"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="new">
		<xs:complexType mixed="true">
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="arguments"/>
			</xs:choice>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="newArray">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="realArray"/>
				<xs:element ref="dimension"/>
				<xs:element ref="initValues"/>
			</xs:sequence>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="package">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="packageVariables"/>
				<xs:element ref="function" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="rule" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="pkgName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="packageVariables" type="xs:string"/>
	<xs:element name="priority">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="field"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="properties">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="property" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="property">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="constant"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="propertyDefinitions">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="propertyType" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="propertyType">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="realArray">
		<xs:complexType>
			<xs:attribute name="value" type="xs:boolean" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="return">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="binaryOp"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="rule">
		<xs:annotation>
			<xs:documentation>the basic unit</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="priority" minOccurs="0"/>
				<xs:element ref="properties"/>
				<xs:element ref="when"/>
				<xs:element ref="then"/>
				<xs:element ref="else" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ruleset">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="rulesetParameters"/>
				<xs:element ref="default-package"/>
				<xs:element ref="package" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="rulesetParameters">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="argument" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="simpleCondition">
		<xs:annotation>
			<xs:documentation>Used for definitions and parameters</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="enumerator" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
				<xs:element ref="naryOp" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="newArray" minOccurs="0"/>
				<xs:element ref="unaryOp" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="asEvent" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="no"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="className" type="xs:string" use="required"/>
			<xs:attribute name="bind" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="notCondition">
		<xs:annotation>
			<xs:documentation>Simple negation</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="enumerator" minOccurs="0">
					<xs:annotation>
						<xs:documentation>wildcard for in , from and some references</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="binaryOp" minOccurs="0"/>
				<xs:element ref="naryOp" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0"/>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="newArray" minOccurs="0"/>
				<xs:element ref="unaryOp" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="asEvent" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="no"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="element">
		<xs:annotation>
			<xs:documentation>element of a collection</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="enumerator" minOccurs="0"/>
				<xs:element ref="field" minOccurs="0">
					<xs:annotation>
						<xs:documentation> A Field from a Class or a Filter in a element</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="method" minOccurs="0"/>
				<xs:element ref="constant" minOccurs="0"/>
				<xs:element ref="variable" minOccurs="0"/>
				<xs:element ref="cast" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="asEvent" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="no"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="step">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="unaryOp"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="test">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="binaryOp"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="then">
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="assign" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="foreach" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="unaryOp">
		<xs:annotation>
			<xs:documentation> Unary operator</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="naryOp"/>
				<xs:element ref="binaryOp"/>
				<xs:element ref="variable"/>
				<xs:element ref="field"/>
				<xs:element ref="method"/>
				<xs:element ref="cast"/>
				<xs:element ref="constant"/>
				<xs:element ref="unaryOp"/>
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="var">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="new"/>
				<xs:element ref="field"/>
				<xs:element ref="constant"/>
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="type" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="variable">
		<xs:annotation>
			<xs:documentation>A value that can be changed</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="foreach">
		<xs:annotation>
			<xs:documentation>for each loop</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="foreachVariable"/>
				<xs:element ref="foreachCollection"/>
				<xs:element ref="block"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="foreachCollection">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="field"/>
				<xs:element ref="cast"/>
				<xs:element ref="collect"/>
				<xs:element ref="method"/>
				<xs:element ref="newArray"/>
				<xs:element ref="variable"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="foreachVariable">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="className" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="when">
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="simpleCondition"/>
				<xs:element ref="evaluateCondition"/>
				<xs:element ref="collect"/>
				<xs:element ref="exists"/>
				<xs:element ref="notCondition">
					<xs:annotation>
						<xs:documentation>Simple negation</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="interval">
		<xs:annotation>
			<xs:documentation>interval of two elements </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="leftLimit">
					<xs:complexType>
						<xs:attribute name="value" type="xs:boolean"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="rightLimit">
					<xs:complexType>
						<xs:attribute name="value" type="xs:boolean"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="constant" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="variable" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="field" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="method" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="cast" minOccurs="0" maxOccurs="2"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="exists">
		<xs:annotation>
			<xs:documentation> Exists condition</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="enumerator" minOccurs="0"/>
				<xs:element ref="binaryOp" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="className" type="xs:string"/>
		</xs:complexType>
	</xs:element>
</xs:schema>