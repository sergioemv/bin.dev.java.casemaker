/* Generated by Together */

package model;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.undo.CompoundEdit;
import javax.swing.undo.UndoableEdit;

import model.edit.CMModelEditFactory;
import model.util.IdSet;
import bi.view.lang.CMMessages;
import bi.view.testdataviews.CMIndexTDStructureUpdate;
import bi.view.undomanagementviews.CMCompoundEdit;

/**
 * @stereotype File
 */
public class TDStructure implements Cloneable, CMXMLFile {
    public TDStructure()
    {
        this.m_StructureTestData = new Vector();
        m_TestDataSet= new Vector();
        testDataCombination = new TestDataCombinations();
        ids =0;
     	idsTestDataSet= 0;
//hcanedo_21_09_2004_begin
        m_TestDataSetReportUnit= new TestDataSetReportUnit();

//hcanedo_21_09_2004_end
      //  idStructureVector= new IdSet(BusinessRules.MAX_NUMBER_OF_STRUCTURE);
       // idTestDataSetVector= new IdSet(BusinessRules.MAX_NUMBER_OF_TESTDATASET);
       // idTestDataVector = new IdSet(BusinessRules.MAX_NUMBER_OF_TESTDATA);

        this.m_Variables = new Variables();//svonborries_05012006
    }
     public Object clone() {
      Object b = null;
      try {
       b = super.clone();
       TDStructure tds=((TDStructure)b);
       tds.setM_StructureTestData(new Vector());
       tds.setM_TestDataSet(new Vector());//new CSV
       tds.setM_TestObject(null);
       tds.setM_TestCaseInTDStructure(new Vector());
//       tds.idStructureVector= null;//probar 20.05.04
//       tds.idTestDataSetVector=null;//probar 20.05.04
//       tds.idTestDataVector = null;//probar 20.05.04
    /*   int auxids= tds.getTestDataCombination().getIDS();//new CSV
       tds.setTestDataCombination(new TestDataCombinations());//new CSV
       tds.getTestDataCombination().setIDs(auxids);//new CSV*/
       for(int i=0; i<this.getM_StructureTestData().size();i++)
       {
			StructureTestData std= new StructureTestData();
            StructureTestData aux=(StructureTestData) this.getM_StructureTestData().elementAt(i);
            std.setDescription(aux.getDescription());
//            std.setM_TDStructure(tds);
            std.setName(new String(aux.getName()));

            std.setType(aux.getType());

            std.setGlobalIndex(aux.getGlobalIndex());
            for(int j=0; j<aux.getTypeData().size();j++)
            {
                ITypeData typeData = (ITypeData)aux.getTypeData().elementAt(j);
                ITypeData newtypData= null;//new TypeData();
                if(typeData instanceof TypeDataGlobal){
                	newtypData= new TypeDataGlobal();
                }
                else{
                	newtypData= new TypeDataLocal();
                	((TypeDataLocal)newtypData).setM_ReferenceTypeData(((TypeDataLocal)typeData).getM_ReferenceTypeData());
                }

                newtypData.setKey(new String(typeData.getKey()));
                newtypData.setField(new String(typeData.getField()));
                newtypData.setFormat(typeData.getFormat());
                newtypData.setFormatter((TestDataFormat)typeData.getFormatter().clone());
                //newtypData.setFormula(typeData.getStringFormula());
                //newtypData.setisFormula(typeData.isFormula());
                newtypData.setLength(typeData.getLength());
                newtypData.setName(new String(typeData.getName()));
                newtypData.setPrefix(typeData.getPrefix());
                newtypData.setSuffix(typeData.getSuffix());
                newtypData.setType(typeData.getTypeName());
                //My add
             //ccastedo 27.09.06   newtypData.setToolVendorOT(typeData.getToolVendorOT());
                newtypData.setStateOT(typeData.getStateOT());
              //  newtypData.setTVT(typeData.getTVT());
             //   newtypData.setNewColumns(typeData.getNewColumns());

                ICMValue value = (ICMValue)typeData.getValue();
                newtypData.setValue(value);
                //newtypData.setStringValue(new String(typeData.getStringValue()));
                /////new global references////////
                newtypData.setGlobal("G");
                typeData.setGlobal("G");
                std.getTypeData().addElement(newtypData);
//              HCanedo_17112005_begin
                newtypData.setStructureTestData(std);
                newtypData.setM_Subjects((HashMap) typeData.getM_Subjects().clone());
                for (Iterator iter = newtypData.getM_Subjects().values().iterator(); iter.hasNext();) {
					ITypeData subjects = (ITypeData) iter.next();
					subjects.addObserver(newtypData);
				}
               // DelegateObservable newReference=new DelegateObservable();
                //newReference.setObservers(typeData.getM_References().getObservers());
               // newtypData.setM_References(newReference);
//              HCanedo_17112005_end
            }

        	tds.getM_StructureTestData().addElement(std);
       }
       	b= tds;
      }
      catch(CloneNotSupportedException e) {
        e.printStackTrace();
      }
      return b;
    }
	public TDStructure cloneTDStructure()
    {
	  Object b = null;
      try {
       		b = super.clone();
            TDStructure clon=(TDStructure)b;
            Vector newStructureTestData = new Vector();
            Vector newTestDataSet= new Vector();
        //    Vector newTestCaseInTDStructure= new Vector();
			TestDataCombinations newtestDataCombination= clon.getTestDataCombination().cloneTestDataCombinations();
            ResultComparation newResultComparation= clon.getM_ResultComparation().cloneResultComparation();
			clon.setM_ResultComparation(newResultComparation);
            clon.setTestDataCombination(newtestDataCombination);
            for(int i=0; i< clon.getM_StructureTestData().size(); i++)
            {
                StructureTestData std=( (StructureTestData)clon.getM_StructureTestData().elementAt(i)).clones();
                newStructureTestData.addElement(std);
            }
            clon.setM_StructureTestData(newStructureTestData);

			 for(int i=0; i< clon.getM_TestDataSet().size(); i++)
            {
                TestDataSet tds=((TestDataSet)clon.getM_TestDataSet().elementAt(i)).cloneTestDataSet();
                newTestDataSet.addElement(tds);
            }
            clon.setM_TestDataSet(newTestDataSet);
      }
       catch(CloneNotSupportedException e) {
        e.printStackTrace();
      }
	return (TDStructure)b;
    }

	 /**
	 * @param p_ce
	 * Undo/Redo
	 * @return
	 */
	public int generateId(UndoableEdit p_ce)
     {
		 CompoundEdit ce;
	    	if(p_ce!=null)
	    		ce = (CMCompoundEdit) p_ce;
	    	else
	    		ce = new CMCompoundEdit();
		 int id;

			ce.addEdit(CMModelEditFactory.INSTANCE.createAddElementToidSet(
					CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector,
					CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector.nextValidId()));
			id = CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector.registerNextValidId();
			ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdInTDStructureModelEdit(this,id));
			this.setID(id);


		 return getID();
    }

     public int getID()
     {
        return ids;
     }

	 public int generateIdTestData(UndoableEdit p_ce)
     {
		 CMCompoundEdit ce;
	    	if(p_ce == null)
	    		//ce = new CMCompoundEdit(2000);
	    		ce = new CMCompoundEdit();
	    	else
	    		ce = (CMCompoundEdit) p_ce;
       // ids++;
	    	ce.addEdit(CMModelEditFactory.INSTANCE.createAddElementToidSet(
					CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector,
					CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector.nextValidId()));

        return CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector.registerNextValidId();

    }

	 public int generateIdTestDataSet()
     {

			setIdsTestDataSet(CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector.registerNextValidId());

		return getIdsTestDataSet();
    }

 	public UndoableEdit deleteIds()
     {
 		 //CMCompoundEdit ce = new CMCompoundEdit(2000);
 		 CMCompoundEdit ce = new CMCompoundEdit();
 		 ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdsIdSet(CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector,null));
         CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector.deleteIds();
         ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdInTDStructureModelEdit(this,0));
         setID(0);
         ce.addEdit(deleteIdsTestData());
         ce.addEdit(deleteIdsTestDataSet());
         return ce;
     }
	public UndoableEdit deleteIdsTestData()
    {
		CMCompoundEdit ce = new CMCompoundEdit();
		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdsIdSet(CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector,null));
        CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector.deleteIds();
        return ce;
    }
    public UndoableEdit deleteIdsTestDataSet()
    {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdTestDataSetInTDStructureModelEdit(this,0));
		setIdsTestDataSet(0);
		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdsIdSet(CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector,null));
        CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector.deleteIds();
        return ce;


















    }

     public UndoableEdit degenerateIDTestDataSet()
     {
    	 CMCompoundEdit ce = new CMCompoundEdit();
		ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteElementToidSet(
				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector,getIdsTestDataSet()));
		CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector.deleteId(getIdsTestDataSet());
		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeIdTestDataSetInTDStructureModelEdit(this,getIdsTestDataSet()-1));
        setIdsTestDataSet(getIdsTestDataSet()-1);
        return ce;
     }

     public UndoableEdit deleteIdTestData(int p_id)
      {
    	 CMCompoundEdit ce = new CMCompoundEdit();
    	 ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteElementToidSet(
 				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector,p_id));
         CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector.deleteId(p_id);
         return ce;
      }

     public UndoableEdit deleteIdStructure(int p_id)
     {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteElementToidSet(
 				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector,p_id));
        CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector.deleteId(p_id);
        return ce;
     }
     public UndoableEdit deleteIdTestDataSet(int p_id)
     {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteElementToidSet(
 				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector,p_id));
        CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector.deleteId(p_id);
        return ce;
     }

    public Vector getM_StructureTestData(){
    	if(m_StructureTestData==null)
    		m_StructureTestData = new Vector();
    	return m_StructureTestData; }

    public void setM_StructureTestData(Vector m_StructureTestData){ this.m_StructureTestData = m_StructureTestData; }
/*
    public String getM_Path(){ return m_Path; }

    public void setM_Path(String m_Path){ this.m_Path = m_Path; }

    public String getM_Filename(){ return m_Filename; }

    public void setM_Filename(String m_Filename){ this.m_Filename = m_Filename; }
*/
    public Date getM_TimeStamp(){ return m_TimeStamp; }

    public void setM_TimeStamp(Date m_TimeStamp){ this.m_TimeStamp = m_TimeStamp; }

    public String getM_Name(){ return m_Name; }

    public void setM_Name(String m_Name){ this.m_Name =new String(m_Name); }

    public String getM_Description(){ return m_Description; }

    public void setM_Description(String m_Description){ this.m_Description = m_Description; }
/*
    public String getM_State(){ return m_State; }

    public void setM_State(String m_State){ this.m_State = m_State; }
*/
    public String toString() {  return m_Name;   }

    public TestObject getM_TestObject(){
            return (TestObject) m_TestObject;
        }

    public void setM_TestObject(Object m_TestObject){
            this.m_TestObject = m_TestObject;
        }

    public TestObjectReference getM_TestObjectReference(){ return(TestObjectReference) m_TestObjectReference; }

    public void setM_TestObjectReference(Object m_TestObjectReference){ this.m_TestObjectReference = m_TestObjectReference; }

    public Vector getM_TestDataSet(){
    	if(m_TestDataSet==null)
    		m_TestDataSet = new Vector();
    	return m_TestDataSet; }

    public void setM_TestDataSet(Vector m_TestDataSet){ this.m_TestDataSet = m_TestDataSet; }

    public Vector getM_TestCaseInTDStructure(){ return m_TestCaseInTDStructure; }

    public void setM_TestCaseInTDStructure(Vector m_TestCaseInTDStructure){ this.m_TestCaseInTDStructure = m_TestCaseInTDStructure; }

    public TestDataCombinations getTestDataCombination(){
    	if(testDataCombination==null)
    		testDataCombination = new TestDataCombinations();
    	return testDataCombination; }

    public void setTestDataCombination(TestDataCombinations testDataCombination){ this.testDataCombination = testDataCombination; }

   public void setIdStructureVector(IdSet p_ids)
   {
    	CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idStructureVector=p_ids;
   }
   public void setIdTestDataSetVector(IdSet p_ids)
   {
	    CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataSetVector= p_ids;
   }

    public IdSet getIdTestDataVector(){ return CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector; }

    public void setIdTestDataVector(IdSet idTestData){ CMIndexTDStructureUpdate.getInstance().getTDStructureManager().idTestDataVector = idTestData; }

    public ResultComparation getM_ResultComparation(){ return m_ResultComparation; }

    public void setM_ResultComparation(ResultComparation m_ResultComparation){ this.m_ResultComparation = m_ResultComparation; }

    public boolean isSwActualTarget(){ return swActualTarget; }

    public void setSwActualTarget(boolean swActualTarget){ this.swActualTarget = swActualTarget; }

    public TestDataSetReportUnit getM_TestDataSetReportUnit(){
    	if(m_TestDataSetReportUnit == null){
    		m_TestDataSetReportUnit= new TestDataSetReportUnit();
    	}
    	return m_TestDataSetReportUnit; }

    public void setM_TestDataSetReportUnit(TestDataSetReportUnit m_TestDataSetReportUnit){ this.m_TestDataSetReportUnit = m_TestDataSetReportUnit; }
	//grueda22082004_begin
    public String getVersion(){
            return m_Version;
        }

    public void setM_Version(String m_Version){
            this.m_Version = m_Version;
        }
	//grueda22082004_end



    private Vector m_StructureTestData;
   // private String m_Path = "";
   // private String m_Filename = "";
    private Date m_TimeStamp = new Date();
    private String m_Name = BusinessRules.TESTDATA_NAME_OBJECT_TESTDATA; //$NON-NLS-1$
    private String m_Description = CMMessages.getString("TESTDATA__2"); //$NON-NLS-1$
   // private String m_State = "Unlocked";
    private /*TestObject*/Object  m_TestObject;
    private int ids;
    private int idsTestDataSet;
    private Object m_TestObjectReference;
    private Vector m_TestDataSet;
    private Vector m_TestCaseInTDStructure= new Vector();

    /**
     * @link aggregationByValue
     */
    private TestDataCombinations testDataCombination;
    //grueda18092004_begin
    private ResultComparation m_ResultComparation = new ResultComparation();
    //grueda18092004_end
    private boolean swActualTarget=false;
    private TestDataSetReportUnit m_TestDataSetReportUnit;
    //grueda22082004_begin
    private String m_Version = BusinessRules.TESTDATA_FILE_VERSION;
    //grueda22082004_end

  //  private IdSet idStructureVector;
 //   private IdSet idTestDataSetVector;
 //   private IdSet idTestDataVector;

//  svonborries_5012006_begin
    private Variables m_Variables;

    public Variables getM_Variables()
    {
    	//hcanedo_23022006_begin
    	if(m_Variables == null)
    		m_Variables = new Variables();
    	//hcanedo_23022006_end
        return m_Variables;
    }

    public void setM_Variables(Variables m_Variables)
    {
        this.m_Variables = m_Variables;
    }
   //svonborries_5012006_end
//	//Ccastedo begins 08-02-06
	public String getCurrentVersion(){
		return BusinessRules.TESTDATA_FILE_VERSION;
	}
//	//	Ccastedo ends 08-02-06
	/**
	 * @param ids The ids to set.
	 * svonborries
	 */
	public void setID(int ids) {
		this.ids = ids;
	}
	/**
	 * @return Returns the idsTestDataSet.
	 * svonborries
	 */
	public int getIdsTestDataSet() {
		return idsTestDataSet;
	}
	/**
	 * @param idsTestDataSet The idsTestDataSet to set.
	 * svonborries
	 */
	public void setIdsTestDataSet(int idsTestDataSet) {
		this.idsTestDataSet = idsTestDataSet;
	}

}