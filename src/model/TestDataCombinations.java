/*generated by Together */

package model;
import java.util.Vector;

public class TestDataCombinations  implements Cloneable {

    public TestDataCombinations()
    {
		m_TestDatas= new Vector();
       // idsVector =new IdSet(BusinessRules.MAX_NUMBER_OF_TESTDATA);
    }
	public TestDataCombinations cloneTestDataCombinations()
    {
        Object obj = clone();
        return (TestDataCombinations)obj;
    }
	public Object clone() {
      Object b = null;
      try {
       b = super.clone();
       TestDataCombinations newTestDataCombinations= ( TestDataCombinations)b;
       Vector newTestDatas= new Vector();
       for(int i=0; i< newTestDataCombinations.getM_TestDatas().size();i++)
       {
        	TestData td=((TestData) newTestDataCombinations.getM_TestDatas().elementAt(i)).cloneTestData();
             newTestDatas.addElement(td);
       }
		newTestDataCombinations.setM_TestDatas(newTestDatas);
      } catch(CloneNotSupportedException e) {
        e.printStackTrace();
      }
      return b;
    }
/*		public void deleteIdsTestData()
    {
        idsVector.deleteIds();

    }*/

 /*    public void initVectorId()
     {
         idsVector =new IdSet(BusinessRules.MAX_NUMBER_OF_TESTDATA);
     }*/

    public Vector getM_TestDatas(){ 
    	if(m_TestDatas == null)
    		m_TestDatas = new Vector();
    	return m_TestDatas; }

    public void setM_TestDatas(Vector m_TestDatas){ this.m_TestDatas = m_TestDatas; }

    public boolean isM_swTargetActual(){ return m_swTargetActual; }

    public void setM_swTargetActual(boolean m_swTargetActual){ this.m_swTargetActual = m_swTargetActual; }

/*	public void setIDs(int p_ids)
    {
        ids= p_ids;
    }
    public int getIDS()
    {
        return ids;
    }*/

    private Vector m_TestDatas;
    private boolean m_swTargetActual=false;
//    private int ids;
   // private IdSet idsVector;
}
