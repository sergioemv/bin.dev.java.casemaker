/* Generated by Together */

package model.brmodel;
import java.util.Vector;

public class CombinationsBAPair {
    public CombinationsBAPair() {
        this.action = null;
        this.combination = null;




    }

    public CombinationsBAPair(Vector actions, Vector combination,int condition) {
        this.action = actions;
        this.combination = combination;
		this.belongsTo=condition;
        setDifferentObjects();
    }

    public Vector getAction(){ return action; }

    public void setAction(Vector action){ this.action = action; }

    public Vector getCombination(){ return combination; }

    public void setCombination(Vector combination){
        this.combination = combination;
		setDifferentObjects();
    }

    public boolean isUsed(){
            return used;
        }

    public void setUsed(boolean used){
            this.used = used;
        }

    public int getDifferentObjectsCount(){
            return differentObjectsCount;
        }

    public void setDifferentObjectsCount(int differentObjectsCount){
            this.differentObjectsCount = differentObjectsCount;
        }
    private void setDifferentObjects(){
        Vector differentObjects=new Vector();
        RelationalPair relPair;
        for(int i=0;i<combination.size();i++){
			relPair=(RelationalPair)combination.elementAt(i);
            if(!objectPresent(relPair.getTheObject().getName(),differentObjects)){
                differentObjects.addElement(relPair.getTheObject());
            }
        }
        this.differentObjectsInvolved=differentObjects;
        this.setDifferentObjectsCount(differentObjects.size());
    }

    private boolean objectPresent(String name,Vector differentSoFar){
		BusinessObject obj;
		for(int i =0;i<differentSoFar.size();i++){
			obj=(BusinessObject)differentSoFar.elementAt(i);
            if(name.equals(obj.getName())){
                return true;
            }
        }
        return false;
    }

    public Vector getDifferentObjectsInvolved(){
            return differentObjectsInvolved;
        }

    public void setDifferentObjectsInvolved(Vector differentObjectsInvolved){
            this.differentObjectsInvolved = differentObjectsInvolved;
        }



    public int getBelongsTo(){
            return belongsTo;
        } 

    public void setBelongsTo(int belongsTo){
            this.belongsTo = belongsTo;
        }

	private Vector differentObjectsInvolved;
    private Vector action;
    private Vector combination;
    private boolean used=false;
    private int differentObjectsCount=0;
    private int belongsTo=-1;
}
