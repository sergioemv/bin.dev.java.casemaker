/* Generated by Together */


package model.brmodel;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
/**
 * @stereotype container
 * @author Freddy Castro S.
 */
public class FormalPolicy {
    public FormalPolicy() {
        this.name = "";
        this.timeStamp = new Date();
    }

    public List<InferenceRule> getM_InferenceRules() {
    	if (m_InferenceRules == null)
    		m_InferenceRules = new ArrayList<InferenceRule>();
        return m_InferenceRules;
    }

    public void setM_InferenceRules(List<InferenceRule> m_InferenceRules) {
        this.m_InferenceRules = m_InferenceRules;
    }

    public List<MathematicalCalculationRule> getM_MathematicalCalculationRules() {
    	if(m_MathematicalCalculationRules == null)
    		m_MathematicalCalculationRules = new ArrayList<MathematicalCalculationRule>();
        return m_MathematicalCalculationRules;
    }

    public List<AttributeFactRule> getM_AttributeFactRules() {
    	if (m_AttributeFactRules == null)
    		m_AttributeFactRules = new ArrayList<AttributeFactRule>();
        return m_AttributeFactRules;
    }


    public List<GeneralizationFactRule> getM_GeneralizationFactRules() {
    	if (m_GeneralizationFactRules == null)
    		m_GeneralizationFactRules = new ArrayList<GeneralizationFactRule>();
        return m_GeneralizationFactRules;
    }

    public List<AssociationFactRule> getM_AssociationFactRules() {
    	if (m_AssociationFactRules == null)
    		m_AssociationFactRules = new ArrayList<AssociationFactRule>();
        return m_AssociationFactRules;
    }




    public void addInferenceRule(InferenceRule inferenceRule) {
        getM_InferenceRules().add(inferenceRule);
    }

    public void addMathematicalCalculationRule(MathematicalCalculationRule mathematicalCalculationRule) {
        getM_MathematicalCalculationRules().add(mathematicalCalculationRule);
    }

    public void addAttributeFactRule(AttributeFactRule attributeFactRule) {
        getM_AttributeFactRules().add(attributeFactRule);
    }

    public void addGeneralizationFactRule(GeneralizationFactRule generalizationFactRule) {
        getM_GeneralizationFactRules().add(generalizationFactRule);
    }

    public void addAssociationFactRule(AssociationFactRule associationFactRule) {
        getM_AssociationFactRules().add(associationFactRule);
    }

    public void addAggregationFactRule(AggregationFactRule aggregationFactRule) {
        getM_AggregationFactRules().add(aggregationFactRule);
    }

    public void addRoleFactRule(RoleFactRule roleFactRule) {
        getM_RoleFactRules().add(roleFactRule);
    }

    public void addBusinessAction(BusinessAction bAction) {
        getM_BusinessActions().add(bAction);
    }

    public void addBusinessObject(BusinessObject businessObject){
        getM_BusinessObjects().add(businessObject);
    }

    public List<BusinessObject> getM_BusinessObjects() {
    	if (m_BusinessObjects == null)
    		m_BusinessObjects = new ArrayList<BusinessObject>();
        return m_BusinessObjects;
    }


    public String getDescription(){ return description; }

    public void setDescription(String description){ this.description = description; }

    public List<BusinessAction> getM_BusinessActions(){
    		if (m_BusinessActions == null)
    			m_BusinessActions = new ArrayList<BusinessAction>();
            return m_BusinessActions;
        }

    public Date getTimeStamp(){
            return timeStamp;
        }

    public int getSourceSyntax(){
            return sourceSyntax;
        }

    public void setSourceSyntax(int sourceSyntax){
            this.sourceSyntax = sourceSyntax;
        }

    /**
     * @associates <{model.parser.MathematicalCalculationRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<MathematicalCalculationRule> m_MathematicalCalculationRules;

    /** @associates <{Vector}>
     * @clientCardinality 1
     * @supplierCardinality 0..**/
    private List<InferenceRule> m_InferenceRules;

    /**
     * @associates <{model.parser.AttributeFactRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<AttributeFactRule> m_AttributeFactRules;

    /**
     * @associates <{model.parser.GeneralizationFactRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<GeneralizationFactRule> m_GeneralizationFactRules;

    /**
     * @associates <{model.parser.AssociationFactRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<AssociationFactRule> m_AssociationFactRules;

    /**
     * @associates <{RoleFactRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<RoleFactRule> m_RoleFactRules;
    private String name;

    /**
     * @associates <{AggregationFactRule}>
     * @clientCardinality 1
     * @supplierCardinality 0..*
     */
    private List<AggregationFactRule> m_AggregationFactRules;

    /** @associates <{BusinessObject}>
     * @clientCardinality 1
     * @supplierCardinality 0..**/
    private List<BusinessObject> m_BusinessObjects;
    private String description;

    /** @associates <{BusinessAction}>
     * @clientCardinality 1
     * @supplierCardinality 0..**/
    private List<BusinessAction> m_BusinessActions;
    private Date timeStamp;
    private int sourceSyntax=-1;
	public List<AggregationFactRule> getM_AggregationFactRules() {
		if (m_AggregationFactRules == null)
			m_AggregationFactRules = new ArrayList<AggregationFactRule>();
		return m_AggregationFactRules;
	}

	public List<RoleFactRule> getM_RoleFactRules() {
		if (m_RoleFactRules == null)
			m_RoleFactRules = new ArrayList<RoleFactRule>();
		return m_RoleFactRules;
	}
}
