/* Generated by Together */

package model;

import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import bi.view.cells.CMCellTDStructureClassState;

/**
 * @deprecated
 * @author hcanedo
 *
 */
public class TypeData  implements Cloneable, Observer
{
     public TypeData()
     {
    	 	
			key=""; //$NON-NLS-1$
            global="";
			field="";//new //$NON-NLS-1$
 			name =""; //$NON-NLS-1$
 			stateNameOT = "";
 			stateOT = 0;
 			newColumn="";
 			newColumns = new Vector(0);
        	type =BusinessRules.TESTDATA_STATE_BINARY; //$NON-NLS-1$
        	length= "10"; //$NON-NLS-1$
        	prefix = ""; //$NON-NLS-1$
        	suffix =""; //$NON-NLS-1$
            format="";//new //$NON-NLS-1$
        	formula =""; //$NON-NLS-1$
        	value =""; //$NON-NLS-1$
           	isFormula=false;
           	m_Formatter= new TestDataFormat();
           	linkValue =false;
    	}
    	public TypeData(String mKey,String mGlobal,String mField, String mName, String stateNameObjectType,int stateObjectType, int StateTVT,/* String newColumn, */Vector newColumns, String mType, String mLength, String mPrefix,String mSuffix,String mFormat, String mFormula, String mValue)
    	{
    		
			key=mKey;
            global=mGlobal;
			field= mField;//new harold
        	name =mName;
        	stateNameOT = stateNameObjectType;
       // 	stateOT = stateObjectType;
        //	stateTVT = StateTVT;
        	//this.newColumn = newColumn;
        //	this.newColumns = newColumns;*/
        	type = mType;
        	length=mLength;
        	prefix = mPrefix;
        	suffix =mSuffix;
            format =mFormat;//new harold
        	formula =mFormula;
        	value =mValue;
            isFormula=false;
            linkValue =false;
    	}
//new harold
        
	public Object clone() {
      Object b = null;
      TypeData clon= new TypeData();
      try {
       b = super.clone();
		TypeData aux=(TypeData)b;
        clon.setField(new String(aux.getField()));
        clon.setFormat(new String(aux.getFormat()));
        clon.setM_Formatter((TestDataFormat)aux.getM_Formatter().clone());
        clon.setFormula(new String(aux.getFormula()));
        clon.setGlobal(new String(aux.getGlobal()));
        clon.setKey(new String(aux.getKey()));
        clon.setLength(new String(aux.getLength()));
        clon.setName(new String(aux.getName()));
        
        //My add.....
      //  if(aux.getToolVendorOT()!=null)
        	clon.setToolVendorOT(new String(aux.getToolVendorOT()));
       /* else
        	clon.setToolVendorOT();*/
    //    clon.setStateOT(aux.getStateOT());
   //     clon.setTVT(aux.getTVT());
        clon.setNewColumns(new Vector(aux.getNewColumns()));
        //My adds end............
        
        clon.setPrefix(new String(aux.getPrefix()));
        clon.setSuffix(new String(aux.getSuffix()));
        clon.setType(new String(aux.getType()));
        clon.setValue(new String(aux.getValue()));
        clon.setisFormula(aux.isFormula());
        clon.setLinkValue(aux.isLinkValue());
        clon.setStructureTestData(aux.getStructureTestData());
        

      } catch(CloneNotSupportedException e) {
        e.printStackTrace();
      }
      return clon;
    }
        public String getKey()
        {
            return key;
        }

        public void setKey(String key)
        {
            this.key = new String(key);
        }

        public String getGlobal()
        {
            return global;
        }

        public void setGlobal(String global)
        {
            this.global = new String(global);
        }

        public String getField()
        {
            return field;
        }

        public void setField(String field)
        {
            this.field = new String(field);
        }
//end
   	 	public String getName()
   		{
    		return name;
   		}

    	public void setName(String name)
    	{
        	this.name = new String(name);
    	}
    	//Claudia's begin
    	public String getToolVendorOT()
   		{
    		//ccastedo 27.09.06 return stateNameOT;
    		/*String toolVendor = CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject().getToolVendor();
     		String technology = CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject()
			.getToolVendorTechnology();
    		Technology tech = ToolVendorManager.INSTANCE.findTechnologyByName(toolVendor,technology);
        	if (tech!=null)
        		this.stateNameOT =  tech.getM_ObjectTypesValue().get(this.getStateOT()).toString();
        	return stateNameOT;*/
    		if (stateNameOT != null)
    			return stateNameOT;
    		else
    			return "";
   		}

    	public void setToolVendorOT(String stateNameOT)
    	{
        	this.stateNameOT =  stateNameOT; //VER
    	}
    	
    	public int getStateOT()
   		{
    		if (stateOT >= 0)
    			return stateOT;
    		else
    			return 0;
   		}

    	public void setStateOT(int stateObjectType)
    	{
        	this.stateOT =  stateObjectType; //VER
    	}
    	
    /*	public int getTVT()
   		{
    		return stateTVT;
   		}

    	public void setTVT(int stateTVT)
    	{
        	this.stateTVT =  stateTVT; //VER
    	}*/
    	
    	public String getNewColumn()
   		{
    		return newColumn;
   		}

    	public void setNewColumn(String newColumn)
    	{
        	this.newColumn =  newColumn; //VER
    	}
    	
    	public Vector getNewColumns()
   		{
    		return newColumns;
   		}

    	public void setNewColumns(Vector newColumns)
    	{
    		
        	this.newColumns=newColumns; //VER
    	}
    	
    	/*public Vector getNewColumnsHeader()
   		{
    		return newColumnsHeader;
   		}

    	public void setNewColumnsHeader(Vector newColumnsHeader)
    	{
        	this.newColumnsHeader =  newColumnsHeader; //VER
    	}*/
    	
    	//Claudia's end

    	public String getType()
    	{
        	return type;
    	}

    	public void setType(String type)
    	{
        	this.type = new String(type);
    	}

    	public String getLength()
    	{
        	return length;
        }

    	public void setLength(String length)
    	{
        	try{
        	if(Double.parseDouble(length)<=0)
                this.length= new String("1");
        	else
        		this.length = new String(length);
        	}
        	catch(Exception ex)
        	{
				this.length= new String("1");
        	}

    	}

	    public String getPrefix()
        {
            return prefix;
        }

    	public void setPrefix(String prefix)
    	{
        	this.prefix =new String(prefix);
    	}

	    public String getSuffix()
        {
            return suffix;
        }

    	public void setSuffix(String suffix)
    	{
        	this.suffix = new String(suffix);
    	}
//new harold
        public String getFormat()
        {
            return format;
        }
//end
        public void setFormat(String format)
        {
            this.format = new String(format);
        }

	    public String getFormula()
        {
            return formula;
        }

    	public void setFormula(String formula)
    	{
        	this.formula = new String(formula);
    	}

	    public String getValue()
        {
            return value;
        }

    	public void setValue(String value)
    	{
        	this.value =new String( value);
        	getM_References().setChanged();
        	getM_References().notifyObservers(value);
    	}

        public StructureTestData getStructureTestData()
        {
            return structureTestData;
        }

        public void setStructureTestData(StructureTestData structureTestData)
        {
            this.structureTestData = structureTestData;
        }

        public boolean isFormula(){
                return isFormula;
            }

        public void setisFormula(boolean p_isFormula){
                this.isFormula = p_isFormula;
            }
		public boolean isLinkValue() {
			return linkValue;
		}
		public void setLinkValue(boolean linkValue) {
			this.linkValue = linkValue;
		}
        private boolean linkValue = false;
        private String key;
        private String global;
        private String field;//new harold
		private String name;
		
		private String stateNameOT="";//New Claudia
		private int stateOT=0;
	//	private int stateTVT=0;
		private String newColumn;
		private Vector newColumns = new Vector(5);
		
		
    	private String type;
		private String length;
		private String prefix;
		private String suffix;
        private String format; // new harold
		private String formula;
    	private String value;
        private StructureTestData structureTestData;
        private boolean isFormula;
        private TestDataFormat m_Formatter;
        private DelegateObservable m_References;
        private HashMap m_Subjects;

		
        public void addSubject(String p_Key, Object p_Subject){
        	getM_Subjects().put(p_Key, p_Subject);
        }
        public void removeSubject(String p_Key){
        	getM_Subjects().remove(p_Key);
        }
        public  void removeAllSubject(){
        	getM_Subjects().clear();
        }
		/**
		 * @return Returns the m_Subjects.
		 */
		public HashMap getM_Subjects() {
			if(m_Subjects== null){
				m_Subjects= new HashMap();
			}
			return m_Subjects;
		}
		/**
		 * @return Returns the m_References.
		 */
		public DelegateObservable getM_References() {
			if(m_References== null){
				m_References=new DelegateObservable();
			}
			return m_References;
		}
		
		////
//         /**
//          * @link aggregationByValue
//          * @supplierCardinality 1
//          * @clientCardinality 0..*
//          * @directed
//          */
// private StructureTestData lnkStructureTestData;
		public TestDataFormat getM_Formatter() {
			if(m_Formatter == null)
				m_Formatter=new TestDataFormat();
			return m_Formatter;
		}
		public void setM_Formatter(TestDataFormat formatter) {
			m_Formatter = formatter;
		}
		public void update(Observable arg0, Object arg1) {
			if (arg1 instanceof Variable) {
				int fieldChange=((Variable)arg1).fieldChanged();
				Variable variable=(Variable)arg1;
				switch (fieldChange) {
					case Variable.VARIABLES_VALUE:
					{
						if(!isFormula){
							try {
								setFormat(variable.getFormat());
								setM_Formatter(variable.getFormatter());
								//setValue(variable.getM_Value().getValue().toString());
								setValue(variable.getFormattedValue());
							} catch (Exception e) {
								
							}
						}
						else
						//	TDStructureManager.updateTypeDataReferences(getM_Subjects(),this);
						break;
					}
					case Variable.VARIABLES_TYPE:
					{
						if(!isFormula){
							setType(variable.getM_Type());
							setLength(CMCellTDStructureClassState.getDefaultValue(variable.getM_Type()));
						}
						break;
					}
					default:
						break;
				}
			}
			else{
				if(arg1 instanceof Vector){
					Vector variableAndName=(Vector)arg1;
					String oldName=(String) variableAndName.firstElement();
					Variable variable=(Variable) variableAndName.elementAt(1);
					int fieldChange=variable.fieldChanged();
					switch (fieldChange) {
						case Variable.VARIABLES_NAME :
						{
							if(formula.equals(oldName)){
								setName(variable.getM_Name());
							}
							else if(formula.indexOf("$"+oldName)>=0){
								formula.replaceAll("$"+oldName,"$"+variable.getM_Name());
							}
							break;
						}
					}
				}
				//else
				//	TDStructureManager.updateTypeDataReferences(getM_Subjects(),this);
			}
		}
		public void addObserver(Observer o) {
		//	getM_References().addObserver(o);
			}
		public void deleteObserver(Observer o) {
		//	getM_References().deleteObserver(o);
		}
		public int getM_Size(){
			return 12+newColumns.size();
		}
		/**
		 * @param references The m_References to set.
		 */
		public void setM_References(DelegateObservable references) {
			m_References = references;
		}
		/**
		 * @param subjects The m_Subjects to set.
		 */
		public void setM_Subjects(HashMap subjects) {
			m_Subjects = subjects;
		}
}
