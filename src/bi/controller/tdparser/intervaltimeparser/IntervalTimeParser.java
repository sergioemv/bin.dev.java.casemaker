/* Generated By:JavaCC: Do not edit this line. IntervalTimeParser.java */
package bi.controller.tdparser.intervaltimeparser;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.text.Format;
import bi.controller.VariablesManager;
import bi.view.mainframeviews.CMApplication;
import bi.view.utils.CMIntervalValue;
import java.util.Locale;

public class IntervalTimeParser implements IntervalTimeParserConstants {
       private StringBuffer stringAcumulator;
        private Vector intervalValues= new Vector();
        private Vector intervalToExtraValue= new Vector();
        public Vector getIntervalValues(){
                return intervalValues;
        }

        public Vector getIntervalToExtraValue() {
                return intervalToExtraValue;
        }

        public String getstringAcumulator(){
                return stringAcumulator.toString();
        }
        public String calculateValueOfRange(long p_Time, int p_Variant, String  p_Format){
                //p_Time= p_Time+p_Variant;
                Date date= Calendar.getInstance().getTime();
                date.setTime(p_Time);
                GregorianCalendar calendar=new GregorianCalendar();
                calendar.setTime(date);
                if(p_Format.equals("HH:mm"))
                        calendar.add(Calendar.MINUTE, p_Variant);
                else
                        calendar.add(Calendar.SECOND, p_Variant);
                Format formatter;
                formatter = new SimpleDateFormat(p_Format);
        String result = formatter.format(calendar.getTime());
                CMIntervalValue intervalValue= new CMIntervalValue();
                intervalValue.setNumber(new Long(calendar.getTimeInMillis()));
                intervalValue.setLocale(new Locale("de", "DE"));
                //intervalValue.setDiff(new Float(-p_Variant));
                intervalValue.setWriteFormat(p_Format);
                intervalToExtraValue.addElement(intervalValue);
                return result;
    }

        public String deleteParenthesis(String p_Value){
                p_Value=p_Value.replace('(',' ');
                p_Value=p_Value.replace(')',' ');
                return p_Value.trim();
        }

//TOKEN: {<STRINGS: (["a"-"z","A"-"Z","0"-"9"," ","-","_"])*>}
  final public void start() throws ParseException {
                stringAcumulator= new StringBuffer();
                intervalValues= new Vector();
    formalPolicy();
    jj_consume_token(0);
  }

  final public void formalPolicy() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OpenBracket:
    case CloseBracket:
      formalIntervalTime();
      break;
    case May:
    case Men:
    case Igual:
    case MayIgual:
    case MenIgual:
      mathIntervalTime();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void mathIntervalTime() throws ParseException {
    range();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case May:
    case Men:
    case Igual:
    case MayIgual:
    case MenIgual:
    case AND:
      mathIntervalTime2();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void mathIntervalTime2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      range();
      break;
    case May:
    case Men:
    case Igual:
    case MayIgual:
    case MenIgual:
      range();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void range() throws ParseException {
        String var;
        String operLog;
        String number;
        Token t;
        int variant=0;
        long time;
        DateFormat formatter;
        String format;
        Date date;
        CMIntervalValue intervalValue;
    operLog = logicOper();
                if(operLog.equals(">"))
                        variant=1;
                else
                        if(operLog.equals("<"))
                                variant= -1;
                        else
                                variant=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Hour:
      t = jj_consume_token(Hour);
                format="HH:mm:ss";
                if(t.image.length()== 5)
                        format="HH:mm";
                formatter= new SimpleDateFormat(format);
        date = Calendar.getInstance().getTime();
                try {
                        date = (Date)formatter.parse(t.image);
                } catch (java.text.ParseException e) {
                        e.printStackTrace();
                }
                time=date.getTime();
                intervalValues.addElement(calculateValueOfRange(time,variant,format));
                intervalValue=(CMIntervalValue)intervalToExtraValue.lastElement();
      break;
    case Variable:
      var = variables();
                format="HH:mm:ss";
                if(var.length()== 5)
                        format="HH:mm";
                formatter= new SimpleDateFormat(format);
        date = Calendar.getInstance().getTime();
                try {
                        date = (Date)formatter.parse(var);
                } catch (java.text.ParseException e) {
                        //e.printStackTrace();
                        {if (true) throw new ParseException();}
                }
                time=date.getTime();
                intervalValues.addElement(calculateValueOfRange(time,variant,format));
                intervalValue=(CMIntervalValue)intervalToExtraValue.lastElement();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void formalIntervalTime() throws ParseException {
        String firstBracket;
        String secondBracket;
        Token t;
        long time;
        int variant=0;
        DateFormat formatter;
        String format;
        Date date;
        String var;
        CMIntervalValue intervalValue;
    firstBracket = brackets();
                if(firstBracket.equals("["))
                        variant=0;
                else
                        variant=-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Hour:
      t = jj_consume_token(Hour);
                format="HH:mm:ss";
                if(t.image.length()== 5)
                        format="HH:mm";

                formatter= new SimpleDateFormat(format);
        date = Calendar.getInstance().getTime();
                try {
                        date = (Date)formatter.parse(t.image);
                } catch (java.text.ParseException e) {
                        e.printStackTrace();
                }
                time=date.getTime();
                intervalValues.addElement(calculateValueOfRange(time,variant,format));
                intervalValue=(CMIntervalValue)intervalToExtraValue.lastElement();
                intervalValue.setDiff(new Integer(-1));
      break;
    case Variable:
      var = variables();
                format="HH:mm:ss";
                if(var.length()== 5)
                        format="HH:mm";

                formatter= new SimpleDateFormat(format);
        date = Calendar.getInstance().getTime();
                try {
                        date = (Date)formatter.parse(var);
                } catch (java.text.ParseException e) {
                        //e.printStackTrace();
                        {if (true) throw new ParseException();}
                }
                time=date.getTime();
                intervalValues.addElement(calculateValueOfRange(time,variant,format));
                intervalValue=(CMIntervalValue)intervalToExtraValue.lastElement();
                intervalValue.setDiff(new Integer(-1));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(Coma);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Hour:
      t = jj_consume_token(Hour);
                format="HH:mm:ss";
                if(t.image.length()== 5)
                        format="HH:mm";
                try {
                        formatter= new SimpleDateFormat(format);
                        date = (Date)formatter.parse(t.image);
                } catch (java.text.ParseException e) {
                        e.printStackTrace();
                }
                time=date.getTime();
      break;
    case Variable:
      var = variables();
                format="HH:mm:ss";
                if(var.length()== 5)
                        format="HH:mm";
                try {
                        formatter= new SimpleDateFormat(format);
                        date = (Date)formatter.parse(var);
                } catch (java.text.ParseException e) {
                        //e.printStackTrace();
                        {if (true) throw new ParseException();}
                }
                time=date.getTime();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    secondBracket = brackets();
                if(secondBracket.equals("]"))
                        variant=0;
                else
                        variant=-1;
                intervalValues.addElement(calculateValueOfRange(time,variant,format));
                                intervalValue=(CMIntervalValue)intervalToExtraValue.lastElement();
                intervalValue.setDiff(new Integer(1));
  }

  final public String brackets() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OpenBracket:
      t = jj_consume_token(OpenBracket);
      break;
    case CloseBracket:
      t = jj_consume_token(CloseBracket);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String logicOper() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case May:
      t = jj_consume_token(May);
      break;
    case Men:
      t = jj_consume_token(Men);
      break;
    case Igual:
      t = jj_consume_token(Igual);
      break;
    case MayIgual:
      t = jj_consume_token(MayIgual);
      break;
    case MenIgual:
      t = jj_consume_token(MenIgual);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String variables() throws ParseException {
        String result;
        Token t;
        String temp;
    t = jj_consume_token(Variable);
                result = t.image;
    t = jj_consume_token(STRINGS);
    temp = text(t.image);
                result = result+temp;
                String tempResult = VariablesManager.returnImplicitExplicitVariable(result,CMApplication.frame.getGridTDStructure().getTDStructure());
                if(!tempResult.equalsIgnoreCase("")){
                        {if (true) return tempResult;}
                }
                else{
                        {if (true) return result;}
                }
    throw new Error("Missing return statement in function");
  }

  final public String text(String string) throws ParseException {
        StringBuffer result=new StringBuffer();
        Token t;
                result.append(string);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRINGS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(STRINGS);
                        result.append(t.image);
    }
                {if (true) return result.toString();}
    throw new Error("Missing return statement in function");
  }

  public IntervalTimeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7c0300,0xfc0000,0xfc0000,0x20400,0x20400,0x20400,0x300,0x7c0000,0x1000000,};
   }

  public IntervalTimeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public IntervalTimeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IntervalTimeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public IntervalTimeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IntervalTimeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public IntervalTimeParser(IntervalTimeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(IntervalTimeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
