/* Generated By:JavaCC: Do not edit this line. SetValuesParser.java */
package bi.controller.tdparser.intervaltimeparser;

import java.util.Vector;

import bi.controller.VariablesManager;
import bi.view.mainframeviews.CMApplication;

public class SetValuesParser implements SetValuesParserConstants {
        private StringBuffer stringAcumulator;
        private Vector intervalValues= new Vector();

        public Vector getIntervalValues(){
                return intervalValues;
        }
        public String getstringAcumulator(){
                return stringAcumulator.toString();
        }


        public String deleteParenthesis(String p_Value){
                p_Value=p_Value.replace('(',' ');
                p_Value=p_Value.replace(')',' ');
                return p_Value.trim();
        }

  final public void start() throws ParseException {
                stringAcumulator= new StringBuffer();
                intervalValues= new Vector();
    formalPolicy();
    jj_consume_token(0);
  }

  final public void formalPolicy() throws ParseException {
    setValues();
  }

  final public void setValues() throws ParseException {
    jj_consume_token(OpenBrace);
    set();
    jj_consume_token(CloseBrace);
  }

  final public void set() throws ParseException {
        Token t;
        String var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Variable:
      var = variables();
        intervalValues.addElement(deleteParenthesis(var));
      break;
    case Values:
      t = jj_consume_token(Values);
         intervalValues.addElement(deleteParenthesis(t.image));
      break;
    case ClosedValues:
      t = jj_consume_token(ClosedValues);
         intervalValues.addElement(deleteParenthesis(t.image));
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      moreElements();
    }
  }

  final public void moreElements() throws ParseException {
        Token t;
        String var;
    jj_consume_token(Coma);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Variable:
      var = variables();
                intervalValues.addElement(deleteParenthesis(var));
      break;
    case Values:
      t = jj_consume_token(Values);
                intervalValues.addElement(deleteParenthesis(t.image));
      break;
    case ClosedValues:
      t = jj_consume_token(ClosedValues);
                intervalValues.addElement(deleteParenthesis(t.image));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String variables() throws ParseException {
        String result;
        Token t;
    t = jj_consume_token(Variable);
                result = t.image;
    t = jj_consume_token(Values);
                result = result+t.image;
                String tempResult = VariablesManager.returnImplicitExplicitVariable(result,CMApplication.frame.getGridTDStructure().getTDStructure());
                if(!tempResult.equalsIgnoreCase("")){
                        {if (true) return tempResult;}
                }
                else{
                        {if (true) return result;}
                }
    throw new Error("Missing return statement in function");
  }

  public SetValuesParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7000,0x80,0x7000,};
   }

  public SetValuesParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SetValuesParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SetValuesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public SetValuesParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SetValuesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public SetValuesParser(SetValuesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(SetValuesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[15];
    for (int i = 0; i < 15; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
