/**
 * Developed by BUSINESS SOFTWARE INNOVATIONS. .
 * Copyright (c)2003 Díaz und Hilterscheid Unternehmensberatung. All rights reserved.
 * This File contains the Tokens and GRammar for Interval Time Parser
 */
options {
    // do not remove or modify the following 5 lines:
    STATIC = false; // more instances of the token manager will be allowed
    //USER_CHAR_STREAM = true; // user provided CharStream
    BUILD_PARSER = true; // do not build parser
    BUILD_TOKEN_MANAGER = true; // build token manager
   // UNICODE_INPUT = true; // input will be unicode characters
}

PARSER_BEGIN(SetValuesParser)
package bi.controller.tdparser.intervaltimeparser;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.text.Format;
import bi.controller.VariablesManager;
import bi.view.mainframeviews.CMApplication;

public class SetValuesParser{
	private StringBuffer stringAcumulator;
	private Vector intervalValues= new Vector();
	
	public Vector getIntervalValues(){
		return intervalValues;
	}
	public String getstringAcumulator(){
		return stringAcumulator.toString();
	}
	
        
	public String deleteParenthesis(String p_Value){
		p_Value=p_Value.replace('(',' ');
		p_Value=p_Value.replace(')',' ');
		return p_Value.trim();
	}
}

PARSER_END(SetValuesParser)

SKIP  : {" "| "\t"| "\n"| "\r"| "\f" | "\r\n" }
TOKEN : {<Coma : ",">}
TOKEN: {<OpenBrace: "{">}
TOKEN: {<CloseBrace: "}">}
TOKEN: {<OpenParenthesis: "(">}
TOKEN: {<CloseParenthesis: ")">}
TOKEN: {<Variable: "$">}
TOKEN: {<Values: (~["(" , "$" , ")" , "{" , "}", ","])+>}
TOKEN: {<ClosedValues: (<OpenParenthesis>(~["(" , ")" , "{" , "}" ])+<CloseParenthesis>)>}


void start():
{}
{
	{
		
		stringAcumulator= new StringBuffer();
		intervalValues= new Vector();
	}
	formalPolicy() 
	<EOF>
}
void formalPolicy():
{}
{
      setValues()
}

void setValues():
{}
{
	<OpenBrace>set()<CloseBrace>
}
void set():
{
	Token t;
	String var;
}
{
   (var = variables()
   {
   	intervalValues.addElement(deleteParenthesis(var));
   }
   |t=<Values>
   {
   	 intervalValues.addElement(deleteParenthesis(t.image));
   }
    | t=<ClosedValues>
   {
   	 intervalValues.addElement(deleteParenthesis(t.image));
   }
   )
   (moreElements())*
}
void moreElements():
{
	Token t;
	String var;
}
{
	<Coma>(var = variables()
	{
		intervalValues.addElement(deleteParenthesis(var));
	}
	|t=<Values>
	{
		intervalValues.addElement(deleteParenthesis(t.image));
	}
	|t=<ClosedValues>
	{
		intervalValues.addElement(deleteParenthesis(t.image));
	}
)
}


String variables():
{
	String result;
	Token t;
}
{
	t=<Variable>
	{
		result = t.image;
	}
	t = <Values>
	{
		result = result+t.image;
		String tempResult = VariablesManager.returnImplicitExplicitVariable(result,CMApplication.frame.getGridTDStructure().getTDStructure());
		if(!tempResult.equalsIgnoreCase("")){
			return tempResult;
		}	
		else{
			return result;
		}
	}
}


