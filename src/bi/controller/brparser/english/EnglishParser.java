/* Generated By:JavaCC: Do not edit this line. EnglishParser.java */
package bi.controller.brparser.english;

import bi.view.lang.CMMessages;
import bi.view.utils.*;
import bi.controller.BRParserDataManager;
import java.lang.StringBuffer;
import java.util.Vector;
import java.util.Date;
import model.brmodel.BusinessAction;
import model.brmodel.BusinessObject;
import model.brmodel.FormalPolicy;
import model.brmodel.InferenceRule;
import model.brmodel.RelationalPair;
import model.brmodel.PosRelationalPair;
import model.brmodel.BooleanBlock;
import model.brmodel.OrBlock;
import model.brmodel.AndBlock;
import model.State;



public class EnglishParser implements EnglishParserConstants {
        private static boolean check = true;
        private static boolean  negativeBA=false;
        private static int deep=0;
        private static int negativeDeep=0;
        private static FormalPolicy m_FormalPolicy;
        private static BRParserDataManager m_DataManager= new BRParserDataManager();

        public static void setCheck(boolean value){
                check = value;
        }


        public static FormalPolicy getM_FormalPolicy(){
            return m_FormalPolicy;
      }

        public static BRParserDataManager getM_DataManager(){
                return m_DataManager;
        }

  static final public void start() throws ParseException {
                m_FormalPolicy=m_DataManager.createFormalPolicy();
    formalPolicy();
    jj_consume_token(0);
  }

  static final public void formalPolicy() throws ParseException {
    label_1:
    while (true) {
      formalRuleStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void formalRuleStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      derivationRule();
      break;
    case ID:
      otherRules();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void derivationRule() throws ParseException {
 InferenceRule theRule=null;
                negativeBA=false;
                deep=0;
                negativeDeep=1;
    theRule = inferenceRule();
                if(!check){
                        m_DataManager.addInferenceRule(m_FormalPolicy,theRule);

                }
  }

  static final public InferenceRule inferenceRule() throws ParseException {
 OrBlock booleanStructure=null;
InferenceRule thisRule=null;
                deep++;
    booleanStructure = conditionExpression();
    thisRule = actionAssertion(booleanStructure);
                {
                        deep--;
                        if(deep<= negativeDeep){
                                negativeDeep=0;
                                negativeBA= false;
                        }
                }
                if(!check){
                        {if (true) return thisRule;}
                }
                else{
                        {if (true) return null;}
                }
    throw new Error("Missing return statement in function");
  }

  static final public OrBlock conditionExpression() throws ParseException {
 //OrBlock booleanStructure=null; //cc
OrBlock incoming = null;
    if (jj_2_1(2147483647)) {
      incoming = isIfNotExpression();
          {if (true) return incoming;}
    } else if (jj_2_2(2147483647)) {
      incoming = isIfExpression();
          {if (true) return incoming;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public OrBlock isIfExpression() throws ParseException {
 OrBlock booleanStructure=null;
Token t;
    t = jj_consume_token(IF);
    jj_consume_token(41);
    booleanStructure = booleanExpression("");
    jj_consume_token(42);
                if(!check){
                        m_DataManager.resolveSameElementInExpression(booleanStructure);
                }
                {if (true) return booleanStructure;}
    throw new Error("Missing return statement in function");
  }

//ccastedo begins 30.05.07
  static final public OrBlock isIfNotExpression() throws ParseException {
 OrBlock booleanStructure=null;
Token t;
    t = jj_consume_token(IF);
    jj_consume_token(NOT);
    jj_consume_token(41);
    booleanStructure = booleanExpression("IF NOT");
    jj_consume_token(42);
                if(!check){
                        m_DataManager.resolveSameElementInExpression(booleanStructure);
                }
                {if (true) return booleanStructure;}
    throw new Error("Missing return statement in function");
  }

//ccastedo ends 30.05.07
  static final public OrBlock booleanExpression(String t) throws ParseException {
Object incoming;
OrBlock orBlock;
    incoming = oper(t);
                           orBlock = new OrBlock(incoming);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      incoming = oper(t);
                                   orBlock.addIncoming(incoming);
    }
                {if (true) return orBlock;}
    throw new Error("Missing return statement in function");
  }

  static final public Object oper(String t) throws ParseException {
Object incoming;
AndBlock andBlock;
boolean blockCreated = false;
    incoming = fact(t);
                           andBlock = new AndBlock(incoming);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      incoming = fact(t);
                andBlock.addIncoming(incoming);
                blockCreated = true;
    }
                if(blockCreated){
                        {if (true) return (Object)andBlock;}
                }
                else{
                        {if (true) return incoming;}
                }
    throw new Error("Missing return statement in function");
  }

  static final public Object fact(String t) throws ParseException {
 PosRelationalPair pair;
 Object incoming;
    if (jj_2_3(2147483647)) {
      incoming = isAnyOfExpression();
          {if (true) return incoming;}
    } else if (jj_2_4(2147483647)) {
      incoming = isNotAnyOfExpression();
          {if (true) return incoming;}
    } else if (jj_2_5(2147483647)) {
      incoming = isAnyOfExpressionNOT();
          {if (true) return incoming;}
    } else if (jj_2_6(2147483647)) {
      incoming = isNotAnyOfExpressionNOT();
          {if (true) return incoming;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case NATIVE:
      case VALUE_EXPRESSION:
      case ID:
      case 41:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case NATIVE:
        case VALUE_EXPRESSION:
        case ID:
          pair = relationalExpression(t);
          {if (true) return pair;}
          break;
        case 41:
          jj_consume_token(41);
          incoming = booleanExpression(t);
          jj_consume_token(42);
          {if (true) return incoming;}
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public PosRelationalPair relationalExpression(String t) throws ParseException {
 BusinessObject expressionSubject=null;
String subjectName="";
String operator="";
String value="";
String n="";
PosRelationalPair pair=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      subjectName = subject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                }
      break;
    case NATIVE:
      subjectName = nativeSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case VALUE_EXPRESSION:
      subjectName = quoteSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case NOT:
      jj_consume_token(NOT);
                                 n="not";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        subjectName = subject();
                                        if(!check){
                                                expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                                        }
        break;
      case NATIVE:
        subjectName = nativeSubject();
                                        if(!check){
                                                expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                                        }
        break;
      case VALUE_EXPRESSION:
        subjectName = quoteSubject();
                                        if(!check){
                                                expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                                        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    operator = relationalOperator(n,t);
    value = businessValue();
//ccastedo begins 01.06.07
//		if(value.matches("[Oo][tT][hH][eE][rR]([sS])?")){
//					throw new ParseException(CMMessages.getString("MESSAGE_OTHER_USED_WRONG")); 
//		}
//ccastedo ends 01.06.07
                if(!check){

                                if(!operator.equals("="))
                                        m_DataManager.assignValue(expressionSubject,(operator+' '+value));
                                else
                                        m_DataManager.assignValue(expressionSubject,(value));


                }
                        if(!operator.equals("="))
                                {if (true) return new PosRelationalPair(expressionSubject,(operator+' '+value));}
                        else
                                {if (true) return new PosRelationalPair(expressionSubject,(value));}
    throw new Error("Missing return statement in function");
  }

  static final public String subject() throws ParseException {
 Token dot;
String object;
StringBuffer allObjects=new StringBuffer();
    object = businessObject();
                                 allObjects.append(object);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(DOT);
               allObjects.append(".");
      object = businessObject();
                                                                allObjects.append(object);
    }
         //System.out.println(allObjects.toString());
        {if (true) return allObjects.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String nativeSubject() throws ParseException {
        Token t;
        String result;
    jj_consume_token(NATIVE);
    t = jj_consume_token(NATIVE_CONTENT);
                                result=t.image;
                                result=result.substring(1,result.length()-1);
                                result=result.trim();
                                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

//ccastedo begins
  static final public String quoteSubject() throws ParseException {
        Token t;
        String result;
    t = jj_consume_token(VALUE_EXPRESSION);
                                result=t.image;
                                result=result.substring(1,result.length()-1);
                                result=result.trim();
                                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

//ccastedo ends
  static final public String businessObject() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String businessRole() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String businessValue() throws ParseException {
 String valueObjectChain="";
BusinessObject valueObject=null;
String value="";
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        valueObjectChain = subject();
                if(!check){
                        valueObject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,valueObjectChain);
                }
                {if (true) return valueObjectChain;}
        break;
      case NATIVE:
        valueObjectChain = nativeSubject();
                if(!check){
                        valueObject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,valueObjectChain);
                }
                {if (true) return valueObjectChain;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case VALUE_EXPRESSION:
      t = jj_consume_token(VALUE_EXPRESSION);
                value=t.image;
                {if (true) return value.substring(1,(value.length()-1));}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                value=t.image;
                {if (true) return value;}//.substring(1,(value.length()-1));

      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String relationalOperator(String n,String t) throws ParseException {
        String value="";
                        value = t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return "!=";}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return "=";}
      break;
    case 44:
      jj_consume_token(44);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return  "=" ;}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return "!=";}
      break;
    case 45:
      jj_consume_token(45);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return "<";}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return ">";}
      break;
    case 46:
      jj_consume_token(46);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return ">";}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return "<";}
      break;
    case 47:
      jj_consume_token(47);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return "<=";}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return ">=";}
      break;
    case 48:
      jj_consume_token(48);
                        if(((value == "")&&(n == ""))||((value == "IF NOT")&&(n == "not")))
                                {if (true) return ">=";}
                        else
                                if ((value == "IF NOT")||(n == "not"))
                                        {if (true) return "<=";}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public InferenceRule actionAssertion(OrBlock booleanStructure) throws ParseException {
 InferenceRule thisRule=null;
Object truePart=null;
Object falsePart=null;
Object truePart2=null;
Object falsePart2=null;
InferenceRule thisRule2=null;
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BUSINESS_ACTION_TAG:
    case NO_BUSINESS_ACTION_TAG:
      truePart = businessAction();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        truePart2 = inferenceRule();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case IF:
      truePart = inferenceRule();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
                                                                                                   deep--;
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BUSINESS_ACTION_TAG:
      case NO_BUSINESS_ACTION_TAG:
        falsePart = businessAction();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          falsePart2 = inferenceRule();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      case IF:
        falsePart = inferenceRule();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                                                                                     deep++;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
                if(!check){
                        if(truePart2 != null && falsePart2!= null){
                                thisRule = m_DataManager.createInferenceRule(truePart2,falsePart2,booleanStructure);
                                thisRule2=m_DataManager.createInferenceRule(truePart,falsePart,booleanStructure);
                                 m_DataManager.addInferenceRule(m_FormalPolicy,thisRule2);
                        }
                        else if(truePart2 != null){
                                thisRule = m_DataManager.createInferenceRule(truePart2,falsePart,booleanStructure);
                                thisRule2=m_DataManager.createInferenceRule(truePart,falsePart2,booleanStructure);
                                m_DataManager.addInferenceRule(m_FormalPolicy,thisRule2);
                        }
                        else if(falsePart2 != null){
                                thisRule = m_DataManager.createInferenceRule(truePart,falsePart2,booleanStructure);
                                thisRule2=m_DataManager.createInferenceRule(new Vector(),falsePart,booleanStructure);
                                m_DataManager.addInferenceRule(m_FormalPolicy,thisRule2);
                        }
                        else{
                                thisRule = m_DataManager.createInferenceRule(truePart,falsePart,booleanStructure);
                        }
                        {if (true) return thisRule;}
                }
         {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Object businessAction() throws ParseException {
 Token t;
        Token stateAction;
        int riskLevelAction=0;
String s=null;
String finalString=null;
BusinessAction bAction=null;
Vector allBusinessActions= new Vector();
boolean looked=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BUSINESS_ACTION_TAG:
      label_5:
      while (true) {
        stateAction = jj_consume_token(BUSINESS_ACTION_TAG);
        t = jj_consume_token(ACTION_BLOCK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITH:
          complementaryBusinessActionExpresions(t.image,allBusinessActions);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
                if(!check){
                        int state=m_DataManager.getStateForBusinessAction(stateAction.image);
                        s=t.image;
                        s=s.substring(1,s.length()-1);
                        s=s.trim();
                        s=s.replaceAll("[ \t]*\n+[ \t]*","\n");
                        bAction=m_DataManager.getBusinessActionByDescription(m_FormalPolicy,s);
                        if(bAction==null){
                                bAction=m_DataManager.createAndAddBusinessAction(m_FormalPolicy,s);
                                if(state != -1)
                                        m_DataManager.addStateToBusinessAction(bAction,state);
                        }
                        else{
                                if(state != -1)
                                        m_DataManager.changeStateToBusinessAction(bAction,state);
                        }
                        if(!allBusinessActions.contains(bAction))
                                allBusinessActions.addElement(bAction);
                }
                else{
                        int state=m_DataManager.getStateForBusinessAction(stateAction.image);
                        if (state !=State.POSITIVE.intValue() && state != -1){
                                if(negativeBA){
                                        looked=true;
                                }
                                else{
                                        negativeBA= true;
                                        negativeDeep= deep;
                                }
                        }
                        else{
                                if(!looked && deep> negativeDeep && negativeBA){
                                        TokenMgrError e=new TokenMgrError(CMMessages.getString("BR_MESSAGE_POSITIVE_BA_AFTER_NEGATIVE_BA"), TokenMgrError.LEXICAL_ERROR);
                                        e.m_ErrorLine=t.beginLine;
                                        {if (true) throw   e;}
                                }
                        }
                }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BUSINESS_ACTION_TAG:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
      }
                {if (true) return allBusinessActions;}
      break;
    case NO_BUSINESS_ACTION_TAG:
      t = jj_consume_token(NO_BUSINESS_ACTION_TAG);
                if(!check){
                        {if (true) return allBusinessActions;}
                }
                {if (true) return t.image;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void otherRules() throws ParseException {
 String bObject;
    bObject = businessObject();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_ATT:
    case IS:
    case COMPOSED_OF:
    case MAY_BE:
    case MAY_BE_THE:
    case 53:
      structuralAssertionRule(bObject);
      break;
    case DOT:
    case 44:
      mathematicalCalculationRule(bObject);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mathematicalCalculationRule(String firstObject) throws ParseException {
 StringBuffer ruleSubject=new StringBuffer();
String subjectsTail="";
String expression="";
                if(!check){

                        ruleSubject.append(firstObject);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      subjectsTail = subject();
                if(!check){
                        ruleSubject.append("."+subjectsTail);
                }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(44);
    expression = mathematicalExpression();
                if(!check){
                        m_DataManager.addMathematicalCalculationRule(m_FormalPolicy,ruleSubject.toString(),expression);
                }
  }

  static final public String mathematicalExpression() throws ParseException {
 String s="";
StringBuffer buf=new StringBuffer();
    s = operand();
                if(!check){
                        buf.append(s);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
    case 50:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
                if(!check){
                        buf.append("+");
                }
        break;
      case 50:
        jj_consume_token(50);
                if(!check){
                        buf.append("-");
                }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = mathematicalExpression();
                if(!check){
                        buf.append(s);
                }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
         {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String operand() throws ParseException {
 String s="";
StringBuffer buf=new StringBuffer();
    s = factor();
                if(!check){
                        buf.append(s);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
    case 52:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        jj_consume_token(51);
                if(!check){
                        buf.append("*");
                }
        break;
      case 52:
        jj_consume_token(52);
                if(!check){
                        buf.append("/");
                }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = operand();
                if(!check){
                        buf.append(s);
                }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String factor() throws ParseException {
 String s="";
StringBuffer buf=new StringBuffer();
Token t;
String value="";
BusinessObject expressionSubject=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
                if(!check){
                        buf.append("(");
                }
      s = mathematicalExpression();
                if(!check){
                        buf.append(s);
                }
      jj_consume_token(42);
                if(!check){
                        buf.append(")");
                        {if (true) return buf.toString();}
                }
                {if (true) return s;}
      break;
    case ID:
      s = subject();
                if(!check){
                        expressionSubject = m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,s);
                }
                {if (true) return s;}
      break;
    case VALUE_EXPRESSION:
      t = jj_consume_token(VALUE_EXPRESSION);
                        value=t.image;
                        {if (true) return value.substring(1,(value.length()-1));}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                value=t.image;
                {if (true) return t.image;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void structuralAssertionRule(String firstObject) throws ParseException {
    factRule(firstObject);
  }

  static final public void factRule(String firstObject) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_ATT:
    case 53:
      attributeFactRule(firstObject);
      break;
    case IS:
      generalizationFactRule(firstObject);
      break;
    case COMPOSED_OF:
    case MAY_BE:
    case MAY_BE_THE:
      participationFactRule(firstObject);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void attributeFactRule(String firstAttribute) throws ParseException {
 Vector attributes=new Vector();
String attributeOwnerChain="";
String otherAttribute="";
BusinessObject attributeOwner=null;
BusinessObject attribute=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_ATT:
      jj_consume_token(IS_ATT);
      attributeOwnerChain = subject();
                if(!check){
                        attributeOwner=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,attributeOwnerChain);
                        attribute=m_DataManager.insertObjectsFromChain(m_FormalPolicy,attributeOwner,firstAttribute);
                        m_DataManager.createAttributeFactRule(m_FormalPolicy,attributeOwner,attribute);

                }
      break;
    case 53:
                if(!check){
                        attributes.addElement(firstAttribute);
                }
      label_6:
      while (true) {
        jj_consume_token(53);
        otherAttribute = businessObject();
                if(!check){
                        attributes.addElement(otherAttribute);
                }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(ARE_ATT);
      attributeOwnerChain = subject();
                if(!check){
                        attributeOwner=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,attributeOwnerChain);
                        m_DataManager.addAttributesToBusinessObject(m_FormalPolicy,attributeOwner,attributes);
                        m_DataManager.createAttributeFactRule(m_FormalPolicy,attributeOwner,attributes);
                }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void generalizationFactRule(String subClass) throws ParseException {
 String superClass=null;
    jj_consume_token(IS);
    superClass = businessObject();
                if(!check){
                        m_DataManager.createGeneralizationFactRule(m_FormalPolicy,subClass,superClass);
                }
  }

  static final public void participationFactRule(String firstObject) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAY_BE:
      associationFactRule(firstObject);
      break;
    case COMPOSED_OF:
      aggregationFactRule(firstObject);
      break;
    case MAY_BE_THE:
      roleFactRule(firstObject);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void associationFactRule(String firstObject) throws ParseException {
String modifier=null;
Token t;
    jj_consume_token(MAY_BE);
    t = jj_consume_token(ID);
    jj_consume_token(BY);
    modifier = businessObject();
                if(!check){
                        m_DataManager.createAssociationFactRule(m_FormalPolicy,firstObject,t.image,modifier);
                }
  }

  static final public void aggregationFactRule(String firstObject) throws ParseException {
 String actionObject=null;
    jj_consume_token(COMPOSED_OF);
    actionObject = businessObject();
                if(!check){
                        m_DataManager.createAggregationFactRule(m_FormalPolicy,firstObject,actionObject);
                }
  }

  static final public void roleFactRule(String firstObject) throws ParseException {
 String roleName=null;
    jj_consume_token(MAY_BE_THE);
    roleName = businessRole();
                if(!check){
                        m_DataManager.createRoleFactRule(m_FormalPolicy,firstObject,roleName);
                }
  }

  static final public int riskLevelExpression() throws ParseException {
        Token t;
        Token oldToken;
    oldToken = jj_consume_token(RISKLEVEL);
    jj_consume_token(44);
    t = jj_consume_token(VALUE_EXPRESSION);
                String onlyNumber= t.image.substring(1,t.image.length()-1);
                if(m_DataManager.isValidRiskLevelValue(onlyNumber))
                        {if (true) return Integer.valueOf(onlyNumber);}
                else{
                        int[][] mensage=new int[1][1];
                        mensage[0][0]=31;
                        {if (true) throw new ParseException(oldToken.next,mensage,tokenImage);}
                }
    throw new Error("Missing return statement in function");
  }

  static final public Vector requirementExpression() throws ParseException {
        Token t;
        Token oldToken;
    oldToken = jj_consume_token(REQUIREMENTS);
    t = jj_consume_token(ACTION_BLOCK);
                String values= t.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        //values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                try{
                Vector organizedValues= m_DataManager.getRequirementFromString(values);
                {if (true) return organizedValues;}
                }
                catch(bi.controller.brparser.requirementsresultparser.ParseException ex){
                        {if (true) throw new ParseException(oldToken,ex.expectedTokenSequences,ex.tokenImage);}
                }
    throw new Error("Missing return statement in function");
  }

  static final public Vector resultExpression() throws ParseException {
        Token t;
        Token oldToken;
    oldToken = jj_consume_token(RESULT);
    t = jj_consume_token(ACTION_BLOCK);
                String values= t.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        //values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                try{
                Vector organizedValues= m_DataManager.getResultFromString(values);
                {if (true) return organizedValues;}
                }
                catch( bi.controller.brparser.requirementsresultparser.ParseException ex){
                        System.out.println(ex);
                        {if (true) throw new ParseException(oldToken,ex.expectedTokenSequences,ex.tokenImage);}
                }
    throw new Error("Missing return statement in function");
  }

  static final public void complementaryBusinessActionExpresions(String businessAction, Vector allBusinessActions) throws ParseException {
        int risklevelValue=-1;
        Vector requirementValues= null;
        Vector resultValues=null;
        BusinessAction bAction=null;
    jj_consume_token(WITH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RISKLEVEL:
      risklevelValue = riskLevelExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        riskLevelComplement(businessAction, allBusinessActions);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    case REQUIREMENTS:
      requirementValues = requirementExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        requirementComplement(businessAction,allBusinessActions);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    case RESULT:
      resultValues = resultExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        resultComplement(businessAction,allBusinessActions);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(!check){
                        String s=businessAction;
                        s=s.substring(1,s.length()-1);
                        s=s.trim();
                        s=s.replaceAll("[ \t]*\n+[ \t]*","\n");
                        bAction=m_DataManager.getBusinessActionByDescription(m_FormalPolicy,s);
                        if(bAction==null){
                                bAction=m_DataManager.createAndAddBusinessAction(m_FormalPolicy,s);
                                if(risklevelValue!=-1)
                                        m_DataManager.addRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(requirementValues!= null)
                                        m_DataManager.addRequirementToBusinessAction(bAction,requirementValues);
                                if(resultValues!=null)
                                        m_DataManager.addResultToBusinessAction(bAction,resultValues);
                        }
                        else{
                                if(risklevelValue!=-1)
                                        m_DataManager.changeRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(requirementValues!= null)
                                        m_DataManager.changeRequirementToBusinessAction(bAction,requirementValues);
                                if(resultValues!=null)
                                        m_DataManager.changeResultToBusinessAction(bAction,resultValues);
                        }
                        if(!allBusinessActions.contains(bAction))
                                allBusinessActions.addElement(bAction);
                }
  }

  static final public void riskLevelComplement(String businessAction, Vector allBusinessActions) throws ParseException {
        Vector requirementValues= null;
        Vector resultValues= null;
        BusinessAction bAction=null;
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIREMENTS:
      requirementValues = requirementExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        resultValues = resultExpression();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    case RESULT:
      resultValues = resultExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        requirementValues = requirementExpression();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(!check){
                        String s=businessAction;
                        s=s.substring(1,s.length()-1);
                        s=s.trim();
                        s=s.replaceAll("[ \t]*\n+[ \t]*","\n");
                        bAction=m_DataManager.getBusinessActionByDescription(m_FormalPolicy,s);
                        if(bAction==null){
                                bAction=m_DataManager.createAndAddBusinessAction(m_FormalPolicy,s);
                                if(requirementValues!= null)
                                        m_DataManager.addRequirementToBusinessAction(bAction,requirementValues);
                                if(resultValues!=null)
                                        m_DataManager.addResultToBusinessAction(bAction,resultValues);
                        }
                        else{
                                if(requirementValues!= null)
                                        m_DataManager.changeRequirementToBusinessAction(bAction,requirementValues);
                                if(resultValues!=null)
                                        m_DataManager.changeResultToBusinessAction(bAction,resultValues);
                        }
                        if(!allBusinessActions.contains(bAction))
                                allBusinessActions.addElement(bAction);
                }
  }

  static final public void requirementComplement(String businessAction,Vector allBusinessActions) throws ParseException {
        int risklevelValue=-1;
        Vector resultValues= null;
        BusinessAction bAction=null;
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RISKLEVEL:
      risklevelValue = riskLevelExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        resultValues = resultExpression();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    case RESULT:
      resultValues = resultExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        risklevelValue = riskLevelExpression();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(!check){
                        String s=businessAction;
                        s=s.substring(1,s.length()-1);
                        s=s.trim();
                        s=s.replaceAll("[ \t]*\n+[ \t]*","\n");
                        bAction=m_DataManager.getBusinessActionByDescription(m_FormalPolicy,s);
                        if(bAction==null){
                                bAction=m_DataManager.createAndAddBusinessAction(m_FormalPolicy,s);
                                if(risklevelValue!=-1)
                                        m_DataManager.addRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(resultValues!=null)
                                        m_DataManager.addResultToBusinessAction(bAction,resultValues);
                        }
                        else{
                                if(risklevelValue!=-1)
                                        m_DataManager.changeRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(resultValues!=null)
                                        m_DataManager.changeResultToBusinessAction(bAction,resultValues);
                        }
                        if(!allBusinessActions.contains(bAction))
                                allBusinessActions.addElement(bAction);
                }
  }

  static final public void resultComplement(String businessAction, Vector allBusinessActions) throws ParseException {
        int risklevelValue=-1;
        Vector requirementValues= null;
        BusinessAction bAction=null;
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RISKLEVEL:
      risklevelValue = riskLevelExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        requirementValues = requirementExpression();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    case REQUIREMENTS:
      requirementValues = requirementExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        risklevelValue = riskLevelExpression();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(!check){
                        String s=businessAction;
                        s=s.substring(1,s.length()-1);
                        s=s.trim();
                        s=s.replaceAll("[ \t]*\n+[ \t]*","\n");
                        bAction=m_DataManager.getBusinessActionByDescription(m_FormalPolicy,s);
                        if(bAction==null){
                                bAction=m_DataManager.createAndAddBusinessAction(m_FormalPolicy,s);
                                if(risklevelValue!=-1)
                                        m_DataManager.addRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(requirementValues!= null)
                                        m_DataManager.addRequirementToBusinessAction(bAction,requirementValues);
                        }
                        else{
                                if(risklevelValue!=-1)
                                        m_DataManager.changeRiskLevelToBusinessAction(bAction,risklevelValue);
                                if(requirementValues!= null)
                                        m_DataManager.changeRequirementToBusinessAction(bAction,requirementValues);
                        }
                        if(!allBusinessActions.contains(bAction))
                                allBusinessActions.addElement(bAction);
                }
  }

  static final public OrBlock isAnyOfExpression() throws ParseException {
        Object incoming;
        OrBlock orBlock= null;
        Vector expressionSubjects= new Vector();
        String subjectName="";
        String operator="=";
        BusinessObject expressionSubject=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      subjectName = subject();
                        if(!check){
                                expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                        }
      break;
    case NATIVE:
      subjectName = nativeSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case VALUE_EXPRESSION:
      subjectName = quoteSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IS_ANY_OF);
    jj_consume_token(41);
    expressionSubjects = expressionSubjects();
    jj_consume_token(42);
                for(int i=0; i < expressionSubjects.size();i++ ){
                        String value=(String)expressionSubjects.elementAt(i);
                        if(!check){
                                        m_DataManager.assignValue(expressionSubject,value);
                        }
                        incoming=new PosRelationalPair(expressionSubject,value);
                        if(orBlock == null){
                                orBlock = new OrBlock(incoming);
                        }
                        else{
                                orBlock.addIncoming(incoming);
                        }
        }
        {if (true) return orBlock;}
    throw new Error("Missing return statement in function");
  }

//ccastedo begins 31.05.07
  static final public OrBlock isNotAnyOfExpressionNOT() throws ParseException {
        Object incoming;
        OrBlock orBlock= null;
        Vector expressionSubjects= new Vector();
        String subjectName="";
        String operator="=";
        BusinessObject expressionSubject=null;
    jj_consume_token(NOT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      subjectName = subject();
                        if(!check){
                                expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                        }
      break;
    case NATIVE:
      subjectName = nativeSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case VALUE_EXPRESSION:
      subjectName = quoteSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IS_NOT_ANY_OF);
    jj_consume_token(41);
    expressionSubjects = expressionSubjects();
    jj_consume_token(42);
                for(int i=0; i < expressionSubjects.size();i++ ){
                        String value=(String)expressionSubjects.elementAt(i);
                        if(!check){
                                        m_DataManager.assignValue(expressionSubject,value);
                        }
                        incoming=new PosRelationalPair(expressionSubject,value);
                        if(orBlock == null){
                                orBlock = new OrBlock(incoming);
                        }
                        else{
                                orBlock.addIncoming(incoming);
                        }
        }
        {if (true) return orBlock;}
    throw new Error("Missing return statement in function");
  }

//ccastedo ends 31.05.07
  static final public Vector expressionSubjects() throws ParseException {
        Vector values= new Vector();
        String value="";
    value = businessValue();
//ccastedo begins 01.06.07
//		if(value.matches("[Oo][tT][hH][eE][rR]([sS])?")){
//					throw new ParseException(CMMessages.getString("MESSAGE_OTHER_USED_WRONG")); 
//		}
//ccastedo ends 01.06.07
                values.addElement(value);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_7;
      }
      jj_consume_token(53);
      value = businessValue();
//ccastedo begins 01.06.07
//		if(value.matches("[Oo][tT][hH][eE][rR]([sS])?")){
//					throw new ParseException(CMMessages.getString("MESSAGE_OTHER_USED_WRONG")); 
//		}
//ccastedo ends 01.06.07
                values.addElement(value);
    }
                {if (true) return values;}
    throw new Error("Missing return statement in function");
  }

//ccastedo begins 31.05.07
  static final public OrBlock isAnyOfExpressionNOT() throws ParseException {
        Object incoming;
        OrBlock orBlock= null;
        Vector expressionSubjects= new Vector();
        String subjectName="";
        String operator="!=";
        BusinessObject expressionSubject=null;
        StringBuffer value=new StringBuffer();
    jj_consume_token(NOT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      subjectName = subject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                }
      break;
    case NATIVE:
      subjectName = nativeSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case VALUE_EXPRESSION:
      subjectName = quoteSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IS_ANY_OF);
    jj_consume_token(41);
    expressionSubjects = expressionSubjects();
    jj_consume_token(42);
        for(int i=0; i < (expressionSubjects.size()-1);i++ ){
                value.append(operator);
                value.append(expressionSubjects.elementAt(i));
                value.append(" AND ");
        }
        value.append(operator);
        value.append(expressionSubjects.lastElement());
        if(!check){
                 m_DataManager.assignValue(expressionSubject,value.toString());
                }
                incoming=new PosRelationalPair(expressionSubject,value.toString());
                orBlock = new OrBlock(incoming);
        {if (true) return orBlock;}
    throw new Error("Missing return statement in function");
  }

//ccastedo ends 31.05.07
  static final public OrBlock isNotAnyOfExpression() throws ParseException {
        Object incoming;
        OrBlock orBlock= null;
        Vector expressionSubjects= new Vector();
        String subjectName="";
        String operator="!=";
        BusinessObject expressionSubject=null;
        StringBuffer value=new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      subjectName = subject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromChain(m_FormalPolicy,null,subjectName);
                }
      break;
    case NATIVE:
      subjectName = nativeSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    case VALUE_EXPRESSION:
      subjectName = quoteSubject();
                if(!check){
                        expressionSubject=m_DataManager.insertObjectsFromNative(m_FormalPolicy,subjectName);
                }
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IS_NOT_ANY_OF);
    jj_consume_token(41);
    expressionSubjects = expressionSubjects();
    jj_consume_token(42);
        for(int i=0; i < (expressionSubjects.size()-1);i++ ){
                value.append(operator);
                value.append(expressionSubjects.elementAt(i));
                value.append(" AND ");
        }
        value.append(operator);
        value.append(expressionSubjects.lastElement());
        if(!check){
                 m_DataManager.assignValue(expressionSubject,value.toString());
                }
                incoming=new PosRelationalPair(expressionSubject,value.toString());
                orBlock = new OrBlock(incoming);
        {if (true) return orBlock;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_3R_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    if (jj_scan_token(IS_ANY_OF)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    if (jj_scan_token(IS_NOT_ANY_OF)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(VALUE_EXPRESSION)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    if (jj_scan_token(IS_ANY_OF)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_scan_token(NATIVE_CONTENT)) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    if (jj_scan_token(IS_NOT_ANY_OF)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public EnglishParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x400,0x400,0x8000,0x4000,0x40090000,0x40090000,0x40080000,0x40090000,0x0,0x80000,0x41080000,0x0,0x400,0x18000400,0x400,0x18000400,0x2000,0x20000,0x8000000,0x18000000,0x82000000,0x0,0x0,0x0,0x0,0x0,0x41000000,0x82000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x140000,0x0,0x0,0x140000,0x0,0x0,0x40000,0x0,0x0,0x100000,0x40080000,0x40080000,0x0,0x40080000,0x40080000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x20,0x20,0x0,0x0,0x220,0x220,0x20,0x20,0x40,0x20,0x20,0x1f800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201047,0x40,0x60000,0x60000,0x180000,0x180000,0x220,0x200007,0x200000,0x200000,0x7,0x200000,0x200000,0x200000,0x10,0x200000,0x200000,0x0,0x200000,0x200000,0x10,0x200000,0x200000,0x10,0x20,0x20,0x200000,0x20,0x20,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public EnglishParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public EnglishParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EnglishParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EnglishParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EnglishParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EnglishParser(EnglishParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(EnglishParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[54];
    for (int i = 0; i < 54; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
