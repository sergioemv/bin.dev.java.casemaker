/* Generated By:JavaCC: Do not edit this line. GermanParserTokenManager.java */
package bi.controller.brparser.german;

public class GermanParserTokenManager implements GermanParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1600000L) != 0L)
         {
            jjmatchedKind = 36;
            return 132;
         }
         if ((active0 & 0xf8a1ffc00L) != 0L)
         {
            jjmatchedKind = 36;
            return 99;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0xf8a1ffc00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 99;
         }
         if ((active0 & 0x1600000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 140;
         }
         return -1;
      case 2:
         if ((active0 & 0xb8a1dbc00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 99;
         }
         if ((active0 & 0x400024000L) != 0L)
            return 99;
         if ((active0 & 0x1600000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 133;
         }
         return -1;
      case 3:
         if ((active0 & 0x9c00L) != 0L)
            return 99;
         if ((active0 & 0xb8a1d2000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return 99;
         }
         if ((active0 & 0x1600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return 134;
         }
         return -1;
      case 4:
         if ((active0 & 0x8012000L) != 0L)
            return 99;
         if ((active0 & 0x302000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return 136;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8801c0800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 4;
            }
            return 99;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return 135;
         }
         if ((active0 & 0x302000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8801c0800L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 99;
         }
         return -1;
      case 6:
         if ((active0 & 0x801c0800L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 99;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x302000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
            return 137;
         }
         return -1;
      case 7:
         if ((active0 & 0x40800L) != 0L)
            return 99;
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x302000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
            return 99;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x302000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x180000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 8;
            }
            return 99;
         }
         return -1;
      case 9:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
            return 99;
         }
         if ((active0 & 0x80000L) != 0L)
            return 99;
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x202000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x202000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 10;
            return 99;
         }
         return -1;
      case 11:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 11;
            return 99;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x202000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000L) != 0L)
            return 99;
         if ((active0 & 0x202000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 30;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 41);
      case 42:
         return jjStopAtPos(0, 50);
      case 43:
         return jjStopAtPos(0, 48);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         return jjStartNfaWithStates_0(0, 49, 1);
      case 46:
         return jjStopAtPos(0, 37);
      case 47:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 60:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 61:
         return jjStopAtPos(0, 43);
      case 62:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x480000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xc0000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1600000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x308010000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2002000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0xc00L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x300001000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x488010c00L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020a0000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x1600000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 99);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 73:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x302083c00L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000L);
      case 84:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x1600000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x1600000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 78:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x308010800L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 82:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 99);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x302000000L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x89080800L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0x800400000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x40800L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x300100000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x8200000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x440000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x82000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x81000000L);
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 99);
         return jjMoveStringLiteralDfa8_0(active0, 0x8200000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000L);
      case 83:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 99);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x81000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x800080000L);
      case 78:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x200200000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 99);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x800400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x800200000L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 83:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 31);
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x200100000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 76:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 35);
         break;
      case 78:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 20, 99);
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 82:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(12, 33);
         break;
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L);
      case 86:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L);
      case 86:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L);
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000L);
      case 78:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(16, 21);
         break;
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000L);
      case 78:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(17, 25);
         break;
      case 86:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000L);
      case 78:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(19, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(21, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 146;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(99);
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 140:
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(99);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(143, 145);
                  else if (curChar == 45)
                     jjCheckNAdd(1);
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(99);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(3);
                  break;
               case 35:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 59:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 83:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 96:
                  jjAddStates(0, 1);
                  break;
               case 100:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               case 102:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 104:
                  jjAddStates(2, 3);
                  break;
               case 122:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 142:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(143, 145);
                  break;
               case 143:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 144:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 133:
               case 99:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(99);
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(99);
                  }
                  else if (curChar == 91)
                     jjCheckNAdd(104);
                  else if (curChar == 123)
                     jjCheckNAdd(96);
                  if (curChar == 73)
                     jjAddStates(4, 5);
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 135:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if (curChar == 78)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 132:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 136:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 138;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 4:
                  if (curChar == 78 && kind > 26)
                     kind = 26;
                  break;
               case 5:
               case 20:
               case 44:
               case 68:
               case 107:
                  if (curChar == 79)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 69:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 123)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 97:
                  if (curChar == 125 && kind > 28)
                     kind = 28;
                  break;
               case 98:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(99);
                  break;
               case 103:
                  if (curChar == 91)
                     jjCheckNAdd(104);
                  break;
               case 104:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 105:
                  if (curChar == 93 && kind > 39)
                     kind = 39;
                  break;
               case 106:
                  if (curChar == 73)
                     jjAddStates(4, 5);
                  break;
               case 108:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 134:
                  if (curChar == 69)
                     jjAddStates(6, 7);
                  break;
               case 137:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               case 138:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 141:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 143:
                  jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 104:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 143:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 146 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   96, 97, 104, 105, 132, 141, 136, 139, 143, 144, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\127\105\116\116", 
"\127\105\116\116\105\116\104\105", "\104\101\116\116", "\123\117\116\123\124", "\125\116\104", 
"\117\104\105\122", "\113\105\111\116\105", "\115\111\124", "\105\122\107\105\102\116\111\123", 
"\105\111\116\107\105\102\117\122\105\116", "\101\116\106\117\122\104\105\122\125\116\107\105\116", 
"\111\123\124\40\111\122\107\105\116\104\105\111\116\40\126\117\116", "\111\123\124\40\113\105\111\116\40\126\117\116", null, 
"\111\123\124\40\105\111\116\40\101\124\124\122\111\102\125\124\40\126\117\116", "\123\111\116\104\40\101\124\124\122\111\102\125\124\105\40\126\117\116", null, 
"\113\105\111\116\105\40\107\105\123\103\110\101\105\106\124\123\101\113\124\111\117\116", null, null, null, "\102\105\123\124\105\110\124\40\101\125\123", 
"\113\101\116\116\40\123\105\111\116", "\113\101\116\116\40\123\105\111\116\40\104\105\122", "\102\105\111", 
"\122\111\123\111\113\117\55\114\105\126\105\114", null, "\56", null, null, "\50", "\51", "\41\75", "\75", "\74", "\76", 
"\74\75", "\76\75", "\53", "\55", "\52", "\57", "\54", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffffc01L, 
};
static final long[] jjtoSkip = {
   0x19eL, 
};
static final long[] jjtoSpecial = {
   0x180L, 
};
static final long[] jjtoMore = {
   0x260L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[146];
static private final int[] jjstateSet = new int[292];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public GermanParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public GermanParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 146; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
