/* Generated By:JavaCC: Do not edit this line. RequirementResultValues.java */
package bi.controller.brparser.requirementsresultparser;

import java.util.Vector;

import model.ExpectedResult;
import model.Requirement;

public class RequirementResultValues implements RequirementResultValuesConstants {
  private static Vector<Requirement> requirements= new Vector<Requirement>();
  private static Vector<ExpectedResult> results= new Vector<ExpectedResult>();

  public Vector<Requirement> getRequirements(){
        if(requirements.size()<=0)
                return null;
        else
         return requirements;
  }

    public Vector<ExpectedResult> getResults(){
        if(results.size()<=0)
                return null;
        else
         return results;
  }

  static final public void start() throws ParseException {
                requirements= new Vector<Requirement>();
                results= new Vector<ExpectedResult>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE:
      requirementValues();
      break;
    case STRING:
      resultValues();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
  }

  static final public void requirementValues() throws ParseException {
 Token t;
    t = jj_consume_token(VALUE);
                String values= t.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                requirements.addElement(new Requirement(values, null));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      requirementValue();
    }
  }

  static final public void requirementValue() throws ParseException {
 Token t;
    jj_consume_token(COMA);
    t = jj_consume_token(VALUE);
                String values= t.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                requirements.addElement(new Requirement(values, null));
  }

  static final public void resultValues() throws ParseException {
 Token t, t1;
    t = jj_consume_token(STRING);
    jj_consume_token(EQUAL);
    t1 = jj_consume_token(VALUE);
                ExpectedResult er=new ExpectedResult();
                er.setName(t.image);
                String values= t1.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                er.setValue(values);
                results.addElement(er);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      resultValue();
    }
  }

  static final public void resultValue() throws ParseException {
 Token t, t1;
    jj_consume_token(COMA);
    t = jj_consume_token(STRING);
    jj_consume_token(EQUAL);
    t1 = jj_consume_token(VALUE);
                ExpectedResult er=new ExpectedResult();
                er.setName(t.image);
                String values= t1.image;
                        values=values.substring(1,values.length()-1);
                        values=values.trim();
                        values=values.replaceAll("[ \t]*\n+[ \t]*","\n");
                er.setValue(values);
                results.addElement(er);
  }

  static private boolean jj_initialized_once = false;
  static public RequirementResultValuesTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x140,0x20,0x20,};
   }

  public RequirementResultValues(java.io.InputStream stream) {
     this(stream, null);
  }
  public RequirementResultValues(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RequirementResultValuesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public RequirementResultValues(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RequirementResultValuesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public RequirementResultValues(RequirementResultValuesTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(RequirementResultValuesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[9];
    for (int i = 0; i < 9; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 9; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
