/* Generated By:JavaCC: Do not edit this line. VisioImportTokenManager.java */
package bi.view.businessrulesviews.brimport.visioparser;

public class VisioImportTokenManager implements VisioImportConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 34;
         if ((active0 & 0x200L) != 0L)
            return 11;
         if ((active0 & 0x10000000L) != 0L)
            return 36;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 34:
         return jjStartNfaWithStates_0(0, 28, 36);
      case 44:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 10);
      case 59:
         return jjStopAtPos(0, 11);
      case 61:
         return jjStopAtPos(0, 21);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x142549080L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x284892100L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x3800000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1004000L);
      case 123:
         return jjStopAtPos(0, 39);
      case 125:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 68:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x142449080L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x284892100L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x280892100L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x142449280L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x280892100L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x142549080L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         break;
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000002000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x140549080L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 84:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x140449080L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200100000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x880200L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80010000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200010080L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x801000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80100000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0xc2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x440000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(8, 9);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(8, 19);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x100010000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40008000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x280000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 76:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(9, 35);
         break;
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000a000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200800000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 24);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x41000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0xa000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x140810000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         return jjMoveStringLiteralDfa12_0(active0, 0xa000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x11000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x180c00000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x100800000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x41a000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0xa000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(13, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x40400000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(13, 23);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(13, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(13, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(14, 20);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0xb000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(15, 13);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(15, 15);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(15, 22);
         break;
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(15, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(17, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  else if (curChar == 34)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 36:
               case 3:
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 69 && kind > 38)
                     kind = 38;
                  break;
               case 6:
               case 13:
                  if (curChar == 86)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 89 && kind > 38)
                     kind = 38;
                  break;
               case 21:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 84 && kind > 38)
                     kind = 38;
                  break;
               case 27:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 36:
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, 
"\102\145\147\151\156\137\120\141\147\145", "\105\156\144\137\120\141\147\145", "\120\141\147\145\137\116\141\155\145", 
"\72", "\73", 
"\102\145\147\151\156\137\111\156\151\164\151\141\154\123\164\141\164\145", "\105\156\144\137\111\156\151\164\151\141\154\123\164\141\164\145", 
"\124\171\160\145", "\102\145\147\151\156\137\106\151\156\141\154\123\164\141\164\145", 
"\105\156\144\137\106\151\156\141\154\123\164\141\164\145", "\111\104", "\102\145\147\151\156\137\123\164\141\164\145", 
"\105\156\144\137\123\164\141\164\145", "\102\165\163\151\156\145\163\163\40\101\143\164\151\157\156", "\75", 
"\102\145\147\151\156\137\124\162\141\156\163\151\164\151\157\156", "\105\156\144\137\124\162\141\156\163\151\164\151\157\156", 
"\124\162\141\156\163\151\164\151\157\156", "\102\145\147\151\156", "\105\156\144", null, "\42", null, 
"\102\145\147\151\156\137\103\157\156\163\164\162\141\151\156\164", "\105\156\144\137\103\157\156\163\164\162\141\151\156\164", 
"\102\145\147\151\156\137\122\145\154\141\164\151\157\156", "\105\156\144\137\122\145\154\141\164\151\157\156", "\123\124\101\124\105", 
"\122\111\123\113\40\114\105\126\105\114", "\122\105\121\125\111\122\105\115\105\116\124\123", 
"\122\105\123\125\114\124", null, "\173", "\175", "\54", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[36];
private final int[] jjstateSet = new int[72];
protected char curChar;
public VisioImportTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VisioImportTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 36; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100001600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 42)
   {
      jjmatchedKind = 42;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
