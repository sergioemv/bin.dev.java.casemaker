package bi.view.actions;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.Action;

import model.CMField;
import model.Dependency;
import model.util.CMModelEvent;

import bi.controller.ElementManager;
import bi.controller.TestCaseManager;
import bi.view.mainframeviews.CMApplication;
import bi.view.utils.CMInformationDetailsDialog;

public abstract class CMAbstractAction extends AbstractAction {

	private List<String> warningMessages; 
	public CMAbstractAction(String string) {
		// TODO Auto-generated constructor stub
		super(string);
	}

	public final void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (actionWillExecute())
			execute();
		actionPostExecute();
	}

	public abstract void execute();

	private void actionPostExecute() {
		//show the warnings generated by this action
	    if (getWarningMessages().size()>0)
			showWarningMessages(getWarningMessages().toArray());
		
	}

	protected boolean actionWillExecute() {
		//if the action is not enabled do not execute
		getWarningMessages().clear();
		if (this instanceof CMEnabledAction)
			return ((CMEnabledAction)this).calculateEnabled();
		return true;
	}

	protected List<String> getWarningMessages() {
		if (warningMessages == null) {
			warningMessages = new ArrayList<String>();
			
		}
		return warningMessages;
	}
	
	private void showWarningMessages(Object[] messages) {
		CMInformationDetailsDialog dlg = new CMInformationDetailsDialog();
		StringBuilder stringBuilder = new StringBuilder();
		for (Object string : messages){
			stringBuilder.append("- ");
			stringBuilder.append(string);
			stringBuilder.append("\n");
			stringBuilder.append("\n");
		}
		dlg.getJTextPaneMessajes().setText(stringBuilder.toString());
		dlg.setTitle((String) getValue(Action.SHORT_DESCRIPTION));
		dlg.setVisible(true);
	}
	public static void updateViews(List<Object>  modifiedObjects) {
		ElementManager.reloadElementViews();
		TestCaseManager.INSTANCE.reloadTestCaseViews();
		Dependency lastModDep = null;

		for (Object ob : modifiedObjects){
			if (ob instanceof Dependency)
				lastModDep =(Dependency) ob;

		}
		if (lastModDep!=null){
			CMModelEvent evt = new CMModelEvent(lastModDep,CMField.COMBINATIONS);
			CMApplication.frame.getPanelDependencyCombiView().getM_CMCombinationViews().handleCMModelChange(evt);
			CMApplication.frame.getPanelDependencyCombiView().getM_CMDependencyElementView().handleCMModelChange(evt);
		}


	}
}
