 /* Generated by Together */

package bi.view.testdataviews;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;

import model.BusinessRules;
import model.CMDefaultValue;
import model.ICMValue;
import model.ITypeData;
import model.Project2;
import model.TestData;
import model.TestDataFormat;
import model.Variable;
import model.Variables;

import org.apache.log4j.Logger;

import bi.controller.CMFormulaCalculator;
import bi.controller.testdata.formula.CMFormulas;
import bi.controller.utils.CMLocalReferenceConvert;
import bi.view.icons.CMIcon;
import bi.view.lang.CMMessages;
import bi.view.mainframeviews.CMApplication;
import bi.view.mainframeviews.CMFrameView;
import bi.view.utils.CMFormatFactory;
import bi.view.utils.JCustomDialog;

//hcanedo_20_10_2004_end
@SuppressWarnings("serial")
public class CMDialogFormulasValues extends JCustomDialog {
  
    private CMFormulaCalculator calculator;
    private Vector dialogsLinkElements= new Vector();
    //HCanedo_23022006_begin
    private HashMap<ITypeData,CMLocalReferenceConvert> localReferenceValues=new HashMap<ITypeData,CMLocalReferenceConvert>();
//  HCanedo_23022006_End
//	public CMDialogFormulasValues(CMFrameView frame, String formula, String Description,
//        CMGridTDStructure grid, TestDataFormat format,boolean p_isEdit) {
//            super(frame);
//            cmframe = CMApplication.frame;
//            cmgrid = grid;
//
//            isEdit = p_isEdit;
//
//            /**  */ 
//
///* Nuevo codigo edición de formulas 18/may/04							  */
//
//            /**  */
//            if (isEdit) {
//            	if(!formula.equalsIgnoreCase("")){
//            		getCalculator().setFormulaEdit(new String(formula));
//            		formula = getCalculator().reFactoryFormula(getFormulaEdit());
//            		Description = findDescription(formula);
//            	}
//            }
//
//            /**  */
//            getCalculator().setFormulaSelected(formula);
//            setDescriptionSelected(Description);
//            try {
//                initGUI();
//                pack();
//            }
//            catch (Exception ex) {
//                ex.printStackTrace();
//            }
//    }
	
	@Override
	public void setVisible(boolean b) {
		try {
			initGUI();
			pack();
		} catch (Exception e) {
			Logger.getLogger(this.getClass()).info(e);
		}

		super.setVisible(b);
	}

	public CMDialogFormulasValues(){
		super(CMApplication.frame);
		cmframe = CMApplication.frame;
		
	}

    public void initGUI() {
        this.setModal(true);
        getContentPane().add(jPanelDialog, java.awt.BorderLayout.CENTER);
        //jPanelValues = getFormulaEnum().getPanel();
        jPanelDialog.setLayout(null);
        jPanelDialog.add(jLabelFormula);
        jPanelDialog.add(jPanelValues);
        jPanelDialog.add(jButtonOK);
        jPanelDialog.add(jButtonCancel);
        jPanelDialog.add(jTextAreaDescription);
        jPanelDialog.setPreferredSize(new java.awt.Dimension(487, 357));
        jLabelFormula.setText(getFormulaSelected());
        jLabelFormula.setBounds(new Rectangle(21, 15, 410, 24));
        jLabelFormula.setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14)); //$NON-NLS-1$
        setTitle(CMMessages.getString("TESTDATA_TITLE_INSERT_VALUE_FORMULA")); //$NON-NLS-1$
        setBounds(new java.awt.Rectangle(0, 0, 491, 380));
        //jPanelValues.setBounds(new java.awt.Rectangle(19, 41, 444, 132));
        //jPanelValues.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),
          //  CMMessages.getString("TESTDATA_INSERT_VALUE_FORMULA"), javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, //$NON-NLS-1$
            //new java.awt.Font("SansSerif", 0, 11), new java.awt.Color(60, 60, 60))); //$NON-NLS-1$
        //jPanelValues.setLayout(null);
        //jPanelValues.add(jTextFieldValue1);
        //jPanelValues.add(jTextFieldValue2);
        //jPanelValues.add(jTextFieldValue3);
        //jPanelValues.add(jLabelValue1);
        //jPanelValues.add(jLabelValue2);
        //jPanelValues.add(jLabelValue3);
//svonborries3112005_begin
        //jPanelValues.add(jButtonParam1);
        //jPanelValues.add(jButtonParam2);
        //jPanelValues.add(jButtonParam3);
//svonborries3112005_end
        jTextFieldValue1.setText(""); //$NON-NLS-1$
        jTextFieldValue1.setBounds(new Rectangle(19, 25, 240, 20));
        jTextFieldValue2.setText(""); //$NON-NLS-1$
        jTextFieldValue2.setBounds(new Rectangle(19, 62, 240, 20));
        jTextFieldValue3.setText(""); //$NON-NLS-1$
        jTextFieldValue3.setBounds(new Rectangle(19, 100, 240, 20));
        jLabelValue1.setText("jLabelValue1"); //$NON-NLS-1$
        jLabelValue1.setBounds(new Rectangle(273, 26, 161, 16));
        jLabelValue2.setText("jLabelValue2"); //$NON-NLS-1$
        jLabelValue2.setBounds(new Rectangle(274, 61, 158, 16));
        jLabelValue3.setText("jLabelValue3"); //$NON-NLS-1$
        jLabelValue3.setBounds(new Rectangle(276, 101, 158, 16));
//      svonborries3112005_begin\

        jButtonParam1.setIcon(CMIcon.TESTDATA_VARIABLE_ASSIGN_FORMAT.getImageIcon());
        jButtonParam2.setIcon(CMIcon.TESTDATA_VARIABLE_ASSIGN_FORMAT.getImageIcon());
        jButtonParam3.setIcon(CMIcon.TESTDATA_VARIABLE_ASSIGN_FORMAT.getImageIcon());
        jButtonParam1.setBounds(new Rectangle(400,20,23,23));
        jButtonParam2.setBounds(new Rectangle(400,57,23,23));
        jButtonParam3.setBounds(new Rectangle(400,95,23,23));
        jButtonParam1.setToolTipText(CMMessages.getString("TESTDATA_LINKBUTTON_TO0LTIPTEXT"));
        jButtonParam2.setToolTipText(CMMessages.getString("TESTDATA_LINKBUTTON_TO0LTIPTEXT"));
        jButtonParam3.setToolTipText(CMMessages.getString("TESTDATA_LINKBUTTON_TO0LTIPTEXT"));
//      svonborries3112005_end
        jButtonOK.setText(CMMessages.getString("BUTTON_OK")); //$NON-NLS-1$
        jButtonOK.setBounds(new Rectangle(299, 319, 73, 27));
        jButtonCancel.setText(CMMessages.getString("BUTTON_CANCEL")); //$NON-NLS-1$
        jButtonCancel.setBounds(new Rectangle(381, 319, 73, 27));
        jTextAreaDescription.setText(getDescriptionSelected());
        jTextAreaDescription.setBounds(new Rectangle(20, 187, 438, 104));
        jTextAreaDescription.setEditable(false);
        jTextAreaDescription.setBackground(this.getBackground());//new java.awt.Color(212, 208, 200));
        jTextAreaDescription.setForeground(this.getForeground());
        jTextAreaDescription.setFont(new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 12)); //$NON-NLS-1$
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setWrapStyleWord(true);
        jButtonOK.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { jButtonOKActionPerformed(e); }
            });
        jButtonCancel.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { jButtonCancelActionPerformed(e); }
            });
//        //svonborries_03112005_begin
//        jButtonParam1.addActionListener(new ActionListener(){
//
//			public void actionPerformed(ActionEvent arg0) {
//				jButtonParam1ActionPerformed(arg0);
//
//			}});
//        jButtonParam2.addActionListener(new ActionListener(){
//
//			public void actionPerformed(ActionEvent arg0) {
//				jButtonParam2ActionPerformed(arg0);
//
//			}});
//        jButtonParam3.addActionListener(new ActionListener(){
//
//			public void actionPerformed(ActionEvent arg0) {
//				jButtonParam3ActionPerformed(arg0);
//
//			}});
//        //svonborries_03112005_end
        restrictionForFormulas();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dlgSize = this.getPreferredSize();
        this.setLocation((screenSize.width - dlgSize.width) / 2, (screenSize.height - dlgSize.height) / 2);
        //hcanedo_21_09_2004_begin
        setResizable(false);
        //hcanedo_21_09_2004_end
        if (isEdit) {
            chargeOldValues(getFormulaEdit());
        }
//hcanedo_07102005_begin
        getRootPane().setDefaultButton(jButtonOK);
//hcanedo_07102005_end
    }

    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            close();
        }
        super.processWindowEvent(e);
    }

    void close() {
        dispose();
    }

    public int cantParam(String formula) {
        return getCalculator().cantParam(formula);
    }

    

 
   
   
   

    /**
     * 
     * 05/10/2006
     * svonborries
     * Modify to the new formula design
     */
    public void restrictionForFormulas() {
    	CMFormulas formula = getFormulaEnum();
        //int x = cantParam(getFormulaSelected());
        //if (formula.getCantParametros() == 0) {
            jTextFieldValue1.setVisible(false);
            jLabelValue1.setVisible(false);
            jButtonParam1.setVisible(false);//svonborries_3112005
            jTextFieldValue2.setVisible(false);
            jLabelValue2.setVisible(false);
            jButtonParam2.setVisible(false);//svonborries_3112005
            jTextFieldValue3.setVisible(false);
            jLabelValue3.setVisible(false);
            jButtonParam3.setVisible(false);//svonborries_3112005
        //}
        //else {
           // if (formula.getCantParametros() == 1) {
                jTextFieldValue1.setVisible(true);
                jLabelValue1.setVisible(true);
                jButtonParam1.setVisible(true);//svonborries_3112005
                jLabelValue1.setText(CMMessages.getString("TESTDATA_FIRST_PARAM")); //$NON-NLS-1$
                jTextFieldValue2.setVisible(false);
                jLabelValue2.setVisible(false);
                jButtonParam2.setVisible(false);//svonborries_3112005
                jTextFieldValue3.setVisible(false);
                jLabelValue3.setVisible(false);
                jButtonParam3.setVisible(false);//svonborries_3112005
            //}
           // else {
                //if (formula.getCantParametros() == 2) {
                    jTextFieldValue1.setVisible(true);
                    jLabelValue1.setVisible(true);
                    jButtonParam1.setVisible(true);//svonborries_3112005
                    jLabelValue1.setText(CMMessages.getString("TESTDATA_FIRST_PARAM")); //$NON-NLS-1$
                    jTextFieldValue2.setVisible(true);
                    jButtonParam2.setVisible(true);//svonborries_3112005
                    jLabelValue2.setVisible(true);
                    jLabelValue2.setText(CMMessages.getString("TESTDATA_SECOND_PARAM")); //$NON-NLS-1$
                    jTextFieldValue3.setVisible(false);
                    jLabelValue3.setVisible(false);
                    jButtonParam3.setVisible(false);//svonborries_3112005
                //}
                //else {
                    //if (formula.getCantParametros() == 3) {
                        jTextFieldValue1.setVisible(true);
                        jLabelValue1.setVisible(true);
                        jButtonParam1.setVisible(true);//svonborries_3112005
                        jLabelValue1.setText(CMMessages.getString("TESTDATA_FIRST_PARAM")); //$NON-NLS-1$
                        jTextFieldValue2.setVisible(true);
                        jLabelValue2.setVisible(true);
                        jLabelValue2.setText(CMMessages.getString("TESTDATA_SECOND_PARAM")); //$NON-NLS-1$
                        jTextFieldValue3.setVisible(true);
                        jLabelValue3.setVisible(true);
                        jButtonParam3.setVisible(true);//svonborries_3112005
                        jButtonParam2.setVisible(true);//svonborries_3112005
                        jLabelValue3.setText(CMMessages.getString("TESTDATA_THIRD_PARAM"));} //$NON-NLS-1$
                    //}
                //}
            //}
       // }
    //}

//    public void armedFormulas() {
//        if (cantParam(getFormulaSelected()) == 0) {
//            if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_C())) {
//                setArmedFormula("C"); //$NON-NLS-1$
//            }
//            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_E())) {
//                setArmedFormula("E"); //$NON-NLS-1$
//            }
//            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_G())) {
//                setArmedFormula("G"); //$NON-NLS-1$
//            }
//            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_PI())) {
//                setArmedFormula("PI"); //$NON-NLS-1$
//            }
//            else {
//                setArmedFormula(getFormulaSelected());
//            }
//        }
//        else {
//            if (cantParam(getFormulaSelected()) == 1) {
//                //  if ((Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_TEXT, nameFormula) >= 0) ||(Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_DATETIME, nameFormula) >= 0)) {
//                    setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1)/* + stringSeparator*/ +
//                        jTextFieldValue1.getText()/*.trim() /*+ stringSeparator*/ + ")"); //$NON-NLS-1$
//            }
//            else if (cantParam(getFormulaSelected()) == 2) {
//                // if ((Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_TEXT, nameFormula) >= 0) ||(Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_DATETIME, nameFormula) >= 0)) {
//                if(!getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_MATH_LOG)){
//                    setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1)/* + stringSeparator*/ +
//                        jTextFieldValue1.getText()/*.trim()/*+ stringSeparator*/ + ";"/* + stringSeparator*/ +
//                        jTextFieldValue2.getText()/*.trim() /* + stringSeparator*/ + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
//                }
//                else{
//                	if( !jTextFieldValue2.getText().trim().equals("")){
//                		setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1)+
//                		jTextFieldValue1.getText() + ";"+
//                		jTextFieldValue2.getText() + ")");
//                	}
//                	else{
//                		setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1)+
//                		jTextFieldValue1.getText() + ";"+
//                		"10" + ")");
//                	}
//                }
//                //}
//                //else
//                  //  armedFormula = getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1)/* + stringSeparator*/ +
//                    //    defaultFormatParam(jTextFieldValue1.getText().trim())/* + stringSeparator*/ + ";"/* + stringSeparator*/ +
//                      //  defaultFormatParam(jTextFieldValue2.getText().trim())/* + stringSeparator*/ + ")"; //$NON-NLS-1$
//                //$NON-NLS-2$ //$NON-NLS-3$
//            }
//            else if (cantParam(getFormulaSelected()) == 3) {
//                //  if ((Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_TEXT, nameFormula) >= 0) ||(Arrays.binarySearch(BusinessRules.FORMULAS_CATEGORY_DATETIME, nameFormula) >= 0)) {
//                    setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1) /* + stringSeparator*/ +
//                        jTextFieldValue1.getText()/*.trim() /* + stringSeparator*/ + ";" /* + stringSeparator*/ +
//                        jTextFieldValue2.getText()/*.trim() /* + stringSeparator*/ + ";" /* + stringSeparator*/ +
//                        jTextFieldValue3.getText()/*.trim() /* + stringSeparator*/ + ")"); //$NON-NLS-1$
//            }
//        }
//    }

    private boolean isAnyFieldEmpty() {
        int cantParam = 0;//getFormulaEnum().getCantParametros();
        if (cantParam == 0) {
            return false;
        }
        else if (cantParam == 1) {
            if (jTextFieldValue1.getText().equals("")) {
                JOptionPane.showMessageDialog(cmframe, CMMessages.getString("FORMULAS_ERROR_FIELDS_EMPTY"),
                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE);
                return true;
            }
            else
                return false;
        }
        else if (cantParam == 2) {
/*        	if(getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_MATH_LOG)){
        		 if (jTextFieldValue1.getText().equals("")){
                     JOptionPane.showMessageDialog(cmframe, CMMessages.getString("FORMULAS_ERROR_FIELDS_EMPTY"),
                             CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE);
                         return true;
                     }
                     else
                         return false;

        	}*/
            if (jTextFieldValue1.getText().equals("") || jTextFieldValue2.getText().equals("")) {
                JOptionPane.showMessageDialog(cmframe, CMMessages.getString("FORMULAS_ERROR_FIELDS_EMPTY"),
                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE);
                return true;
            }
            else
                return false;
        }
        else if (cantParam == 3) {
            if (jTextFieldValue1.getText().equals("") || jTextFieldValue2.getText().equals("") ||
                jTextFieldValue3.getText().equals("")) {
                    JOptionPane.showMessageDialog(cmframe, CMMessages.getString("FORMULAS_ERROR_FIELDS_EMPTY"),
                        CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE);
                    return true;
            }
            else
                return false;
        }
        else {
            return false;
        }
    }

/*    @SuppressWarnings("unchecked")
	private void askForUseTheConstantOrStringValue(){
    	Vector formulas =new Vector(Arrays.asList(BusinessRules.FORMULAS_CATEGORY_TEXT));
    	if(cantParam(getFormulaSelected())>=1 && formulas.contains(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(")))){
    	Vector values =new Vector(Arrays.asList(BusinessRules.FORMULAS_CATEGORY_CONSTANTS));
    	if(values.contains(jTextFieldValue1.getText())||values.contains(jTextFieldValue2.getText())||values.contains(jTextFieldValue3.getText())){
    		int conf=JOptionPane.showConfirmDialog(cmframe, CMMessages.getString("FORMULAS_CHOOSE_CONSTANT_OR_STRING_VALUE"),
                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.YES_NO_OPTION); //$NON-NLS-1$
    		if(conf == JOptionPane.YES_OPTION){
    			getCalculator().setUseStringValue(true);
    		}
    		else{
    			getCalculator().setUseStringValue(false);
    			
    		}
    	}
    	}
    }*/
    public void jButtonOKActionPerformed(ActionEvent e) {
        if (!isAnyFieldEmpty()) {
        	//HCanedo_24022006_begin
/*        	boolean deleteGlobal=false;
        	for (Iterator iter = dialogsLinkElements.iterator(); iter.hasNext();) {
				CMDialogLinkElementStructure cmd = (CMDialogLinkElementStructure) iter.next();
				cmd.referenceValuesAfterFormulasIsSelected(cmd.isLocalSelectedInFormula());
				if(!deleteGlobal){
					deleteGlobal= cmd.isLocalSelectedInFormula();
				}
			}
        	if(deleteGlobal){
        		cmgrid.getSelectedTypeData().setGlobal("");
        	}*/
        	//HCanedo_24022006_end
        	//askForUseTheConstantOrStringValue();
            //armedFormulas();
            //getCalculator().setNotValidNestedFormula(false);
            //setResult(calculeCompexFormula(getArmedFormula()));
            //deleteStringSeparator();
//            if (!getResult().equals(BusinessRules.FORMULAS_ERROR) && !getResult().equals(BusinessRules.FORMULAS_ERROR_DATE) &&
//                !getResult().equals(BusinessRules.FORMULAS_ERROR_STRING) && !getCalculator().isNotValidNestedFormula()) {
//                    if (getCalculator().isAllowedVariable()) {
//                        if (cmgrid != null)
//                        	if(typeDataRefered != null && isRecalculateFormula()/* typeDataRefered.isLinkValue()*/){
//                        		cmgrid.updateTypeDataReferences(getResult(), typeDataRefered);
//                        	}
//                        	else{
//                        		//HCanedo_23022006_begin
//                        		Set keySet=this.localReferenceValues.keySet();
//                        		for (Iterator iter = keySet.iterator(); iter
//										.hasNext();) {
//									ITypeData localTypeData = (ITypeData) iter.next();
//									CMLocalReferenceConvert convert= localReferenceValues.get(localTypeData);
//									convert.setFormat(getFormatFormula());
//									convert.setM_Formatter(getM_formatterSelected());
//									convert.setType(getCalculator().getType());
//									convert.convertAndCalculateLocalReferenceFormulas(getArmedFormula());
//								//HCanedo_23022006_end
//                        		}
//									cmgrid.setFormula(getArmedFormula(), getResult(), getCalculator().getType(), getFormatFormula(), getM_formatterSelected(), null);
//
//                        	}
//                        else {
//                            setInsertFieldFormat(getFormatFormula());
//                            setInsertFieldFormula(getArmedFormula());
//                            setInsertFieldType(getCalculator().getType());
//                            setInsertFieldValue(getResult());
//                        }
//                        close();
//                    }
//                    else {
//                        getCalculator().setAllowedVariable(true);
//                    }
//            }
//            else {
//
//            	if(!isRecalculateFormula()){
//                /*JOptionPane.showMessageDialog(cmframe, CMMessages.getString("FORMULAS_ERROR_DONT_CALCULATE_VALUE"),
//                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE);*/
//            		setResult("");
//            		if (getCalculator().isAllowedVariable()) {
//                        if (cmgrid != null)
//                        	if(typeDataRefered != null && isRecalculateFormula()/* typeDataRefered.isLinkValue()*/){
//                        		cmgrid.updateTypeDataReferences(getResult(), typeDataRefered);
//                        	}
//                        	else{
//                        		//HCanedo_23022006_begin
//                        		Set keySet=this.localReferenceValues.keySet();
//                        		for (Iterator iter = keySet.iterator(); iter
//										.hasNext();) {
//									ITypeData localTypeData = (ITypeData) iter.next();
//									CMLocalReferenceConvert convert= localReferenceValues.get(localTypeData);
//									convert.setFormat(getFormatFormula());
//									convert.setM_Formatter(getM_formatterSelected());
//									convert.setType(getCalculator().getType());
//									convert.convertAndCalculateLocalReferenceFormulas(getArmedFormula());
//								//HCanedo_23022006_end
//                        		}
//									cmgrid.setFormula(getArmedFormula(), getResult(), getCalculator().getType(), getFormatFormula(), getM_formatterSelected(), null);
//
//                        	}
//                        else {
//                            setInsertFieldFormat(getFormatFormula());
//                            setInsertFieldFormula(getArmedFormula());
//                            setInsertFieldType(getCalculator().getType());
//                            setInsertFieldValue(getResult());
//                        }
//                        close();
//                    }
//                    else {
//                    	getCalculator().setAllowedVariable(true);
//                    }
//            	}
//            }
        }
    }

//    private void deleteStringSeparator() {
//        String stringSeparator = Character.toString('\u001E');
//        setArmedFormula(getArmedFormula().replaceAll(stringSeparator, ""));
//    }

//    public void inCaseNotParam() {
//        setResult(getCalculator().calculate(getFormulaSelected()));
//        armedFormulas();
//        if (cmgrid != null)
//            cmgrid.setFormula(getArmedFormula(), getResult(), getCalculator().getType(), getFormatFormula(), getM_formatterSelected(), null);
//        else {
//            setInsertFieldFormat(getFormatFormula());
//            setInsertFieldFormula(getArmedFormula());
//            setInsertFieldType(getCalculator().getType());
//            setInsertFieldValue(getResult());
//        }
//        close();
//    }

    public void jButtonCancelActionPerformed(ActionEvent e) {
        setResult(new CMDefaultValue("")); //$NON-NLS-1$
        setInsertFieldFormat("");
        setInsertFieldFormula("");
        setInsertFieldType("");
        setInsertFieldValue("");
        close();
    }
    //svonborries_10112005_begin
    public JTextComponent executeCaretInJText(JTextComponent p_JText, String p_StringFormula){
    	String l_FullText = p_JText.getText();
    	String l_CaretBeginText;
    	String l_CaretEndText;
    	int l_TextSize = p_JText.getText().length();
    	int l_CaretPosition = p_JText.getCaretPosition();
    	if(l_TextSize > l_CaretPosition){
    		l_CaretBeginText = l_FullText.substring(0,l_CaretPosition);
    		l_CaretEndText = l_FullText.substring(l_CaretPosition);
    		l_FullText = l_CaretBeginText+p_StringFormula;
    		l_CaretPosition = l_FullText.length();
    		l_FullText += l_CaretEndText;
    		p_JText.setText(l_FullText);
    		p_JText.setCaretPosition(l_CaretPosition);
    	}
    	else{
    		l_FullText+=p_StringFormula;
    		l_CaretPosition = l_FullText.length();
    		p_JText.setText(l_FullText);
    		p_JText.setCaretPosition(l_CaretPosition);
    	}
		return p_JText;
    }

    //svonborries_10112005_end
//svonborries_3112005_begin
//    public void jButtonParam1ActionPerformed(ActionEvent arg0) {
//		if(cmframe.isIsPanelTestDataSelected()){
//			CMDialogLinkElementTestData cmd = new CMDialogLinkElementTestData(cmgrid, cmframe);
//			this.setVisible(false);
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue1,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//		}
//		else{
//			CMDialogLinkElementStructure cmd = new CMDialogLinkElementStructure(cmgrid,this.cmframe);
//			this.setVisible(false);
//			//HCanedo_23022006_begin
//			cmd.setLocalReferences(this.localReferenceValues);
//			//Hcanedo_23022006_end
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue1,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//
//		}
//	}
//    public void jButtonParam2ActionPerformed(ActionEvent arg0) {
//    	if(cmframe.isIsPanelTestDataSelected()){
//			CMDialogLinkElementTestData cmd = new CMDialogLinkElementTestData(cmgrid, cmframe);
//			this.setVisible(false);
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue2,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//		}
//		else{
//			CMDialogLinkElementStructure cmd = new CMDialogLinkElementStructure(cmgrid,this.cmframe);
//			this.setVisible(false);
////			HCanedo_23022006_begin
//			cmd.setLocalReferences(this.localReferenceValues);
//			//Hcanedo_23022006_end
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue2,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//		}
//    }
//    public void jButtonParam3ActionPerformed(ActionEvent arg0) {
//    	if(cmframe.isIsPanelTestDataSelected()){
//			CMDialogLinkElementTestData cmd = new CMDialogLinkElementTestData(cmgrid, cmframe);
//			this.setVisible(false);
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue3,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//		}
//		else{
//			CMDialogLinkElementStructure cmd = new CMDialogLinkElementStructure(cmgrid,this.cmframe);
//			this.setVisible(false);
////			HCanedo_23022006_begin
//			cmd.setLocalReferences(this.localReferenceValues);
//			//Hcanedo_23022006_end
//			cmd.setOpenInDialogFormulas(true);
//			cmd.setM_DialogFormulasValue(this);
//			cmd.setTypeDataForInsertField(m_TypeDataForInsertField);
//			cmd.setVisible(true);
//			executeCaretInJText(this.jTextFieldValue3,cmd.getM_StringFormulaField());
//			this.setVisible(true);
//		}
//
//    }
//svonborries_3112005_end
    public ICMValue getResult() {
        return getCalculator().getResult();
    }

    public void setResult(ICMValue result) {
        getCalculator().setResult(result);
    }

    public String getTyp() {
        return getCalculator().getType();
    }

    public void setType(String p_Type) {
        getCalculator().setType(p_Type);
    }

    public String getFormulaSelected() {
        return getCalculator().getFormulaSelected();
    }

    

    public String getDescriptionSelected() {
        return descriptionSelected;
    }

    public void setDescriptionSelected(String descriptionSelected) {
        this.descriptionSelected = descriptionSelected;
    }

 
    /**  */

/* Nuevo codigo edición de formulas 18/may/04							  */

//    public String findDescription(String p_formula) {
//      if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_DATETIME_DATE)){
//                return CMMessages.getString("FORMULAS_CATEGORY_DATETIME_DATE_DESCRIPTION");
//      }
//      else if(p_formula.equals(BusinessRules.FORMULAS_CATEGORY_DATETIME_DATESUM)){
//                return CMMessages.getString("FORMULAS_CATEGORY_DATETIME_DATESUM_DESCRIPTION");
//      }
//      else if ( p_formula.equals(BusinessRules.FORMULAS_CATEGORY_DATETIME_DAYWEEK)){
//                return CMMessages.getString("FORMULAS_CATEGORY_DATETIME_DAYWEEK_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_DATETIME_DIFFDATE)){
//               return CMMessages.getString("FORMULAS_CATEGORY_DATETIME_DIFFDATE_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_DATETIME_SECONDS)){
//                return CMMessages.getString("FORMULAS_CATEGORY_DATETIME_SECONDS_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_ABS)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_ABS_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_CEIL)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_CEIL_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_DIV)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_DIV_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_EXP)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_EXP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_FACT)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_FACT_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_FLOOR)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_FLOOR_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_LN)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_LN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_LOG)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_LOG_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_LOG10)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_LOG10_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_MAX)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_MAX_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_MIN)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_MIN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_POW)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_POW_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_PRODUCT)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_PRODUCT_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_REST)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_REST_DESCRIPTION");
//      }
//     /* else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_RINT)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_RINT_DESCRIPTION");
//      }*/
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_ROMAN)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_ROMAN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_ROUND)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_ROUND_DESCRIPTION");
//	  }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_SQRT)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_SQRT_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_MATH_SUM)){
//               return CMMessages.getString("FORMULAS_CATEGORY_MATH_SUM_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_CONCAT)){
//               return CMMessages.getString("FORMULAS_CATEGORY_TEXT_CONCAT_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_LOWERCASE)){
//               return CMMessages.getString("FORMULAS_CATEGORY_TEXT_LOWERCASE_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_REMPLACE)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_REMPLACE_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_REPEATSTRING)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_REPEATSTRING_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_SUBSTRING)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_SUBSTRING_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_TRIM)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_TRIM_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_TRIMALL)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_TRIMALL_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TEXT_UPPERCASE)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TEXT_UPPERCASE_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ACOS)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ACOS_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ACOSHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ACOSHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ASEN)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ASEN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ASENHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ASENHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ATAN)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ATAN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_ATANHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_ATANHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_COS)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_COS_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_COSHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_COSHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_SEN)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_SEN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_SENHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_SENHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_TAN)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_TAN_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_TANHYP)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_TANHYP_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_TODEGREES)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_TODEGREES_DESCRIPTION");
//      }
//      else if (p_formula.equals(BusinessRules.FORMULAS_CATEGORY_TRIGONOMETRY_TORADIANS)){
//                return CMMessages.getString("FORMULAS_CATEGORY_TRIGONOMETRY_TORADIANS_DESCRIPTION");
//      }
//      else
//        return "";
//    }

    public void chargeOldValues(String p_formulaEdit) {
        int cantparam = cantParam(getFormulaSelected());
        if (cantparam == 1) {
            jTextFieldValue1.setText(getParamForIndexForReBuild(0, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.indexOf("(")
            // + 1, p_formulaEdit.indexOf(")"))); //$NON-NLS-1$ //$NON-NLS-2$
        }
        if (cantparam == 2) {
            jTextFieldValue1.setText(getParamForIndexForReBuild(0, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.indexOf("(")
            // + 1, p_formulaEdit.indexOf(","))); //$NON-NLS-1$ //$NON-NLS-2$
            jTextFieldValue2.setText(getParamForIndexForReBuild(1, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.indexOf(",")
            // + 1, p_formulaEdit.indexOf(")"))); //$NON-NLS-1$ //$NON-NLS-2$
        }
        if (cantparam == 3) {
            jTextFieldValue1.setText(getParamForIndexForReBuild(0, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.indexOf("(")
            // + 1, p_formulaEdit.indexOf(","))); //$NON-NLS-1$ //$NON-NLS-2$
            jTextFieldValue2.setText(getParamForIndexForReBuild(1, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.indexOf(",")
            // + 1, p_formulaEdit.lastIndexOf(","))); //$NON-NLS-1$
            //$NON-NLS-2$
            jTextFieldValue3.setText(getParamForIndexForReBuild(2, p_formulaEdit)); //p_formulaEdit.substring(p_formulaEdit.lastIndexOf(",")
            // + 1, p_formulaEdit.indexOf(")"))); //$NON-NLS-1$
            //$NON-NLS-2$
        }
    }

    /**  */

    /**
     * metodo recursivo para el calculo de formulas anidadas retorna el valor de la formula calculada
     * @param complexFormula formula a ser calculada en forma de String
     * @return String contiene el valor de la formula calculada.
     */
    public ICMValue calculeCompexFormula(String complexFormula) {
    	return getCalculator().calculeCompexFormula(complexFormula);
    }

    @SuppressWarnings("unchecked")
	public String getParamForIndexForReBuild(int index, String p_formula) {
        boolean swDT = true;
        StringBuffer ac = new StringBuffer();
        char cc;
        int p = 0, i = 0;
        int estado = 0;
        String arguments="";
        Vector theArguments = new Vector();
        try{
           arguments = p_formula.substring(p_formula.indexOf("(") + 1, p_formula.lastIndexOf(")"));
        }
        catch(Exception ex)
        {
            getCalculator().setNotValidNestedFormula(true);
            if (theArguments.size() < 4) {
               for (int k = theArguments.size(); k <= 3; k++)
                  theArguments.addElement(Character.toString('\u0015'));
                        }
            return theArguments.elementAt(index).toString();
        }
        while (swDT) { //loop for ever
            if (arguments.length() > i) {
                cc = arguments.charAt(i);
            }
            else {
                cc = '\u0003';
            }
            switch (estado) {
                case 0: {
                        if (Character.isSpaceChar(cc)) {
                            i++;
                            ac.append(cc);
                            estado = 0;
                        }
                        else if (isComa(cc)) {
                            i++;
                            estado = 1;
                        }
                        else if (isOpenBracket(cc)) {
                            i++;
                            ac.append(cc);
                            p++;
                            estado = 2;
                        }
                        else if (isEOF(cc)) {
                            estado = 4;
                        }
                       /* else if (isParamStringSeparator(cc)) {
                            i++;
                            estado = 5;
                        }*/
                        else if (isSlash(cc)) {
                            estado = 6;
                        }
                        else {
                            i++;
                            ac.append(cc);
                            estado = 0;
                        }
                        break;
                    }
                case 1: { //cuando llega una coma
                        theArguments.addElement(ac.toString());
                        ac = new StringBuffer();
                        estado = 0;
                        break;
                    }
                case 2: { //cuando llega un (
                        if (isOpenBracket(cc)) {
                            i++;
                            ac.append(cc);
                            p++;
                            estado = 2;
                        }
                        else if (isCloseBracket(cc)) {
                            i++;
                            ac.append(cc);
                            p--;
                            if (p == 0)
                                estado = 0;
                            else
                                estado = 2;
                        }
                        else if (isEOF(cc)) {
                            //mostrar error
                            estado = 4;
                        }
                        else {
                            i++;
                            ac.append(cc);
                            estado = 2;
                        }
                        break;
                    }
                case 3: { //cuando llega un )
                        break;
                    }
                case 4: { //EOF
                        swDT = false;
                        theArguments.addElement(ac.toString());
                        if (theArguments.size() < 4) {
                            for (int k = theArguments.size(); k <= 3; k++)
                                theArguments.addElement(Character.toString('\u0015'));
                        }
                        ac = new StringBuffer();
                        break;
                    }
                case 5: {
                        if (isParamStringSeparator(cc)) {
                            i++;
                            estado = 0;
                        }
                        else if (isSlash(cc)) {
                            estado = 7;
                        }
                        else {
                            i++;
                            ac.append(cc);
                            estado = 5;
                        }
                        break;
                    }
            	case 6:{
                	if(i+1<arguments.length() && isComa(arguments.charAt(i+1))){
                    	ac.append(cc);
                    	i++;
                        ac.append(arguments.charAt(i));
                        i++;
                        estado=0;
                	}
                	else{
                    	ac.append(cc);
                        i++;
                        estado=0;
                	}
                	break;
            	}
            	case 7:{
                	if(i+1<arguments.length() && isComa(arguments.charAt(i+1))){
                    	ac.append(cc);
                    	i++;
                        ac.append(arguments.charAt(i));
                        i++;
                        estado=5;
                	}
                	else{
                    	ac.append(cc);
                        i++;
                        estado=5;
                	}
                	break;
            	}
            }
        }
        return theArguments.elementAt(index).toString();
    }

    public boolean isOpenBracket(char x) {
        char j = '(';
        return x == j;
    }

    public boolean isCloseBracket(char x) {
        char j = ')';
        return x == j;
    }

    public boolean isComa(char x) {
        char j = ';';
        return x == j;
    }

    private boolean isParamStringSeparator(char x) {
        char j = '\u001E';
        return x == j;
    }

    public boolean isEOF(char x) {
        char j = '\u0003';
        return x == j;
    }

    private boolean isSlash(char x){
        char j='\\';
        return j==x;
    }
    /** Metodo que arma una formula compleja para poder ser calculada */
    public void armedFormulasComplex() {
        if (cantParam(getFormulaSelected()) == 0) {
            if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_C())) {
                setArmedFormula("C"); //$NON-NLS-1$
            }
            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_E())) {
                setArmedFormula("E"); //$NON-NLS-1$
            }
            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_G())) {
                setArmedFormula("G"); //$NON-NLS-1$
            }
            else if (getFormulaSelected().equals(BusinessRules.FORMULAS_CATEGORY_CONSTANTS_PI())) {
                setArmedFormula("PI"); //$NON-NLS-1$
            }
            else {
                setArmedFormula(getFormulaSelected());
            }
        }
        else {
            if (cantParam(getFormulaSelected()) == 1) {
                setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1) + jTextFieldValue1.getText().trim() + ")"); //$NON-NLS-1$
                //$NON-NLS-2$
            }
            else if (cantParam(getFormulaSelected()) == 2) {
                setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1) +
                    jTextFieldValue1.getText().trim() + ";" + jTextFieldValue2.getText().trim() + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            }
            else if (cantParam(getFormulaSelected()) == 3) {
                setArmedFormula(getFormulaSelected().substring(0, getFormulaSelected().indexOf("(") + 1) +
                    jTextFieldValue1.getText().trim() + ";" + jTextFieldValue2.getText().trim() + ";" + jTextFieldValue3.getText().trim() + ")"); //$NON-NLS-1$
                //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
            }
        }
    }

    /**
     * metodo que Formatea un String que contiene numero usando el siguiente patron ###.########################
     * Para el calulo de formulas Anidadas
     * @param String value que son los valores de los parametros de una formula.
     * @return String result que es el String formateado con el patron
     */
    public String defaultFormatParam(String value) {
    	/*TestDataFormat newFormatter= new TestDataFormat();
        newFormatter.setVisualFormatter("###.########################");
        newFormatter.setOriginalFormatter("###.########################");
        newFormatter.setRealFormat("###.########################");
        //setM_formatterSelected(newFormatter);
        //newFormatter.setFormatLocale(new Locale("en","US"));
        TestDataFormat oldFormatter= new TestDataFormat();
        return CMFormatFactory.getInstance().applyAnyFormat(newFormatter, value,oldFormatter);*/
    	char sd='.';
		char sm=',';
    	if(CMFormatFactory.getTestObejctLocale().getCountry().equalsIgnoreCase("DE")){
    		sd=',';
    		sm='.';
    	}
    	value.trim();
        StringBuffer ac = new StringBuffer();
        char cc;
        int i = 0;
        int estado = 0;
        while (true) { //loop for ever
            if (value.length() > i) {
                cc = value.charAt(i);
            }
            else {
                cc = '\u0003';
            }
            switch (estado) {
                case 0: {
                	if (Character.isSpaceChar(cc)) {
                        i++;
                        estado = 0;
                    }
                	else if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 1;
                    }
                	else if (cc=='-') {
                        i++;
                        ac.append(cc);
                        estado = 0;
                    }
                	else
                		estado=11;
                	 break;
                }
                case 1:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 2;
                    }
                	else if(isEOF(cc)){
                		estado=10;
                	}
                	else if(sd==cc){
                		if(sd==',')
                			cc='.';
                		i++;
                        ac.append(cc);
                        estado = 9;
                	}
                	else if(sm==cc){
                		i++;
                        estado = 5;
                	}
                	else
                		estado=11;
                	 break;
                }
                case 2:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 3;
                    }
                	else if(isEOF(cc)){
                		estado=10;
                	}
                	else if(sd==cc){
                		if(sd==',')
                			cc='.';
                		i++;
                        ac.append(cc);
                        estado = 9;
                	}
                	else if(sm==cc){
                		i++;
                        estado = 5;
                	}
                	else
                		estado=11;
                	 break;
                }
                case 3:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 4;
                    }
                	else if(isEOF(cc)){
                		estado=10;
                	}
                	else if(sd==cc){
                		if(sd==',')
                			cc='.';
                		i++;
                        ac.append(cc);
                        estado = 9;
                	}
                	else if(sm==cc){
                		i++;
                        estado = 5;
                	}
                	else
                		estado=11;
                	 break;
                }
                case 4:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 4;
                    }
                	else if(isEOF(cc)){
                		estado=10;
                	}
                	else if(sd==cc){
                		if(sd==',')
                			cc='.';
                		i++;
                        ac.append(cc);
                        estado = 9;
                	}
                	else
                		estado=11;
                	 break;
                }
                case 5:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 6;
                    }
                	else
                		estado=11;
                	 break;
                }
                case 6:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 7;
                    }
                	else
                		estado=11;
                	 break;
                }
                case 7:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 8;
                    }
                	else
                		estado=11;
                	 break;
                }
                case 8:{
                	if(isEOF(cc)){
                		estado=10;
                	}
                	else if(sd==cc){
                		if(sd==',')
                			cc='.';
                		i++;
                        ac.append(cc);
                        estado = 9;
                	}
                	else if(sm==cc){
                		i++;
                        estado = 5;
                	}
                	else
                		estado=11;
                	 break;
                }
                case 9:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 12;
                    }

                	else
                		estado=11;
                	 break;
                }
                case 10:{
                	return ac.toString();
                }
                case 11:{
                	return null;
                }
                case 12:{
                	if (Character.isDigit(cc)) {
                        i++;
                        ac.append(cc);
                        estado = 12;
                    }
                	else if(isEOF(cc)){
                		estado=10;
                	}
                	else
                		estado=11;
                	 break;
                }
            }
        }
    }


    /** Metodo que devuelve el Proyecto Actual */
    //hcanedo_20_10_2004_begin
    public Project2 getActualProject() //metodo modificado
    {
        //return cmframe.getGridTDStructure().getTDStructure().getM_TestObjectReference().getM_Project();
    	return cmframe.getTreeWorkspaceView().getCurrentProject();
    }

    public String getNameTestObject() {
        return cmframe.getGridTDStructure().getTDStructure().getM_TestObject().getName();
    }

    public String getNameWorskspace() {
        return cmframe.getTreeWorkspaceView().getCurrentProjectReference().getM_Workspace().getName();
    }

    public String getNameTestData() {
        return ((TestData)cmgrid.getTDStructure().getTestDataCombination().getM_TestDatas().elementAt(CMIndexTDStructureUpdate.getInstance().getindexTestData())).getName();
    }
    //hcanedo_20_10_2004_end

    public String convertVariableToStandarFormat(String p_VariableValue, TestDataFormat p_FormatVariable){
    	TestDataFormat newDefaultFormat=new TestDataFormat();
    	newDefaultFormat.setRealFormat(p_FormatVariable.getRealFormat());
    	newDefaultFormat.setOriginalFormatter(p_FormatVariable.getOriginalFormatter());
    	return CMFormatFactory.applyAnyFormat(newDefaultFormat,p_VariableValue,p_FormatVariable);
    }
    @SuppressWarnings("unchecked")
	private Vector getVariablesNames(Variables p_Variables){
    	Vector result= new Vector();
    	for(int i =0; i< p_Variables.getVariables().size();i++){
    		result.addElement(((Variable)p_Variables.getVariables().elementAt(i)).getM_Name());
    	}
    	return result;
    }

    private JPanel jPanelDialog = new JPanel();
    private JLabel jLabelFormula = new JLabel();
    private JPanel jPanelValues = new JPanel();
    private JTextField jTextFieldValue1 = new JTextField();
    private JTextField jTextFieldValue2 = new JTextField();
    private JTextField jTextFieldValue3 = new JTextField();
    private JLabel jLabelValue1 = new JLabel();
    private JLabel jLabelValue2 = new JLabel();
    private JLabel jLabelValue3 = new JLabel();
    private JButton jButtonOK = new JButton();
    private JButton jButtonCancel = new JButton();
    private JTextArea jTextAreaDescription = new JTextArea();
    //private String formulaSelected;
    private String descriptionSelected;
    private CMFrameView cmframe;
    private CMGridTDStructure cmgrid;
    private String armedFormula;
    
//svonborries_3112005_begin
    private JButton jButtonParam1 = new JButton();
    private JButton jButtonParam2 = new JButton();
    private JButton jButtonParam3 = new JButton();
//svonborries_3112005_end
    /* Nuevo codigo edición de formulas 18/may/04*/

    private boolean isEdit;

    /* Nuevo codigo edición de formulas 18/may/04*/

    private String insertFieldFormula;
    private String insertFieldValue;
    private String insertFieldFormat;
    private String insertFieldType;
	public TestDataFormat getM_formatterSelected() {
		return getCalculator().getM_formatterSelected();
	}

	public void setM_formatterSelected(TestDataFormat selected) {
		getCalculator().setM_formatterSelected(selected);
	}

	@SuppressWarnings("unchecked")
	protected List getOrder() {
		List focusOrder= new ArrayList();
		if(jTextFieldValue1.isVisible()){
			focusOrder.add(jTextFieldValue1);
			focusOrder.add(this.jButtonParam1);//svonborries_4112005
		}
		if(jTextFieldValue2.isVisible()){
			focusOrder.add(jTextFieldValue2);
			focusOrder.add(this.jButtonParam2);//svonborries_4112005
		}
		if (jTextFieldValue3.isVisible()) {
			focusOrder.add(jTextFieldValue3);
			focusOrder.add(this.jButtonParam3);//svonborries_4112005
		}
		focusOrder.add(jButtonOK);
		focusOrder.add(jButtonCancel);
		return focusOrder;
	}

	protected void PressJButtonCancel(Object object) {
		jButtonCancelActionPerformed(null);

	}

	protected void PressJButtonOk(Object object) {
		jButtonOKActionPerformed(null);

	}

	public void setTypeDataReferences(HashMap subjects) {
		getCalculator().setTypeDataReferences(subjects);

	}

	private ITypeData typeDataRefered;
	/**
	 * @param typeDataRefered The typeDataRefered to set.
	 */
	public void setTypeDataRefered(ITypeData typeDataRefered) {
		this.typeDataRefered = typeDataRefered;
	}
	/**
	 * @return Returns the recalculateFormula.
	 */
	public boolean isRecalculateFormula() {
		return getCalculator().isRecalculateFormula();
	}

	/**
	 * @param recalculateFormula The recalculateFormula to set.
	 */
	public void setRecalculateFormula(boolean recalculateFormula) {
		getCalculator().setRecalculateFormula(recalculateFormula);
	}

	public void setTypeDataForInsertField(ITypeData typeDataInsertField) {
		m_TypeDataForInsertField=typeDataInsertField;
	}
	private ITypeData m_TypeDataForInsertField;
	private CMFormulas formulaEnum;
//	HCanedo_23022006_begin
	/**
	 * @return Returns the localReferenceValues.
	 */
	public HashMap<ITypeData, CMLocalReferenceConvert> getLocalReferenceValues() {
		return localReferenceValues;
	}

	/**
	 * @param localReferenceValues The localReferenceValues to set.
	 */
	public void setLocalReferenceValues(
			HashMap<ITypeData, CMLocalReferenceConvert> localReferenceValues) {
		this.localReferenceValues = localReferenceValues;
	}
	@SuppressWarnings("unchecked")
	public void addDialogLinkElementToCalculeFormula(CMDialogLinkElementStructure structure) {
		dialogsLinkElements.addElement(structure);

	}
//	HCanedo_23022006_end

	public String getFormulaEdit() {
		return getCalculator().getFormulaEdit();
	}

	

	public String getInsertFieldFormula() {
		return insertFieldFormula;
	}

	public void setInsertFieldFormula(String insertFieldFormula) {
		this.insertFieldFormula = insertFieldFormula;
	}

	public String getInsertFieldValue() {
		return insertFieldValue;
	}

	public void setInsertFieldValue(String insertFieldValue) {
		this.insertFieldValue = insertFieldValue;
	}

	public String getInsertFieldFormat() {
		return insertFieldFormat;
	}

	public void setInsertFieldFormat(String insertFieldFormat) {
		this.insertFieldFormat = insertFieldFormat;
	}

	public String getInsertFieldType() {
		return insertFieldType;
	}

	public void setInsertFieldType(String insertFieldType) {
		this.insertFieldType = insertFieldType;
	}

	public String getFormatFormula() {
		return getCalculator().getFormatFormula();
	}

	public String getArmedFormula() {
		return armedFormula;
	}

	public void setArmedFormula(String armedFormula) {
		this.armedFormula = armedFormula;
	}

	private CMFormulaCalculator getCalculator() {
		if (calculator == null)
			calculator = new CMFormulaCalculator(cmgrid);
		return calculator;
	}

	public void setFormulaEnum(CMFormulas selectedValue) {
		formulaEnum = selectedValue;
	}

	public CMFormulas getFormulaEnum() {
		return formulaEnum;
	}

}
