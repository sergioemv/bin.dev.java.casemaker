/* Generated by Together */

package bi.view.testdataviews;

import java.awt.Color;
import java.awt.Component;
import java.awt.Event;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JViewport;

import model.Structure;
import model.StructureTestData;
import model.TestCase;
import model.TestData;
import model.TestDataCombinations;
import bi.view.actions.CMAction;
import bi.view.cells.CMTestDataCombinationCellDescription;
import bi.view.cells.CMTestDataCombinationCellName;
import bi.view.cells.CMTestDataCombinationCellRiskLevel;
import bi.view.cells.CMTestDataCombinationCellSet;
import bi.view.cells.CMTestDataCombinationCellTestCase;
import bi.view.cells.CMTestDataCombinationGroup;
import bi.view.grids.CMBaseJSmartGrid;
import bi.view.mainframeviews.CMFrameView;

import com.eliad.model.GenericGridModel;
import com.eliad.model.GridContext;
import com.eliad.model.defaults.DefaultGridCellRenderer;
import com.eliad.model.defaults.DefaultStyleModel;
import com.eliad.swing.GridEvent;
import com.eliad.util.RulerConstants;

public class CMTestDataCombinationView extends CMBaseJSmartGrid {
    CMFrameView m_Frame;
    private CMGridModel m_CMGridModel;
    private CMStyleModel m_CMStyleModel;
    private TestDataCombinations m_TestDataCombinations;
    private int selectedColumn;
    private int selectedRow;

    public CMTestDataCombinationView(CMFrameView frame) {
        m_Frame = frame;
        initGUI();
    }

    public JViewport getViewport1() {
        return getViewport(); // getViewport is not public in JSmartGrid
    }

    public void setGlobalStructure(StructureTestData p_StructureTestData) {
        TestData testdata = (TestData)(m_TestDataCombinations.getM_TestDatas().elementAt(CMIndexTDStructureUpdate.getInstance().getindexTestData()));
        testdata.getM_TDStructure().getM_StructureTestData().addElement(p_StructureTestData);
    }

    public void initGUI() {
        //Hcanedo_13_09_2004_Begin
        m_CMGridModel = new CMGridModel(0, 5);
        //Hcanedo_13_09_2004_End
        m_CMStyleModel = new CMStyleModel();
        setModels();
        setUIProperties();
        addEventListeners();
    }

    public void addEventListeners() {
        addGridListener(
            new com.eliad.swing.GridAdapter() {
                public void gridFocusGained(GridEvent e) { thisGridFocusGained(e); }
                public void gridMouseClicked(GridEvent e) {
                    eventGridMouseClicked(e);
                }
            });
    }

    void eventGridMouseClicked(GridEvent e) {
        //hcanedo_21_09_2004_begin
        m_Frame.eventMouseClicked(null);
        //hcanedo_21_09_2004_end
        MouseEvent mouseEvent = (MouseEvent)e.getSourceEvent();
        int row = e.getRow();
        selectedRow=row;
        int column = e.getColumn();
        selectedColumn=column;
        if (m_Frame.isIsPanelResultComparationSelected()) {
            if (m_TestDataCombinations.isM_swTargetActual()) {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataTarget(row);
                CMIndexTDStructureUpdate.getInstance().setindexTarget(0);
                m_Frame.getPanelResultComparation().updateTestDataTarget();
            }
            else {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataActual(row);
                CMIndexTDStructureUpdate.getInstance().setindexActual(0);
                m_Frame.getPanelResultComparation().updateTestDataActual();
            }
            // m_Frame.getPanelResultComparation().update();
        }
        else {
            m_Frame.setStatesMenusTestData(false);
            if (row >= 0 && column >= 0) {
                m_Frame.statesMenusTestDataEditDeleteAssign(true);
            }
            else {
                m_Frame.statesMenusTestDataEditDeleteAssign(false);
            }
            //hcanedo_21_09_2004_begin

 /*  	if( mouseEvent.getClickCount() == 2)
    	{

     		// this.edit();
    	}
    	else
    	{*/

            //hcanedo_21_09_2004_end
            if (e.getSourceEvent().getModifiers() == Event.META_MASK) {
                if (row >= 0 && column >= 0) {
                    if (m_Frame.isIsPanelTestDataSelected())
                        m_Frame.getJPopupMenuTestData().show(this, mouseEvent.getX(), mouseEvent.getY());
                }
            }
            else {
                if (row >= 0 && column >= 0) {
                    this.changeSelection(row, column, false, false);
                    ///ver que hay que hacer
                    CMIndexTDStructureUpdate.getInstance().setindex(0);
                    CMIndexTDStructureUpdate.getInstance().setindexTestData(row);
                    m_Frame.getPanelTestDataView().update2();
                }
            }
            //hcanedo_21_09_2004_begin
            if (mouseEvent.getClickCount() == 2) {
                if (m_Frame.isIsPanelTestDataSelected()) {
                    CMAction.TESTDATA_EDIT_TESTDATA.getAction().actionPerformed(null);//svonborries_11042006
                }
                // this.edit();
            }
            //	}
            //hcanedo_21_09_2004_end
        }
    }

    public void setModels() {
        this.setStyleModel(m_CMStyleModel);
        this.setModel(m_CMGridModel);
    }

    public void setUIProperties() {
        this.setOpaque(false);
        this.setColumnResizable(true);
        this.setAutoResizeMode(RulerConstants.HORIZONTAL);
        this.setGridColor(new Color(127, 157, 185));
        this.setSelectionCellBorder(BorderFactory.createLineBorder(Color.orange, 2));
        this.setFocusHighlightBorder(BorderFactory.createLineBorder(Color.orange, 2));
        this.setSelectionBackgroundColor(Color.orange);
        this.setSelectionForegroundColor(Color.black);
        this.setSelectionUnit(com.eliad.swing.JSmartGrid.UNIT_ROW);
        this.setSelectionPolicy(com.eliad.swing.JSmartGrid.POLICY_SINGLE);
    }

  /*  private void revalidateMenusAfterAnyAction() {
        try {
            m_Frame.statesMenusTestDataEditDeleteAssign(false);
            if (selectedRow >= 1 && selectedColumn >= 1) {
                m_Frame.statesMenusTestDataEditDeleteAssign(true);
            }
        }
        catch (Exception ex) {
            m_Frame.statesMenusTestDataEditDeleteAssign(false);
        }
    }
*/
    private String deleteStateNameTestCase(String nameTestCaseAndState) {
        String name = nameTestCaseAndState.substring(0, nameTestCaseAndState.length() - 1);
        return name;
    }

    private void validateChangeInTestCase(TestData p_TestData) {
        String nameTestCaseAndState = p_TestData.getM_TestCaseinTestData();
        if (nameTestCaseAndState != null && !nameTestCaseAndState.trim().equals("")) {
            String name = deleteStateNameTestCase(nameTestCaseAndState);
            Structure m_Structure = m_Frame.getTreeWorkspaceView().getCurrentTestObject().getStructure();
            for (int i = 0; i < m_Structure.getLnkTestCases().size(); i++) {
                TestCase testCase = (TestCase)m_Structure.getLnkTestCases().elementAt(i);
                if (testCase.getName().equalsIgnoreCase(name)) {
                    p_TestData.setM_TestCaseinTestData(new String(testCase.getName()) + new String(testCase.getStateName()));
                    p_TestData.setM_RiskLevel(testCase.getRiskLevel());
                    return;
                }
            }
            p_TestData.setM_TestCaseinTestData("");
            p_TestData.setM_RiskLevel(0);
            return;
        }
    }

    public CMTestDataCombinationGroup createCMTestDataCombinationGroup(TestData p_TestData) {
        validateChangeInTestCase(p_TestData);
        CMTestDataCombinationGroup testDataCombinationGroup = new CMTestDataCombinationGroup(p_TestData);
        CMTestDataCombinationCellName cellName = new CMTestDataCombinationCellName();
        cellName.setM_CMTestDataCombinationGroup(testDataCombinationGroup);
        CMTestDataCombinationCellTestCase cellTestCase = new CMTestDataCombinationCellTestCase();
        cellTestCase.setM_CMTestDataCombinationGroup(testDataCombinationGroup);
        //Hcanedo_13_09_2004_Begin
        CMTestDataCombinationCellRiskLevel cellRiskLevel = new CMTestDataCombinationCellRiskLevel();
        cellRiskLevel.setM_CMTestDataCombinationGroup(testDataCombinationGroup);
        //Hcanedo_13_09_2004_End
        CMTestDataCombinationCellSet cellSet = new CMTestDataCombinationCellSet();
        cellSet.setM_CMTestDataCombinationGroup(testDataCombinationGroup);
        CMTestDataCombinationCellDescription cellDescription = new CMTestDataCombinationCellDescription();
        cellDescription.setM_CMTestDataCombinationGroup(testDataCombinationGroup);
        testDataCombinationGroup.setM_CMTestDataCombinationCellDescription(cellDescription);
        testDataCombinationGroup.setM_CMTestDataCombinationCellName(cellName);
        //Hcanedo_13_09_2004_Begin
        testDataCombinationGroup.setM_CMTestDataCombinationCellRiskLevel(cellRiskLevel);
        //Hcanedo_13_09_2004_End
        testDataCombinationGroup.setM_CMTestDataCombinationCellSet(cellSet);
        testDataCombinationGroup.setM_CMTestDataCombinationCellTestCase(cellTestCase);
        testDataCombinationGroup.addElement(cellName);
        testDataCombinationGroup.addElement(cellTestCase);
        //Hcanedo_13_09_2004_Begin
        testDataCombinationGroup.addElement(cellRiskLevel);
        //Hcanedo_13_09_2004_End
        testDataCombinationGroup.addElement(cellSet);
        testDataCombinationGroup.addElement(cellDescription);
        return testDataCombinationGroup;
    }

    public void selectCMTestDataView(int p_index) {
        if (p_index >= 0 && this.getRowCount() > 0) {
            this.changeSelection(p_index, 0, false, false);
        }
    }

    public void addCMTestDataCombinationView(CMTestDataCombinationGroup p_CMTestDataCombinationGroup) {
        this.m_CMGridModel.addRow(p_CMTestDataCombinationGroup);
        int newSelectionIndex = CMIndexTDStructureUpdate.getInstance().getindexTestData(); //this.getRowCount()-1;
        selectCMTestDataView(newSelectionIndex);
    }

    public void addCMTestDataCombinationViews(Vector p_TestDataCombinations) {
        int numTestData = p_TestDataCombinations.size();
        for (int i = 0; i < numTestData; i++) {
            TestData testData = (TestData)p_TestDataCombinations.elementAt(i);
            addCMTestDataCombinationView(createCMTestDataCombinationGroup(testData));
        }
    }

    void deleteAllViews() {
        int numOfRows = m_CMGridModel.getRowCount();
        m_CMGridModel.removeRows(0, numOfRows);
    }

    public void update() {
        deleteAllViews();
        addCMTestDataCombinationViews(m_TestDataCombinations.getM_TestDatas());
        int newSelectionIndex = CMIndexTDStructureUpdate.getInstance().getindexTestData(); //this.getRowCount()-1;
        selectCMTestDataView(newSelectionIndex);
        //revalidateMenusAfterAnyAction();
    }

    public void update(int p_selectedindex) {
        deleteAllViews();
        addCMTestDataCombinationViews(m_TestDataCombinations.getM_TestDatas());
        selectCMTestDataView(p_selectedindex);
     //   revalidateMenusAfterAnyAction();
    }

    public TestDataCombinations getM_TestDataCombinations() {
        return m_TestDataCombinations;
    }

    public void setM_TestDataCombinations(TestDataCombinations m_TestDataCombinations) {
        this.m_TestDataCombinations = m_TestDataCombinations;
    }

    public void thisGridFocusGained(GridEvent e) {
        //hcanedo_21_09_2004_begin
        m_Frame.eventMouseClicked(null);
        //hcanedo_21_09_2004_end
        int row = e.getRow();
        int column = e.getColumn();
        selectedRow=row;
        selectedColumn=column;
        if (m_Frame.isIsPanelResultComparationSelected()) {
            if (m_TestDataCombinations.isM_swTargetActual()) {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataTarget(row);
                CMIndexTDStructureUpdate.getInstance().setindexTarget(0);
                m_Frame.getPanelResultComparation().updateTestDataTarget();
            }
            else {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataActual(row);
                CMIndexTDStructureUpdate.getInstance().setindexActual(0);
                m_Frame.getPanelResultComparation().updateTestDataActual();
            }
        }
        else {
            m_Frame.setStatesMenusTestData(false);
            if (row >= 0 && column >= 0) {
                m_Frame.statesMenusTestDataEditDeleteAssign(true);
            }
            else {
                m_Frame.statesMenusTestDataEditDeleteAssign(false);
            }
            if (row >= 0 && column >= 0) {
                this.changeSelection(row, column, false, false);
                ///ver que hay que hacer
                CMIndexTDStructureUpdate.getInstance().setindex(0);
                CMIndexTDStructureUpdate.getInstance().setindexTestData(row);
                m_Frame.getPanelTestDataView().update2();
            }
        }
    }

    //////////////////////////////CMGRidModel////////////////////////////////////////
    public class CMGridModel extends GenericGridModel {
        public CMGridModel(int numRows, int numColumns) {
            super(numRows, numColumns);
        }

        public boolean isCellEditable(int row, int column) {
            return false;
        }

        public Object getCellObjectAt(int row, int column) {
            if (row >= 0 && column >= 0) {
                return super.getValueAt(row, column);
            }
            else {
                return null;
            }
        }

        public Object getValueAt(int row, int column) {
            Object obj = null;
            if (row >= 0 && column >= 0) {
                obj = super.getValueAt(row, column);
            }
            else {
                return null;
            }
            if (obj == null) {
                return null;
            }
            if (obj instanceof CMTestDataCombinationCellName) {
                CMTestDataCombinationCellName nameView = (CMTestDataCombinationCellName)obj;
                if (nameView != null) {
                    return (nameView.getM_CMTestDataCombinationGroup().getM_TestData()).getName();
                }
                else {
                    return null;
                }
            }
            else if (obj instanceof CMTestDataCombinationCellDescription) {
                CMTestDataCombinationCellDescription descriptionView = (CMTestDataCombinationCellDescription)obj;
                return (descriptionView.getM_CMTestDataCombinationGroup().getM_TestData()).getDescription();
            }
            else if (obj instanceof CMTestDataCombinationCellSet) {
                CMTestDataCombinationCellSet setView = (CMTestDataCombinationCellSet)obj;
                if ((setView.getM_CMTestDataCombinationGroup().getM_TestData()).isSet())
                    return "*"; //$NON-NLS-1$
                else
                    return ""; //$NON-NLS-1$
            }
            else if (obj instanceof CMTestDataCombinationCellTestCase) {
                CMTestDataCombinationCellTestCase testCaseView = (CMTestDataCombinationCellTestCase)obj;
                return (testCaseView.getM_CMTestDataCombinationGroup().getM_TestData().getM_TestCaseinTestData());
            }
            //grueda19092004_begin
            else if (obj instanceof CMTestDataCombinationCellRiskLevel) {
                CMTestDataCombinationCellRiskLevel riskLevelView = (CMTestDataCombinationCellRiskLevel)obj;
                int riskLevel = riskLevelView.getM_CMTestDataCombinationGroup().getM_TestData().getM_RiskLevel();
                //hcanedo_21_09_2004_begin
                return Integer.toString(riskLevel); //linea moficada
                //hcanedo_21_09_2004_end
            }
            //grueda19092004_begin
            else {
                return null;
            }
        }
    }


    /////////////////////////////Style Model /////////////////////////////////////
    public class CMStyleModel extends DefaultStyleModel {
        public CMStyleModel() {
            this.setRenderer(String.class, new CMCellRendererDependencies());
        }

        public class CMCellRendererDependencies extends DefaultGridCellRenderer {
            public CMCellRendererDependencies() {
            }

            public Component getComponent(Object value, boolean isSelected, boolean hasFocus, boolean isEditable, int row,
                int column, GridContext context) {
                    Component c = super.getComponent(value, isSelected, hasFocus, isEditable, row, column, context);
                    this.setHorizontalAlignment(JLabel.LEFT);
                    if (!isSelected) {
                        this.setBackground(new Color(235, 235, 228));
                    }
                    return c;
            }
        }
    }


	@Override
	protected HashMap<Class, Component> getCellClasses() {
		// TODO Auto-generated method stub
		return null;
	}
}
