/* Generated by Together */

package bi.view.testdataviews;

import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import model.BusinessRules;
import model.CMDefaultValue;
import model.ICMValue;
import model.Project2;
import model.TDStructure;
import model.TestDataFormat;
import model.Variable;
import model.Variables;
import bi.view.icons.CMIcon;
import bi.view.lang.CMMessages;
import bi.view.mainframeviews.CMFrameView;
import bi.view.utils.CMBaseJComboBox;
import bi.view.utils.CMBaseJPanel;
import bi.view.utils.CMFormatFactory;
import bi.view.utils.CMJEditorPaneFocusChangeable;

public class CMVariables extends CMBaseJPanel {
    
	
	public CMVariables(CMFrameView p_Frame) {
        m_Frame = p_Frame;
        initGUI();
    }

    public void initGUI() {
        setLayout(null);
        setVerifyInputWhenFocusTarget(true);
        setBounds(new java.awt.Rectangle(0, 0, 614, 478));
        add(jScrollPaneListVariables);
        add(jLabelListVariables);
        add(jPanelViewVariables);
        jScrollPaneListVariables.setBounds(new java.awt.Rectangle(18, 38, 183, 384));
        jScrollPaneListVariables.getViewport().add(jListVariables);
        jListVariables.setBounds(new java.awt.Rectangle(82, 115, 32, 32));
        jListVariables.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLabelListVariables.setText(CMMessages.getString("TESTDATA_AVAILABLES_VARIABLES_PROJECT")); //$NON-NLS-1$
        jLabelListVariables.setBounds(new java.awt.Rectangle(24, 16, 175, 16));
        jLabelListVariables.setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 12)); //$NON-NLS-1$
        jPanelViewVariables.setBounds(new java.awt.Rectangle(212, 37, 384, 384));
        jPanelViewVariables.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelViewVariables.setLayout(null);
        jPanelViewVariables.add(jTextFieldName);
        jPanelViewVariables.add(jTextFieldValue);
        jPanelViewVariables.add(jLabelName);
        jPanelViewVariables.add(jLabelValue);
        jPanelViewVariables.add(jScrollPaneDescriptionVariables);
        jPanelViewVariables.add(jButtonSave);
        jPanelViewVariables.add(jComboBox1);
        jPanelViewVariables.add(jLabelType);
        jPanelViewVariables.add(jButtonCancel);
        jPanelViewVariables.add(jLabelFormat);
        jPanelViewVariables.add(jTextFieldFormat);
        jPanelViewVariables.add(jButtonAssignFormat);
        jTextFieldName.setText(""); //$NON-NLS-1$
        jTextFieldName.setBounds(new java.awt.Rectangle(113, 18, 239, 20));
        jTextFieldName.setEditable(false);
        jTextFieldValue.setText(""); //$NON-NLS-1$
        jTextFieldValue.setBounds(new java.awt.Rectangle(112, 47, 239, 20));
        jTextFieldValue.setEditable(false);
        jLabelName.setText(CMMessages.getString("TESTDATA_NAME")); //$NON-NLS-1$
        jLabelName.setBounds(new java.awt.Rectangle(63, 20, 34, 16));
        jLabelValue.setText(CMMessages.getString("TESTDATA_VALUE")); //$NON-NLS-1$
        jLabelValue.setBounds(new java.awt.Rectangle(61, 50, 34, 17));
        jScrollPaneDescriptionVariables.setBounds(new java.awt.Rectangle(39, 138, 325, 185));
        jScrollPaneDescriptionVariables.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(
            new java.awt.Color(153, 153, 153), 1), CMMessages.getString("TESTDATA_DESCRIPTION_VARIABLE"),
            javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, //$NON-NLS-1$
            new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(60, 60, 60))); //$NON-NLS-1$
        jTextAreaDescription.setText(""); //$NON-NLS-1$
        jTextAreaDescription.setBounds(new java.awt.Rectangle(54, 17, 53, 16));
        jTextAreaDescription.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      //  jTextAreaDescription.setWrapStyleWord(true);
       // jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setEditable(false);
        colorEditableDescription(false);
        jScrollPaneDescriptionVariables.getViewport().add(jTextAreaDescription);
        
        jButtonSave.setText(CMMessages.getString("TESTDATA_SAVE")); //$NON-NLS-1$
        jButtonSave.setVisible(false);
        jButtonSave.setBounds(new java.awt.Rectangle(108, 328, 100, 27));
        jButtonSave.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { jButtonSaveActionPerformed(e); }
            });
        jComboBox1.setBounds(new java.awt.Rectangle(113, 74, 240, 25));
        jLabelType.setText(CMMessages.getString("TESTDATA_TYPE")); //$NON-NLS-1$
        jLabelType.setBounds(new java.awt.Rectangle(61, 80, 34, 16));
        jComboBox1.setEnabled(false);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_BINARY);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_BIT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_BOOLEAN);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_CHAR);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_DATETIME);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_DECIMAL);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_FLOAT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_INT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_MONEY);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_NCHAR);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_NTEXT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_NUMERIC);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_NVARCHAR);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_REAL);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_SMALLDATETIME);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_SMALLINT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_SMALLMONEY);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_TEXT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_TIMESTAMP);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_TINYINT);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_VARBINARY);
        jComboBox1.addItem(BusinessRules.TESTDATA_STATE_VARCHAR);
		jButtonAssignFormat.setPreferredSize(new java.awt.Dimension(23,23));
        jButtonAssignFormat.setIcon(CMIcon.TESTDATA_VARIABLE_ASSIGN_FORMAT.getImageIcon());
        jButtonAssignFormat.setToolTipText(CMMessages.getString("TESTDATA_CONTEXMENU_FORMAT")); //$NON-NLS-1$
		jButtonAssignFormat.setEnabled(false);
        jButtonAssignFormat.setBounds(new java.awt.Rectangle(333, 107, 23, 23));
        jListVariables.addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) { jListVariablesValueChanged(e); }
            });
        //   jButtonAsignTestData.setVisible(false);
        jButtonCancel.setText(CMMessages.getString("BUTTON_CANCEL")); //$NON-NLS-1$
        jButtonCancel.setBounds(new java.awt.Rectangle(224, 327, 100, 27));
        jButtonCancel.setVisible(false);
        jButtonCancel.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { jButtonCancelActionPerformed(e); }
            });
        jLabelFormat.setText(CMMessages.getString("TESTDATA_FORMAT")); //$NON-NLS-1$
        jLabelFormat.setBounds(new java.awt.Rectangle(61, 111, 34, 16));
        jTextFieldFormat.setText(""); //$NON-NLS-1$
        jTextFieldFormat.setBounds(new java.awt.Rectangle(112, 108, 219, 20));
        jTextFieldFormat.setEditable(false);
        jTextFieldFormat.addMouseListener(
            new MouseAdapter() {
                public void mouseClicked(MouseEvent e) { jTextFieldFormatMouseClicked(e); }
            });

        jButtonAssignFormat.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent e){jButtonAssignFormatActionPerformed(e);}});
        jTextFieldValue.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent e){jTextFieldValueActionPerformed(e);}});
        jTextFieldValue.addFocusListener(
        new FocusAdapter() {
            //public void focusGained(FocusEvent e) { jTextFieldValueFocusGained(e); }
            public void focusLost(FocusEvent e) { jTextFieldValueFocusLost(e); }
        });
        jTextFieldValue.addKeyListener(new java.awt.event.KeyAdapter() {
			

			public void keyReleased(java.awt.event.KeyEvent e) {
				//set the value of the parameter
				if((e.getKeyCode() != KeyEvent.VK_LEFT)&&(e.getKeyCode() != KeyEvent.VK_RIGHT)&&(e.getKeyCode() != KeyEvent.VK_UP) && (e.getKeyCode() != KeyEvent.VK_DOWN)){
					isChanged = true;
					//System.out.println("Entro al keyrealeased");
				}
				
			}
		});
        
        createRootPane();
    }

    public void colorEditableDescription(boolean b) {
        if (b) {
            jTextAreaDescription.setBackground(new java.awt.Color(255, 255, 255));
        }
        else {
            jTextAreaDescription.setBackground(new java.awt.Color(212, 208, 200));
        }
    }

    public void colorEditableFormat(boolean b) {
        if (b) {
            jTextFieldFormat.setBackground(new java.awt.Color(255, 255, 255));
        }
        else {
            jTextFieldFormat.setBackground(new java.awt.Color(212, 208, 200));
        }
    }

    protected void createRootPane()
    {
       //JRootPane pane = this;
  
       this.getInputMap( JComponent.WHEN_IN_FOCUSED_WINDOW ).
          put( KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0 ), "escPressed" );
  
       this.getActionMap().put( "escPressed",
          new AbstractAction( "escPressed" )
          {
             public void actionPerformed( ActionEvent actionEvent )
             {
            	 if(jButtonCancel.isVisible() && jButtonCancel.isEnabled())
            		 jButtonCancelActionPerformed(null);
             }
          }
       );
  
       this.getInputMap( JComponent.WHEN_IN_FOCUSED_WINDOW ).
    put( KeyStroke.getKeyStroke( KeyEvent.VK_ENTER, 0 ), "enterPressed" );

       this.getActionMap().put( "enterPressed",
       new AbstractAction( "enterPressed" )
       {
          public void actionPerformed( ActionEvent actionEvent )
          {
        	  if(jButtonSave.isVisible() && jButtonSave.isEnabled())
        		  jButtonSaveActionPerformed(null);
          }

		
       }
    );
    }
    public void editActionPerformed() {

        
        this.jButtonSave.setVisible(true);
        jButtonCancel.setVisible(true);
        jTextFieldName.setEditable(true);
        jListVariables.transferFocus();
        jTextFieldName.requestFocus();
        jListVariables.setEnabled(false);
        jTextFieldValue.setEditable(true);
        jTextFieldFormat.setEditable(false);
        colorEditableFormat(true);
        jTextAreaDescription.setEditable(true);
        colorEditableDescription(true);
        jComboBox1.setEnabled(true);
        jButtonAssignFormat.setEnabled(true);
        swTextFieldFormat = true;
        m_Frame.statesMenusVariablesCreate(false);
        m_Frame.statesMenusVariablesEditDelete(false);
        itemSelected = jListVariables.getSelectedIndex();
    }

    public void newActionPerformed() {
        
        jButtonSave.setVisible(true);
        jButtonCancel.setVisible(true);
        jTextFieldName.setEditable(true);
        jTextFieldName.setText(""); //$NON-NLS-1$
        jListVariables.transferFocus();
        jTextFieldName.requestFocus();
        jListVariables.setEnabled(false);
        jTextFieldValue.setEditable(true);
        jTextFieldValue.setText(""); //$NON-NLS-1$
        jTextFieldFormat.setEditable(true);
        jTextFieldFormat.setText(BusinessRules.FORMULAS_FORMAT_STRING); //$NON-NLS-1$
        jTextFieldFormat.setEditable(false);
        colorEditableFormat(true);
        jTextAreaDescription.setEditable(true);
        colorEditableDescription(true);
        jTextAreaDescription.setText(""); //$NON-NLS-1$
        swNew = true;
        jComboBox1.setEnabled(true);
        jButtonAssignFormat.setEnabled(true);
        swTextFieldFormat = true;
        m_Frame.statesMenusVariablesCreate(false);
        m_Frame.statesMenusVariablesEditDelete(false);
        itemSelected = 0;
        currentFormatter=new TestDataFormat();
    }

    public void deleteActionPerformed() {
//hcanedo_21_09_2004_begin
                int confirmation = JOptionPane.YES_OPTION;
        confirmation = JOptionPane.showConfirmDialog(m_Frame, CMMessages.getString("TESTDATA_MESSAGE_DELETE_VARIABLES"),
            CMMessages.getString("TESTDATA_TITLE_MENSSAGE_DELETE_STRUCTURE"), JOptionPane.YES_NO_OPTION); //$NON-NLS-1$ //$NON-NLS-2$
        if (confirmation == JOptionPane.YES_OPTION) {
//hcanedo_21_09_2004_end
        jButtonSave.setVisible(false);
        jButtonCancel.setVisible(false);
        int selectedIndex = jListVariables.getSelectedIndex();
        if (selectedIndex != -1) {
            itemSelected = selectedIndex;
            Variable variable=(Variable)m_Variables.getVariables().elementAt(selectedIndex);
      /*      String oldname=variable.getM_Name();//(String)m_Variables.getNames().elementAt(selectedIndex);
            String oldvalue=variable.getM_Value();//(String)m_Variables.getValue().elementAt(selectedIndex);
            String oldFormat=variable.getM_Format();//(String)m_Variables.getFormat().elementAt(selectedIndex);
            String olddescription=variable.getM_Description();//(String)m_Variables.getDescription().elementAt(selectedIndex);
            String oldtype=variable.getM_Type();//(String)m_Variables.getType().elementAt(selectedIndex);
            TestDataFormat oldFormater=variable.getM_Formatter();//(TestDataFormat)m_Variables.getFormatter().elementAt(selectedIndex);*/
			m_Frame.getM_CMUndoMediator().deleteVariableEdit(this,itemSelected,variable,m_Frame.getContentTabbedPane(),CMMessages.getString("TESTDATA_VARIABLES"));
            /*m_Variables.getNames().removeElementAt(selectedIndex);
            m_Variables.getValue().removeElementAt(selectedIndex);
            m_Variables.getDescription().removeElementAt(selectedIndex);
            m_Variables.getType().removeElementAt(selectedIndex);
            m_Variables.getFormat().removeElementAt(selectedIndex);
            m_Variables.getFormatter().removeElementAt(selectedIndex);*/
			m_Variables.getVariables().removeElementAt(selectedIndex);
            if (itemSelected > 0) {
                itemSelected--;
            }
            charge();
            m_Frame.getTreeWorkspaceView().saveCurrentProyect();
        }
//hcanedo_21_09_2004_begin
        }
//hcanedo_21_09_2004_end
    }

    public void jButtonSaveActionPerformed(ActionEvent e) {
        if (swNew) {
            if (jTextFieldName.getText().trim().equals("") )//|| jTextFieldValue.getText().trim().equals("")) //$NON-NLS-1$ //$NON-NLS-2$
            {
                JOptionPane.showMessageDialog(m_Frame, CMMessages.getString("TESTDATA_MENSSAGE_ERROR_VARIABLES"),
                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                // charge();
            }
            else {
                if (validateName(jTextFieldName.getText().trim(), swNew))
                    JOptionPane.showMessageDialog(m_Frame, CMMessages.getString("TESTDATA_VARIABLE_MENSSAGE_ERROR_EQUALS_NAMES"),
                        CMMessages.getString("TESTDATA_IMPORT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                else {
                    String p_Format=jTextFieldFormat.getText();
        		//	jTextFieldValue.setText(CMFormatFactory.getInstance().applyAnyFormat(p_Format, jTextFieldValue.getText()));
                    //CMDefaultValue defaultValue = new CMDefaultValue(jTextFieldValue.getText().trim());
                    Variable newVariable= new Variable(jTextFieldName.getText().trim(),defaultValue,jTextAreaDescription.getText().trim(),jComboBox1.getSelectedItem().toString(),jTextFieldFormat.getText().trim(),currentFormatter);
                   /* m_Variables.getNames().addElement(jTextFieldName.getText().trim());
                    m_Variables.getValue().addElement(jTextFieldValue.getText().trim());
                    m_Variables.getDescription().addElement(jTextAreaDescription.getText().trim());
                    m_Variables.getType().addElement(jComboBox1.getSelectedItem());
                    m_Variables.getFormat().addElement(jTextFieldFormat.getText().trim());
                    m_Variables.getFormatter().addElement(currentFormatter);*/
                    m_Variables.getVariables().addElement(newVariable);
                    itemSelected = m_Variables.getVariables().size() - 1;//m_Variables.getNames().size() - 1;
                    m_Frame.getM_CMUndoMediator().createVariableEdit(this,itemSelected,newVariable,m_Frame.getContentTabbedPane(),CMMessages.getString("TESTDATA_VARIABLES"));
                    charge();
                    m_Frame.getTreeWorkspaceView().saveCurrentProyect();
                    swNew = false;
                    jButtonSave.setVisible(false);
                    jButtonCancel.setVisible(false);
                    jTextAreaDescription.setEditable(false);
                    colorEditableDescription(false);
                    colorEditableFormat(false);
                    jTextFieldName.setEditable(false);
                    jTextFieldValue.setEditable(false);
                    jTextFieldFormat.setEditable(false);
                    jListVariables.setEnabled(true);
                    jComboBox1.setEnabled(false);
                    jButtonAssignFormat.setEnabled(false);
                    swTextFieldFormat = false;
                    if (jListVariables.getSelectedIndex() != -1) {
                        m_Frame.statesMenusVariablesCreate(true);
                        m_Frame.statesMenusVariablesEditDelete(true);
                    }
                    else {
                        m_Frame.statesMenusVariablesCreate(true);
                        m_Frame.statesMenusVariablesEditDelete(false);
                    }
                }
            }
        }
        else {
            if (jTextFieldName.getText().trim().equals("") )//|| jTextFieldValue.getText().trim().equals("")) //$NON-NLS-1$ //$NON-NLS-2$
            {
                JOptionPane.showMessageDialog(m_Frame, CMMessages.getString("TESTDATA_MENSSAGE_ERROR_VARIABLES"),
                    CMMessages.getString("TESTDATA_TITLE_MENSSAGE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                //charge();
            }
            else {
                if (validateName(jTextFieldName.getText().trim(), swNew))
                    JOptionPane.showMessageDialog(m_Frame, CMMessages.getString("TESTDATA_VARIABLE_MENSSAGE_ERROR_EQUALS_NAMES"),
                        CMMessages.getString("TESTDATA_IMPORT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                else {
                    String p_Format=jTextFieldFormat.getText();
			     //   jTextFieldValue.setText(CMFormatFactory.getInstance().applyAnyFormat(p_Format, jTextFieldValue.getText()));
                    Variable oldVariable=(Variable)m_Variables.getVariables().elementAt(jListVariables.getSelectedIndex());
                 	String oldname=oldVariable.getM_Name();//(String)m_Variables.getNames().elementAt(jListVariables.getSelectedIndex());
                    String oldFormat=oldVariable.getFormat();//(String)m_Variables.ge=tFormat().elementAt(jListVariables.getSelectedIndex());
                    TestDataFormat oldformatter=oldVariable.getFormatter();//(TestDataFormat) m_Variables.getFormatter().elementAt(jListVariables.getSelectedIndex());
                    String olddescription=oldVariable.getM_Description();//(String)m_Variables.getDescription().elementAt(jListVariables.getSelectedIndex());
                    String oldtype=oldVariable.getM_Type();//(String)m_Variables.getType().elementAt(jListVariables.getSelectedIndex());
                    oldVariable.setM_Name(jTextFieldName.getText().trim());//m_Variables.getNames().setElementAt(jTextFieldName.getText().trim(), jListVariables.getSelectedIndex());
                    //if(isChanged == true){
                    	//CMDefaultValue defaultValue = new CMDefaultValue(jTextFieldValue.getText().trim());
                        //oldVariable.setM_Value(defaultValue);
                        //isChanged = false;
                    //}
                    
                    oldVariable.setFormat(jTextFieldFormat.getText().trim());//m_Variables.getFormat().setElementAt(jTextFieldFormat.getText().trim(), jListVariables.getSelectedIndex());
                    oldVariable.setFormatter(currentFormatter);//m_Variables.getFormatter().setElementAt(currentFormatter,jListVariables.getSelectedIndex());
                    oldVariable.setM_Description(jTextAreaDescription.getText().trim());//m_Variables.getDescription().setElementAt(jTextAreaDescription.getText().trim(),
                       // jListVariables.getSelectedIndex());
                    oldVariable.setM_Type(jComboBox1.getSelectedItem().toString());//m_Variables.getType().setElementAt(jComboBox1.getSelectedItem(), jListVariables.getSelectedIndex());
                    //CMDefaultValue newValue = new CMDefaultValue(jTextFieldValue.getText().trim());
                    m_Frame.getM_CMUndoMediator().editVariableEdit(this,itemSelected,defaultValue,jComboBox1.getSelectedItem().toString(),jTextFieldFormat.getText().trim(),currentFormatter, jTextFieldName.getText().trim(),jTextAreaDescription.getText().trim(),oldVariable.getM_Value(),oldtype,oldFormat,oldformatter, oldname,olddescription,m_Frame.getContentTabbedPane(),CMMessages.getString("TESTDATA_VARIABLES"));
                    oldVariable.setM_Value(defaultValue);
                    m_Frame.getTreeWorkspaceView().saveCurrentProyect();
                    updateListOfVariables();
                    jButtonSave.setVisible(false);
                    jButtonCancel.setVisible(false);
                    jTextAreaDescription.setEditable(false);
                    colorEditableDescription(false);
                    colorEditableFormat(false);
                    jTextFieldName.setEditable(false);
                    jTextFieldValue.setEditable(false);
                    jTextFieldFormat.setEditable(false);
                    jListVariables.setEnabled(true);
                    jComboBox1.setEnabled(false);
                    jButtonAssignFormat.setEnabled(false);
                    swTextFieldFormat = false;
                    if (jListVariables.getSelectedIndex() != -1) {
                        m_Frame.statesMenusVariablesCreate(true);
                        m_Frame.statesMenusVariablesEditDelete(true);
                    }
                    else {
                        m_Frame.statesMenusVariablesCreate(true);
                        m_Frame.statesMenusVariablesEditDelete(false);
                    }
                }
            }
        }
    }

    private Vector getVariablesNames(Variables p_Variables){
    	Vector result= new Vector();
    	for(int i =0; i< p_Variables.getVariables().size();i++){
    		result.addElement(((Variable)p_Variables.getVariables().elementAt(i)).getM_Name());
    	}
    	return result;
    }
    //  public TestData getTestData(){ return testData; }
    // public void setTestData(TestData testData){ this.testData = testData; }
    
    private void updateListOfVariables(){
    	//((DefaultListModel)jListVariables.getModel()).clear();
//    	while(jListVariables.getModel().getSize() != 0){
//    		jListVariables.getModel().
//    	}
    		
    	jListVariables.setListData(getVariablesNames(m_Variables));
    }
    
    public void charge() {
    	//svonborries_06012006_begin
    	if(m_TDStructure == null)return;
    	if(m_TDStructure.getM_Variables() == null){
    		m_TDStructure.setM_Variables(new Variables());
    		m_Variables = m_TDStructure.getM_Variables();
    	}
    	else{
    		m_Variables = m_TDStructure.getM_Variables(); //testData.getM_Variables();//svonborries_05012006	
    	}
        //svonborries_06012006_end
        if (m_Variables.getVariables().size() !=0){//getNames().size() != 0) {
        	if(itemSelected >= m_Variables.getVariables().size())
        		itemSelected=m_Variables.getVariables().size()-1;
            try {
            	jListVariables.setListData(getVariablesNames(m_Variables));
                jListVariables.setSelectedIndex(itemSelected);
                jTextFieldName.setText(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getM_Name());
                jTextFieldFormat.setText(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getFormat());
				//jTextFieldValue.setText(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getM_Value().getValue().toString());
                jTextFieldValue.setText(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getFormattedValue());
				jTextAreaDescription.setText(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getM_Description());
	            jComboBox1.setSelectedItem(((Variable)m_Variables.getVariables().elementAt(itemSelected)).getM_Type());
	            currentFormatter=((Variable)m_Variables.getVariables().elementAt(itemSelected)).getFormatter();
	            m_Frame.statesMenusVariablesEditDelete(true);
	            defaultValue = (CMDefaultValue) ((Variable)m_Variables.getVariables().elementAt(itemSelected)).getM_Value();
			} catch (Exception e) {

			}
            
        }
        else {
            //	m_Variables=testData.getM_Variables();
            jListVariables.setListData(getVariablesNames(m_Variables));//m_Variables.getNames());
            jListVariables.setSelectedIndex(-1);
            jTextFieldName.setText(""); //$NON-NLS-1$
            jTextFieldValue.setText(""); //$NON-NLS-1$);
            jTextFieldFormat.setText(""); //$NON-NLS-1$
            jTextAreaDescription.setText(""); //$NON-NLS-1$
            jComboBox1.setSelectedItem("binary"); //$NON-NLS-1$
            m_Frame.statesMenusVariablesEditDelete(false);
        }
    }

    public void jListVariablesValueChanged(ListSelectionEvent e) {
        int selectedIndex = jListVariables.getSelectedIndex();
        if (selectedIndex != -1) {
            try {
            	defaultValue = (CMDefaultValue) ((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getM_Value();
            	jComboBox1.setSelectedItem(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getM_Type());
                jTextFieldName.setText(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getM_Name());
				//jTextFieldValue.setText(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getM_Value().getValue().toString());
                jTextFieldValue.setText(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getFormattedValue());
				jTextFieldFormat.setText(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getFormat());
	            jTextAreaDescription.setText(((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getM_Description());
			} catch (Exception e1) {
				
			}
            
            try {
            	currentFormatter=((Variable)m_Variables.getVariables().elementAt(selectedIndex)).getFormatter();
			} catch (Exception ex) {
				TestDataFormat newTDF=new TestDataFormat();
				//m_Variables.getFormatter().setElementAt(newTDF,selectedIndex);
				((Variable)m_Variables.getVariables().elementAt(selectedIndex)).setFormatter(newTDF);
				ex.printStackTrace();
			}
            
            m_Frame.statesMenusVariablesEditDelete(true);
        }
        else {
            m_Frame.statesMenusVariablesEditDelete(false);
        }
    }

   /* public void jButtonAsignTestDataActionPerformed(ActionEvent e) {
		jButtonAsignTestData.setVisible(false);
        m_Variables.setSelectedVariable(jListVariables.getSelectedIndex());
        String name=(m_Variables.getNames().elementAt(jListVariables.getSelectedIndex())).toString();
        String value=(m_Variables.getValue().elementAt(jListVariables.getSelectedIndex())).toString();
        String type=(m_Variables.getType().elementAt(jListVariables.getSelectedIndex())).toString();
        m_Frame.selectTabTestData(name,value,type);
    }
	/*public void setVisibleAssignTestData()
    {
        jButtonAsignTestData.setVisible(true);
    }*/
//  svonborries_05012006_begin
    public Project2 getM_Project() { return m_Project; }

    public void setM_Project(Project2 m_Project) { this.m_Project = m_Project; }
//  svonborries_05012006_end
    public void jButtonCancelActionPerformed(ActionEvent e) {
        jButtonSave.setVisible(false);
        jButtonCancel.setVisible(false);
        jTextAreaDescription.setEditable(false);
        colorEditableDescription(false);
        jTextFieldName.setEditable(false);
        jTextFieldValue.setEditable(false);
        jTextFieldFormat.setEditable(false);
        jListVariables.setEnabled(true);
        jComboBox1.setEnabled(false);
        colorEditableFormat(false);
        jButtonAssignFormat.setEnabled(false);
        swTextFieldFormat = false;
        charge();
        if (swNew)
            swNew = false;
        if (jListVariables.getSelectedIndex() != -1) {
            m_Frame.statesMenusVariablesCreate(true);
            m_Frame.statesMenusVariablesEditDelete(true);
        }
        else {
            m_Frame.statesMenusVariablesCreate(true);
            m_Frame.statesMenusVariablesEditDelete(false);
            
        }
    }

    public void setFormat(String p_Format,TestDataFormat p_Formatter) {
        String oldFormat=jTextFieldFormat.getText();
        TestDataFormat oldFormatter= currentFormatter;
        jTextFieldFormat.setText(p_Format);
        jTextFieldValue.setText(CMFormatFactory.getInstance().applyAnyFormat(p_Formatter, jTextFieldValue.getText(),oldFormatter));
    }
//hcanedo_21_09_2004_begin
    public String getFormat() {
        return jTextFieldFormat.getText();
    }
//hcanedo_21_09_2004_end

    public void jTextFieldFormatMouseClicked(MouseEvent e) {
        if (e.getModifiers() == Event.META_MASK && swTextFieldFormat) {
            this.m_Frame.getJPopupMenuFormatStructure().show(jTextFieldFormat, e.getX(), e.getY());
        }
    }

    public boolean validateName(String p_name, boolean p_swNew) {
        boolean swExits = false;
        Vector variablesNames= getVariablesNames(m_Variables);
        for (int i = 0; i < variablesNames.size(); i++) {//m_Variables.getNames().size(); i++) {
            String variable = variablesNames.elementAt(i).toString();// m_Variables.getNames().elementAt(i).toString();
            if (variable.equalsIgnoreCase(p_name) && p_swNew)
                swExits = true;
            else
                if(variable.equalsIgnoreCase(p_name) && i!= itemSelected)
                	swExits=true;
        }
        return swExits;
    }
//hcanedo_21_09_2004_begin
    public void jButtonAssignFormatActionPerformed(ActionEvent e) {
    	if(currentFormatter == null){
    		currentFormatter= new TestDataFormat();
    		jTextFieldFormat.setText(currentFormatter.getOriginalFormatter());
    	}
        CMDialogFormat cmd = new CMDialogFormat(m_Frame,getCurrentFormatter());
        cmd.setVisible(true);
        if(cmd.buttonOkclicked)
        {
		 String p_Format=cmd.getFormatResult();
		 TestDataFormat p_Formatter=cmd.getFormatterResult();
		 String value= "";
		 try {
			 //TODO EL PROBLEMA ES QUE EN ESTA PARTE DEL CODIGO, DEBERIA VER LA OPCION SI HAS EDITADO EL VALUE
			 //EL CODIGO NO DEBERIA SACAR EL ICMVALUE SOLAMENTE DE LA VARIABLE, TAMBIEN DEBERIA EVALUAR
			 //SI LO Q HAY EN LA CASILLA DE TEXTO ES UN VALOR APLICABLE A AL FORMATO SELECCIONADO
			 //EL PROBLEMA ES QUE AUNQUE VOS CAMBIES EL VALOR DE LA CASILLA DE VALUE, EL CODIGO
			 //SIEMPRE FORMATEA EL VALOR DE LA VARIABLE, LO CUAL ES INCORRECTO Y DEBERIA COMPROBAR EL VALOR
			 //Q TIENE LA CASILLA VALUE
			 value = CMFormatFactory.applyFormatToICMValue(defaultValue, p_Formatter);
			 //value = CMFormatFactory.applyFormatToICMValue(((Variable)m_Variables.getVariables().elementAt(jListVariables.getSelectedIndex())).getM_Value(), p_Formatter);
		} catch (Exception e1) {
			value = CMFormatFactory.applyFormatToICMValue(defaultValue, p_Formatter);
		}
			 
			 if(CMFormatFactory.isSuccessFormated())
	            {
	                jTextFieldFormat.setText(p_Format);
	        		jTextFieldValue.setText(value);
	        		currentFormatter=p_Formatter;
	        		isChanged = false;
	            }
	            else
	            {
	                JOptionPane.showMessageDialog(this, CMMessages.getString("TESTDATA_ASSIGN_FORMAT_MENSSAGE_ERROR"), CMMessages.getString("TESTDATA_ASSIGN_FORMAT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE);
	            }
		// cmd.getFormatterResult();
         //String value=CMFormatFactory.applyAnyFormat(p_Formatter, jTextFieldValue.getText(),currentFormatter);
		 
		 
            
        }
    }
//hcanedo_21_09_2004_end
    public void jTextFieldValueActionPerformed(ActionEvent e) {
    	//System.out.println("entro al actionperformed del value");
     /*   String p_Format=jTextFieldFormat.getText();
        jTextFieldValue.setText(CMFormatFactory.getInstance().applyAnyFormat(p_Format, jTextFieldValue.getText()));*/
    }

    public void jTextFieldValueFocusLost(FocusEvent e) {
    	if(isChanged == true){
//    		String p_Format=jTextFieldFormat.getText();
    		if(validateNumber(currentFormatter, jTextFieldValue.getText()) != null)
    			defaultValue = new CMDefaultValue(validateNumber(currentFormatter, jTextFieldValue.getText()));
    		else
    			defaultValue = new CMDefaultValue(jTextFieldValue.getText());
             //String value=CMFormatFactory.applyAnyFormat(currentFormatter, jTextFieldValue.getText(),currentFormatter);
        	String value= CMFormatFactory.applyFormatToICMValue(defaultValue, currentFormatter);
                if(CMFormatFactory.isSuccessFormated())
                {
            		jTextFieldValue.setText(value);
            		try {
//            			if(!swNew)
//            				((Variable)m_Variables.getVariables().elementAt(jListVariables.getSelectedIndex())).setM_Value(defaultValue);
            			isChanged = false;
					} catch (Exception e1) {
						isChanged = false;
					}
            		
                }
                else
                {
                	//jTextFieldValue.setText(defaultValue.getValueString());
            		try {
            			//((Variable)m_Variables.getVariables().elementAt(jListVariables.getSelectedIndex())).setM_Value(defaultValue);
            			isChanged = false;
					} catch (Exception e1) {
						isChanged = false;
					}
                    JOptionPane.showMessageDialog(this, CMMessages.getString("TESTDATA_ASSIGN_FORMAT_MENSSAGE_ERROR"), CMMessages.getString("TESTDATA_ASSIGN_FORMAT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                }
    		
    	} 
    }

    public void jTextFieldValueFocusGained(FocusEvent e) {
//         try{
//        	String format =jTextFieldFormat.getText();
//           if(format.endsWith("%"))
//           {
//            	String value=CMFormatFactory.getInstance().convertToNumberFromPercent(jTextFieldValue.getText(),currentFormatter);
//                jTextFieldValue.setText(value);
//           }
//
//        }
//        catch(Exception ex)
//        {
//        	Logger.getLogger(this.getClass()).error(ex.getMessage());
//        }
    }


    public void undoCreateVariable(int p_index)
    {
    	m_Variables.getVariables().remove(p_index);
       /* m_Variables.getDescription().remove(p_index);
        m_Variables.getFormat().remove(p_index);
        m_Variables.getFormatter().remove(p_index);
        m_Variables.getNames().remove(p_index);
        m_Variables.getType().remove(p_index);
        m_Variables.getValue().remove(p_index);*/
        itemSelected = 0;
       	charge();
    }
    public void redoCreateVariable(int p_index, Variable p_Variable)//int p_index, String value, String type, String format,TestDataFormat formatter, String description, String name)
    {
    	m_Variables.getVariables().addElement(p_Variable);
		/* m_Variables.getNames().addElement(name);
         m_Variables.getValue().addElement(value);
         m_Variables.getDescription().addElement(description);
         m_Variables.getType().addElement(type);
         m_Variables.getFormat().addElement(format);
         m_Variables.getFormatter().addElement(formatter);*/
         itemSelected = p_index;
        charge();
    }
        public void undoDeleteVariable(int p_index, Variable p_Variable)//String value, String type, String format, TestDataFormat formatter, String description, String name)
    {
        	m_Variables.getVariables().insertElementAt(p_Variable,p_index);
		/* m_Variables.getNames().insertElementAt(name, p_index);
         m_Variables.getValue().insertElementAt(value,p_index);
         m_Variables.getDescription().insertElementAt(description,p_index);
         m_Variables.getType().insertElementAt(type,p_index);
         m_Variables.getFormat().insertElementAt(format, p_index);
         m_Variables.getFormatter().insertElementAt(formatter, p_index);*/
         itemSelected = p_index;
        charge();
    }

	public void undoRedoEditVariable(int p_index, ICMValue value, String type, String format,TestDataFormat formatter, String description, String name)
    {
		Variable editVariable=(Variable) m_Variables.getVariables().elementAt(p_index);
		editVariable.setM_Description(description);
		editVariable.setFormat(format);
		editVariable.setFormatter(formatter);
		editVariable.setM_Name(name);
		editVariable.setM_Type(type);
		editVariable.setM_Value(value);
		 /*m_Variables.getNames().setElementAt(name,p_index);
         m_Variables.getValue().setElementAt(value,p_index);
         m_Variables.getDescription().setElementAt(description,p_index);
         m_Variables.getType().setElementAt(type,p_index);
         m_Variables.getFormat().setElementAt(format,p_index);
         m_Variables.getFormatter().setElementAt(formatter,p_index);*/
         itemSelected = p_index;
        charge();
    }


    private JScrollPane jScrollPaneListVariables = new JScrollPane();
    private JList jListVariables = new JList();
    private JLabel jLabelListVariables = new JLabel();
    private JPanel jPanelViewVariables = new JPanel();
    private JTextField jTextFieldName = new JTextField();
    private JTextField jTextFieldValue = new JTextField();
    private JLabel jLabelName = new JLabel();
    private JLabel jLabelValue = new JLabel();
    private JScrollPane jScrollPaneDescriptionVariables = new JScrollPane();
    private CMJEditorPaneFocusChangeable jTextAreaDescription = new CMJEditorPaneFocusChangeable();
    private JButton jButtonSave = new JButton();
    private CMFrameView m_Frame;
    // private TestData testData;
    private CMDefaultValue defaultValue;
    private Variables m_Variables;
    private boolean swNew = false;
    private CMBaseJComboBox jComboBox1 = new CMBaseJComboBox(this);
    private JLabel jLabelType = new JLabel();
    private Project2 m_Project; //svonborries_05012006
    private JButton jButtonCancel = new JButton();
    private JLabel jLabelFormat = new JLabel();
    private JTextField jTextFieldFormat = new JTextField();
    private boolean swTextFieldFormat = false;
    private int itemSelected = 0;
    private JButton  jButtonAssignFormat= new JButton();
    private TestDataFormat currentFormatter;
    //svonborries_05012006_begin
    private TDStructure m_TDStructure;
    private boolean isChanged;

	public TDStructure getM_TDStructure() {
		return m_TDStructure;
	}

	public void setM_TDStructure(TDStructure structure) {
		m_TDStructure = structure;
	}
    
//  svonborries_05012006_end
	public TestDataFormat getCurrentFormatter() {
		return currentFormatter;
	}

	public void setCurrentFormatter(TestDataFormat currentFormatter) {
		this.currentFormatter = currentFormatter;
	}

	public List getOrder() {
		List focusOrder = new ArrayList();
		if(jListVariables.isEnabled())
			focusOrder.add(jListVariables);
		if(jTextFieldName.isEnabled() && jTextFieldName.isEditable())
			focusOrder.add(jTextFieldName);
		if(jTextFieldValue.isEnabled() && jTextFieldValue.isEditable())
			focusOrder.add(jTextFieldValue);
		if(jComboBox1.isEnabled())
			focusOrder.add(jComboBox1);
		if(jButtonAssignFormat.isEnabled())
			focusOrder.add(jButtonAssignFormat);
		if(jTextAreaDescription.isEnabled() && jTextAreaDescription.isEditable())
			focusOrder.add(jTextAreaDescription);
		if(jButtonSave.isVisible() && jButtonSave.isEnabled())
			focusOrder.add(jButtonSave);
		if(jButtonCancel.isVisible() && jButtonCancel.isEnabled())
			focusOrder.add(jButtonCancel);
		focusOrder.add(m_Frame.getTreeWorkspaceView());
		return focusOrder;
	}
	
	private Number validateNumber(TestDataFormat p_TDFormat, String p_value){
		String realFormatter = p_TDFormat.getRealFormat();
		String visualFormatter = p_TDFormat.getVisualFormatter();
		
		int comaLocation = visualFormatter.indexOf(",");
		int pointLocation = visualFormatter.indexOf(".");
		
		DecimalFormatSymbols symbols = new DecimalFormatSymbols();

		if(comaLocation > pointLocation){
			symbols.setDecimalSeparator(',');
			symbols.setGroupingSeparator('.');
		}
		else{
			symbols.setDecimalSeparator('.');
			symbols.setGroupingSeparator(',');
		}
		
		DecimalFormat formatter = new DecimalFormat(realFormatter,symbols);
    	Number value;
		try {
			if((p_value.indexOf(":") > 0) || (p_value.indexOf("/") > 0))
				return null;
			value = formatter.parse(p_value);
		} catch (ParseException e) {
			return null;
		}
    	
		
		return value;
	}

}
