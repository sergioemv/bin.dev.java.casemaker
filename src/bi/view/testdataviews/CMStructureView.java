/* Generated by Together */

package bi.view.testdataviews;
import java.awt.Color;
import java.awt.Component;
import java.awt.Event;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JViewport;

import model.StructureTestData;
import model.TDStructure;
import bi.view.actions.CMAction;
import bi.view.cells.CMDescriptionStructureView;
import bi.view.cells.CMStructureCellDescription;
import bi.view.cells.CMStructureCellName;
import bi.view.cells.CMStructureCellType;
import bi.view.grids.CMBaseJSmartGrid;
import bi.view.mainframeviews.CMFrameView;

import com.eliad.model.GenericGridModel;
import com.eliad.model.GridContext;
import com.eliad.model.defaults.DefaultGridCellRenderer;
import com.eliad.model.defaults.DefaultStyleModel;
import com.eliad.swing.GridEvent;
import com.eliad.util.RulerConstants;
//hcanedo_21_09_2004_end
public class CMStructureView extends CMBaseJSmartGrid {

    public CMStructureView(CMFrameView frame)
    {
        cmFrame=frame;
        initGUI();
    }
     public JViewport getViewport1() {
      return getViewport();    // getViewport is not public in JSmartGrid
    }

    public void initGUI()
    {
		m_CMGridModel = new CMGridModel(0,3);
		m_CMStyleModel = new CMStyleModel();
        setModels();
        setUIProperties();
		addEventListeners();
    }

	public void setModels()
    {
		this.setStyleModel(m_CMStyleModel);
		this.setModel(m_CMGridModel);
	}
	public void setUIProperties()
	{
		this.setOpaque(false);
		this.setColumnResizable(true);
        this.setAutoResizeMode(RulerConstants.HORIZONTAL);
        this.setGridColor(new Color(127,157,185));
    	this.setSelectionCellBorder(BorderFactory.createLineBorder(Color.orange,2));
		this.setFocusHighlightBorder(BorderFactory.createLineBorder(Color.orange,2));
    	this.setSelectionBackgroundColor(Color.orange);
    	this.setSelectionForegroundColor(Color.black);
		this.setSelectionUnit(com.eliad.swing.JSmartGrid.UNIT_ROW);
		this.setSelectionPolicy(com.eliad.swing.JSmartGrid.POLICY_SINGLE);
	}
  	void deleteAllViews()
  	{
    	int numOfRows = m_CMGridModel.getRowCount();
     	m_CMGridModel.removeRows(0,numOfRows);
  	}
	public void addEventListeners()
    {
		addGridListener(
        new com.eliad.swing.GridAdapter() {
            public void gridFocusGained(GridEvent e) { thisGridFocusGained(e); }
            public void gridMouseClicked(GridEvent e) {
                eventGridMouseClicked(e);
            }
        });

	}
	public void setAccessRights(boolean right){
        m_AccessRight=right;
    }
    public boolean getAccessRights(){
        return m_AccessRight;
    }
  	void eventGridMouseClicked(GridEvent e)
  	{
//hcanedo_21_09_2004_begin
		cmFrame.eventMouseClicked(null);
//hcanedo_21_09_2004_end
		if(m_AccessRight){
    	MouseEvent mouseEvent = (MouseEvent) e.getSourceEvent();
    	int row = e.getRow();
    	int column = e.getColumn();
        if(cmFrame.isIsPanelResultComparationSelected())
        {
			if(m_TDStructure.isSwActualTarget()){
                CMIndexTDStructureUpdate.getInstance().setindexTarget(row);
                cmFrame.getPanelResultComparation().updateStructureGridTarget();
            }
            else
            {
                CMIndexTDStructureUpdate.getInstance().setindexActual(row);
                cmFrame.getPanelResultComparation().updateStructureGridActual();
            }

        }
        else{
         cmFrame.setStatesMenusTestData(false);
        cmFrame.stateMenusAssignTdStructure(false);
        cmFrame.statesMenusTDStructureEditDelete(false);
        if( row >= 0 && column >= 0 && cmFrame.isIsPanelTestDataSelected())
        {
            cmFrame.stateMenusAssignTdStructure(true);
        }
        else
        {
            cmFrame.statesMenusTDStructureEditDelete(true);
        }
//hcanedo_21_09_2004_begin
 /*   	if( mouseEvent.getClickCount() == 2)
    	{
     		// this.edit();
    	}
    	else
    	{*/
//hcanedo_21_09_2004_end
        	if(e.getSourceEvent().getModifiers() == Event.META_MASK)
    		{
                if( row >= 0 && column >= 0 && cmFrame.isIsPanelTestDataSelected())
            	{
                	cmFrame.getJPopupMenuAssignGlobalTDStructure().show(this, mouseEvent.getX(), mouseEvent.getY());
                }
                else
                {
                    if( row >= 0 && column >= 0)
            		{
                		cmFrame.getJPopupMenuEditTDStructure().show(this, mouseEvent.getX(), mouseEvent.getY());
                	}
                }
            }
            else
            {
				if( row >= 0 && column >= 0)
            	{
					this.changeSelection(row,column,false,false);
                	CMIndexTDStructureUpdate.getInstance().setindex(row);
//                            aumentar para cuando esta en el Tab de Test Data
					if(cmFrame.isIsPanelTestDataSelected()){
						cmFrame.getPanelTestDataView().getM_CMGridTDStructure().setRowAndColumnSelected();
                    	cmFrame.getPanelTestDataView().updateStructure();
					}
                	else{
                		cmFrame.getGridTDStructure().setRowAndColumnSelected();
                		cmFrame.updateGridTDStructure();//Falta
                	}

				}

			}
//hcanedo_21_09_2004_begin
        if( mouseEvent.getClickCount() == 2)
    	{
            CMAction.TESTDATA_EDIT_TDSTRUCTURE.getAction().actionPerformed(null);//svonborries_07042006
        }

    //	}
//hcanedo_21_09_2004_end
        }
        }
  	}
	public CMDescriptionStructureView createCMStructureDescriptionView(StructureTestData structureTestData)
    {
      	CMDescriptionStructureView structureDescriptionView = new CMDescriptionStructureView(structureTestData);
      	CMStructureCellName nameView = new CMStructureCellName();
      	nameView.setM_CMDescriptionStructureView(structureDescriptionView);
        CMStructureCellType typeView = new CMStructureCellType();
        typeView.setM_CMDescriptionStructureView(structureDescriptionView);
      	CMStructureCellDescription descriptionCellView = new CMStructureCellDescription();
      	descriptionCellView.setM_CMDescriptionStructureView(structureDescriptionView);
	  	structureDescriptionView.setM_CMStructureCellName(nameView);
        structureDescriptionView.setM_CMStructureCellType(typeView);
     	structureDescriptionView.setM_CMStructureCellDescription(descriptionCellView);
      	structureDescriptionView.addElement(nameView);
        structureDescriptionView.addElement(typeView);
      	structureDescriptionView.addElement(descriptionCellView);
      	return structureDescriptionView;
    }

	public void selectCMTestCaseView(int p_index)
    {
		if( p_index >= 0 && this.getRowCount() > 0)
        {
			this.changeSelection(p_index,0, false, false);
		}
	}
    public void addCMStructureView(CMDescriptionStructureView p_CMStructureView)
    {
  		this.m_CMGridModel.addRow(p_CMStructureView);
  		int newSelectionIndex = CMIndexTDStructureUpdate.getInstance().getIndex();//this.getRowCount()-1;
		selectCMTestCaseView(newSelectionIndex);
	}

	public void addCMStructureViews(Vector p_StructureTestData)
    {
  		int numOfEffects = p_StructureTestData.size();
  		for( int i = 0; i < numOfEffects; i++)
  		{
    		StructureTestData structureTestData = (StructureTestData) p_StructureTestData.elementAt(i);
    		addCMStructureView(createCMStructureDescriptionView(structureTestData));
  		}
	}

    public void addCMStructureView(CMDescriptionStructureView p_CMStructureView, int index)
    {
  		this.m_CMGridModel.addRow(p_CMStructureView);
  		int newSelectionIndex = index;
		selectCMTestCaseView(newSelectionIndex);
	}

	public void addCMStructureViews(Vector p_StructureTestData, int index)
    {
  		int numOfEffects = p_StructureTestData.size();
  		for( int i = 0; i < numOfEffects; i++)
  		{
    		StructureTestData structureTestData = (StructureTestData) p_StructureTestData.elementAt(i);
    		addCMStructureView(createCMStructureDescriptionView(structureTestData), index);
  		}
	}

    public TDStructure getM_TDStructure()
    {
        return m_TDStructure;
    }

    public void setM_TDStructure(TDStructure m_TDStructure)
    {
        this.m_TDStructure = m_TDStructure;
    }

    public void thisGridFocusGained(GridEvent e) {
//hcanedo_21_09_2004_begin
		cmFrame.eventMouseClicked(null);
//hcanedo_21_09_2004_end
        int row = e.getRow();
    	int column = e.getColumn();
        if(cmFrame.isIsPanelResultComparationSelected())
        {
			if(m_TDStructure.isSwActualTarget()){
                CMIndexTDStructureUpdate.getInstance().setindexTarget(row);
                cmFrame.getPanelResultComparation().updateStructureGridTarget();
            }
            else
            {
                CMIndexTDStructureUpdate.getInstance().setindexActual(row);
                cmFrame.getPanelResultComparation().updateStructureGridActual();
            }
        }
        else{
        cmFrame.setStatesMenusTestData(false);
        cmFrame.stateMenusAssignTdStructure(false);
        cmFrame.statesMenusTDStructureEditDelete(false);
        if( row >= 0 && column >= 0 && cmFrame.isIsPanelTestDataSelected())
        {
            cmFrame.stateMenusAssignTdStructure(true);
        }
        else
        {
            cmFrame.statesMenusTDStructureEditDelete(true);
        }
        if( row >= 0 && column >= 0)
            	{
					this.changeSelection(row,column,false,false);
                	CMIndexTDStructureUpdate.getInstance().setindex(row);
//                            aumentar para cuando esta en el Tab de Test Data
					if(cmFrame.isIsPanelTestDataSelected()){
						cmFrame.getPanelTestDataView().getM_CMGridTDStructure().setRowAndColumnSelected();
						cmFrame.getPanelTestDataView().updateStructure();
					}
					else{
                		cmFrame.updateGridTDStructure();
                		cmFrame.getGridTDStructure().setRowAndColumnSelected();//TEST
					}
				}
        }
    }

    private CMFrameView cmFrame;
    private TDStructure m_TDStructure;
    private CMGridModel m_CMGridModel;
	private CMStyleModel m_CMStyleModel;
    private boolean m_AccessRight=true;
  //////////////////////// Grid Model /////////////////////////////////////////
   public class CMGridModel extends GenericGridModel
   {
    	public CMGridModel(int numRows, int numColumns)
    	{
      		super(numRows, numColumns);
    	}
    	public boolean isCellEditable(int row, int column)
    	{
      		return false;
    	}

    	public Object getCellObjectAt(int row, int column)
    	{
      		if( row >= 0 && column >= 0)
      		{
        		return super.getValueAt(row,column);
      		}
      		else
      		{
        		return null;
      		}
    	}

    public Object getValueAt(int row, int column)
    {
      	Object obj = null;
      	if( row >= 0 && column >= 0)
      	{
        	obj = super.getValueAt(row,column);
      	}
      	else
      	{
        	return null;
      	}
      	if( obj == null)
      	{
        	return null;
      	}
      	if( obj instanceof CMStructureCellName)
      	{
        	CMStructureCellName nameView = (CMStructureCellName) obj;
        	if( nameView != null)
        	{
				return nameView.getM_CMDescriptionStructureView().getM_StructureTestData().getName()+nameView.getM_CMDescriptionStructureView().getM_StructureTestData().getTestDataIdentification();
        	}
        	else
        	{
            	return null;
        	}
      	}
      	else if( obj instanceof CMStructureCellDescription)
      	{
			CMStructureCellDescription descriptionView = (CMStructureCellDescription) obj;
			return descriptionView.getM_CMDescriptionStructureView().getM_StructureTestData().getDescription();
		}
       	else if( obj instanceof CMStructureCellType)
      	{
			CMStructureCellType typeView = (CMStructureCellType) obj;
			return typeView.getM_CMDescriptionStructureView().getM_StructureTestData().getType();
		}
      	else
      	{
        	return null;
      	}
	}
  }

  /////////////////////////////Style Model /////////////////////////////////////

   public class CMStyleModel extends DefaultStyleModel
   {
    	public CMStyleModel()
    	{
      		this.setRenderer(String.class, new CMCellRendererDependencies());
    	}

    	public class CMCellRendererDependencies extends DefaultGridCellRenderer
    	{
      		public CMCellRendererDependencies()
      		{
      		}

     		public Component getComponent(Object value, boolean isSelected, boolean hasFocus, boolean isEditable, int row, int column, GridContext context)
     		{
            	Component c = super.getComponent(value, isSelected, hasFocus, isEditable, row, column, context);
            	this.setHorizontalAlignment(JLabel.LEFT);
            	if( !isSelected)
            	{
                	this.setBackground(new Color(235,235,228));
            	}
              	return c;
        	}
        }
  	}

@Override
protected HashMap<Class, Component> getCellClasses() {
	// TODO Auto-generated method stub
	return null;
}

}
