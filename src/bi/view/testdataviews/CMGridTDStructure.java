 /* Generated by Together */

package bi.view.testdataviews;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Event;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JViewport;
import javax.swing.ListSelectionModel;
import javax.swing.undo.UndoableEdit;

import model.BusinessRules;
import model.CMDefaultValue;
import model.ICMValue;
import model.ITypeData;
import model.Structure;
import model.StructureTestData;
import model.TDStructure;
import model.Technology;
import model.TestCase;
import model.TestData;
import model.TestDataCombinations;
import model.TestDataFormat;
import model.TestDataSet;
import model.TypeDataGlobal;
import model.TypeDataLocal;
import model.Variable;
import model.edit.CMModelEditFactory;

import org.apache.log4j.Logger;

import bi.controller.FormulaManager;
import bi.controller.TDStructureManager;
import bi.controller.ToolVendorManager;
import bi.controller.utils.CMCharUtils;
import bi.controller.utils.CMNumberUtils;
import bi.view.actions.CMAction;
import bi.view.cells.CMCellGroupDataTDStructure;
import bi.view.cells.CMCellHeaderTDStructureField;
import bi.view.cells.CMCellHeaderTDStructureFormat;
import bi.view.cells.CMCellHeaderTDStructureFormula;
import bi.view.cells.CMCellHeaderTDStructureGlobal;
import bi.view.cells.CMCellHeaderTDStructureKey;
import bi.view.cells.CMCellHeaderTDStructureLength;
import bi.view.cells.CMCellHeaderTDStructureName;
import bi.view.cells.CMCellHeaderTDStructureNewColumn;
import bi.view.cells.CMCellHeaderTDStructureObjectTypes;
import bi.view.cells.CMCellHeaderTDStructurePrefix;
import bi.view.cells.CMCellHeaderTDStructureSuffix;
import bi.view.cells.CMCellHeaderTDStructureType;
import bi.view.cells.CMCellHeaderTDStructureValue;
import bi.view.cells.CMCellTDStructureClassState;
import bi.view.cells.CMCellTDStructureField;
import bi.view.cells.CMCellTDStructureFormat;
import bi.view.cells.CMCellTDStructureFormula;
import bi.view.cells.CMCellTDStructureGlobal;
import bi.view.cells.CMCellTDStructureKey;
import bi.view.cells.CMCellTDStructureLength;
import bi.view.cells.CMCellTDStructureName;
import bi.view.cells.CMCellTDStructureNewColumn;
import bi.view.cells.CMCellTDStructureObjectTypes;
import bi.view.cells.CMCellTDStructurePrefix;
import bi.view.cells.CMCellTDStructureSuffix;
import bi.view.cells.CMCellTDStructureValue;
import bi.view.edit.CMViewEditFactory;
import bi.view.grids.CMBaseJSmartGrid;
import bi.view.lang.CMMessages;
import bi.view.mainframeviews.CMApplication;
import bi.view.mainframeviews.CMFrameView;
import bi.view.undomanagementviews.CMCompoundEdit;
import bi.view.utils.CMBaseJComboBox;
import bi.view.utils.CMFormatFactory;

import com.eliad.model.AbstractDirectSpanModel;
import com.eliad.model.ExtentCell;
import com.eliad.model.GenericGridModel;
import com.eliad.swing.GridEditingEvent;
import com.eliad.swing.GridEvent;
import com.eliad.swing.JSmartGrid;
import com.eliad.swing.JSmartGridHeader;

public class CMGridTDStructure extends CMBaseJSmartGrid {
    protected CMFrameView cmFrame;
    private boolean isFormulaDelete = false;
    private boolean isSelectedCellFormula = false;
    private CMGridModel cmGridModel = null;
    private TDStructure testData;
    private Vector testCaseIntestData = null;
    private int rowSelected = 0;
    private int columnSelected = 0;
    private CMSpanModel cmSpanModel = null;
    private Object editingObject = null;
  
    static int numofColumnsStatic = 12;
    private int numofcolumnsDinamic= 12;
    private Technology m_Technology;
    private boolean swInsertColumn = false;
    private String m_NameNewColumn="";
    int selectedHeaderRow =  0;
	int selectedHeaderColumn = 0;
	
   // private CMScrollpaneGridTDStructure scrollPaneGridTDStructure;
    private CMHeaderGridTDStructure m_CMHeaderGridTDStructure;
    private JSmartGridHeader m_GridHeader;
    private CMCutCopyPasteStructures my_CutCopyPasteManager = CMCutCopyPasteStructures.getInstance();

    public CMGridTDStructure(CMFrameView frame) {
        cmFrame = frame;
        my_CutCopyPasteManager.setM_Frame(frame);
        testCaseIntestData = new Vector(); 
      
        initGUI(numofColumnsStatic);      
    }

   /* public void stopCellEditing() {
    	super.stopCellEditing();
        try {
            if (isEditing()) {
                if (this.getCurrentCellEditor() != null) {                	
                    this.getCurrentCellEditor().stopCellEditing();
                    int row = this.getSelectionModel().getLeadRow();
                    int column = this.getSelectionModel().getLeadColumn();
                    setRowSelected(row);
                	setColumnSelected(column);
                    this.changeSelection(row, column, false, false);
                }
            }
        }
        catch (Exception ex) {
        	Logger.getLogger(this.getClass()).error(ex.getMessage());
        }
    }*/

    public void eventGridMouseExited(GridEvent e) {
       // MouseEvent mouseEvent = (MouseEvent)e.getSourceEvent();
    	//Do nothing
    }

    public JViewport getViewport1() {
        return super.getViewport(); // getViewport is not public in JSmartGrid
    }


    public void initGUI(int i) {


    	numofcolumnsDinamic = i;
        cmGridModel = new CMGridModel(0, i, cmFrame);
        cmFrame.getTreeWorkspaceView();  
 	   
        this.setModel(cmGridModel);
        cmSpanModel = new CMSpanModel(cmGridModel);
        this.setSpanModel(cmSpanModel);
 
        ///////////////////////////////////////////////////////////////////////////////
        this.setOpaque(false);
        this.setColumnResizable(true);

        //////////////////////////////////////////////////////////////////////////////
        this.setSelectionCellBorder(BorderFactory.createLineBorder(Color.orange, 2));
        this.setFocusHighlightBorder(BorderFactory.createLineBorder(Color.orange, 2));
        this.setSelectionBackgroundColor(SystemColor.activeCaptionText);
        this.setSelectionForegroundColor(Color.black);
        this.setSelectionUnit(com.eliad.swing.JSmartGrid.UNIT_CELL);
        this.setSelectionPolicy(com.eliad.swing.JSmartGrid.POLICY_SINGLE);
        ///////////////////////////////////////////////////////////////////////////////
        this.setGridColor(new Color(196, 194, 196));
		setColumnAutoResizeMode(com.eliad.swing.JSmartGrid.AUTO_RESIZE_OFF);
		//this.setAutoResizeMode(RulerConstants.HORIZONTAL);
		//((JViewport)this.getParent()).setScrollMode(JViewport.SIMPLE_SCROLL_MODE);
        this.setColumnWidths();
        this.setAlignmentY((float)0.5);
        this.setAlignmentX((float)0.5);
       
        this.addFocusListener(new FocusAdapter(){
        	 public void focusGained(FocusEvent e){thisFocusGained(e);}
        	 public void focusLost(FocusEvent e){thisFocusLost(e);}

         });
         this.addKeyListener(new KeyAdapter(){
        	 public void keyPressed(KeyEvent e){thisKeyPressed(e);}
         });
        try {
            this.addMouseListener(
                new java.awt.event.MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        eventMouseClicked(e);
                    }

                });
            addGridListener(
                new com.eliad.swing.GridAdapter() {
                    public void gridMouseClicked(GridEvent e) {
                        eventGridMouseClicked(e);
                    }
                    public void gridMouseEntered(GridEvent e) {
                        eventGridMouseEntered(e);
                    }
                    public void gridMouseExited(GridEvent e) {
                        eventGridMouseExited(e);
                    }
                    public void gridMouseMoved(GridEvent e) {
                        eventGridMouseMoved(e);
                    }

                });
            this.addGridEditingListener(
                new com.eliad.swing.GridEditingListener() {
                    public void editingStarted(GridEditingEvent e) {
                        eventEditingStarted(e);
                    }
                    public void editingStopped(GridEditingEvent e) {
                       //cc eventEditingStopped(e);
                    }
                    public void editingCanceled(GridEditingEvent e) {
                        eventEditingCanceled(e);
                    }

                });


        }
        catch (Exception ex) {
        	Logger.getLogger(this.getClass()).error(ex.getMessage());
        }
 
        initializeCellRenderers();
        
        initializeCellEditors();
    }

	public void setRowAndColumnSelected(){
    	setRowSelected(-1);
		setColumnSelected(-1);
    }
   public void thisFocusGained(FocusEvent e) {

    	if((getRowSelected() <0 || getRowSelected() >= this.getRowCount())||(getColumnSelected() <0 || getColumnSelected() >= this.getColumnCount())){
    		setRowSelected(0);
			setColumnSelected(0);
			//System.out.println("FOCUS GAINED");
    		return;
		}
	}
   public void thisFocusLost(FocusEvent e) {

   /*	if((getRowSelected() >0 || getRowSelected() <= this.getRowCount())||(getColumnSelected() >0 || getColumnSelected() <= this.getColumnCount())){
   		setRowSelected(-1);
		setColumnSelected(-1);
	
   		return;
		}*/
	}
    private void thisKeyPressed(KeyEvent e) {
    	int row=getRowSelected();
    	int column=getColumnSelected();
        if (row>=this.getRowCount())
        	return;
    	CMIndexTDStructureUpdate.getInstance().setnumOfCol(getColumnSelected());
        CMIndexTDStructureUpdate.getInstance().setRowOfGrid(getRowSelected());
        CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(getRowSelected()));
        StructureTestData std1 = (StructureTestData)
        testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
        CMIndexTDStructureUpdate.getInstance().setnumOfTable(std1.getGlobalIndex());

    	if(e.getKeyCode()==KeyEvent.VK_KP_DOWN ||e.getKeyCode()==KeyEvent.VK_DOWN){
    		setRowSelected(this.getSelectionModel().getLeadRow()+1);
    	}
    	if(e.getKeyCode()==KeyEvent.VK_KP_LEFT ||e.getKeyCode()==KeyEvent.VK_LEFT) {
			setColumnSelected(this.getSelectionModel().getLeadColumn()-1);
		}
    	if( e.getKeyCode()==KeyEvent.VK_KP_RIGHT || e.getKeyCode()==KeyEvent.VK_RIGHT ){
    		setColumnSelected(this.getSelectionModel().getLeadColumn()+1);
    	}
		if( e.getKeyCode()==KeyEvent.VK_KP_UP|| e.getKeyCode()==KeyEvent.VK_UP){
			setRowSelected(this.getSelectionModel().getLeadRow()-1);
		}
		if(getRowSelected() <0 || getRowSelected() >= this.getRowCount()){
			setRowSelected(row);
    	}
		if(getColumnSelected() <0 || getColumnSelected() >= this.getColumnCount()){
			setColumnSelected(column);
    	}
		try{
			Object cellSelected= getCellObjectAt(getRowSelected(),getColumnSelected());
			if(cellSelected instanceof CMCellTDStructureKey){
				if(e.getKeyCode() == KeyEvent.VK_K){
					CMIndexTDStructureUpdate.getInstance().setnumOfCol(getColumnSelected());
                    CMIndexTDStructureUpdate.getInstance().setRowOfGrid(getRowSelected());
                    CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(getRowSelected()));
                    StructureTestData std = (StructureTestData)
                        testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
                    CMIndexTDStructureUpdate.getInstance().setnumOfTable(std.getGlobalIndex());
                    //this.clearSelection();
                    //this.changeSelection(rowSelected, getColumnSelected(), false, false);
                    Object obj = getCellObjectAt(getRowSelected(), getColumnSelected());
                    if (obj instanceof CMCellTDStructureKey && !cmFrame.isIsPanelTestDataSelected()) {
                        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(getRowSelected()));
                        CMCompoundEdit ce = new CMCompoundEdit();
                        if (s.getKey().equals("K")) //$NON-NLS-1$
                        {
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeKeyInTypeDataModelEdit(s,""));
                            s.setKey(""); //$NON-NLS-1$
                        }
                        else {
                            /*setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), obj, std.getGlobalIndex(),
                                cmGridModel.numOfCell(rowSelected), "K",null, rowSelected, getColumnSelected());*/
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeKeyInTypeDataModelEdit(s,"K"));
                            s.setKey("K"); //$NON-NLS-1$
                        }
                        cmFrame.getM_CMUndoMediator().changeKeyValueInTDSructure(this, CMIndexTDStructureUpdate.getInstance().getIndex(),
                        		getRowSelected(), getColumnSelected(), obj, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"),ce);
                        update(CMIndexTDStructureUpdate.getInstance().getIndex());
                        this.changeSelection(getRowSelected(), getColumnSelected(), false, false);
                    }
                }
			}
//			svonborries_22112005_begin
	        cmFrame.setStatesMenusTestData(false);
	        Object obj2 = getCellObjectAt(getRowSelected(), getColumnSelected());
	        if (obj2 instanceof CMCellTDStructureFormula) {
	            isSelectedCellFormula = true;
	            cmFrame.statesMenusFormulas(true);
	            cmFrame.statesMenusVariables(true);
	            cmFrame.statesMenusLinkElement(true);//svonborries_14112005
	            ITypeData s = (ITypeData)std1.getTypeData().elementAt(cmGridModel.numOfCell(getRowSelected()));
	            //if (!s.getStringFormula().equals("")) {
	            if (!s.getFormula().equals("")) {
	                if (s.isFormula()) {
	                    CMDialogFormulasValues cmd = new CMDialogFormulasValues();
	                    //if (cmd.cantParam(s.getStringFormula()) == 0)
	                    	if (cmd.cantParam(s.getFormula()) == 0)
	                        cmFrame.statesMenusEditFormulas(false);
	                    else
	                        cmFrame.statesMenusEditFormulas(true);
	                    cmFrame.statesMenusDeleteFormulas(true);
	                }
	                else{
	                	if (!s.isLinkValue())
	                		cmFrame.statesMenusDeleteVariable(true);
	                	}
	                //svonborries_14112005_begin
	                if(s.isLinkValue()){
	                    cmFrame.statesMenusDeleteLinkElement(true);
	                }
	                //svonborries_14112005_end
	            }
	            else {
	                cmFrame.statesMenusEditFormulas(false);
	                cmFrame.statesMenusDeleteFormulas(false);
	                cmFrame.statesMenusDeleteVariable(false);
	                //svonborries_14112005_begin
	                cmFrame.statesMenusDeleteLinkElement(false);
	                //svonborries_14112005_end
	            }
	            //  editFormula = s.getFormula();
	        }
	        else {
	            isSelectedCellFormula = false;
	            cmFrame.statesMenusFormulas(false);
	            cmFrame.statesMenusVariables(false);
	            cmFrame.statesMenusEditFormulas(false);
	            cmFrame.statesMenusDeleteFormulas(false);
	            cmFrame.statesMenusDeleteVariable(false);
//	          svonborries_14112005_begin
	            cmFrame.statesMenusLinkElement(false);
	            cmFrame.statesMenusDeleteLinkElement(false);
	            //svonborries_14112005_end
	        }
	        if (obj2 instanceof CMCellTDStructureClassState || obj2 instanceof CMCellTDStructureField ||
	                obj2 instanceof CMCellTDStructureName || obj2 instanceof CMCellTDStructureObjectTypes ||
	                obj2 instanceof CMCellTDStructureNewColumn || obj2 instanceof CMCellTDStructureValue ||
	                obj2 instanceof CMCellTDStructurePrefix || obj2 instanceof CMCellTDStructureSuffix ||
	                obj2 instanceof CMCellTDStructureFormat || obj2 instanceof CMCellTDStructureKey ||
	                obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureLength ||
	                obj2 instanceof CMCellTDStructureGlobal) {
	                    if (obj2 instanceof CMCellTDStructureNewColumn){
	                    		cmFrame.stateDeleteColumnOptionsinStructure(true);
	                    		cmFrame.stateInsertColumnOptionsinStructure(true);
	                    		cmFrame.stateChangeNameColumnOptionsinStructure(true);
	                    }
	                    else{
	                    	cmFrame.stateDeleteColumnOptionsinStructure(false);
	                    	cmFrame.stateChangeNameColumnOptionsinStructure(false);
	                    }//svonborries_27122005
	                    if (this.cmFrame.isIsPanelTestDataSelected()) {
	                        if (obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureValue)
	                            cmFrame.statesMenusTestDataAssingGlobalValue(true);
	                        /*else//svonborries_220112005
	                            cmFrame.statesMenusTestDataAssingGlobalValue(false);
	                        TypeData s = (TypeData)std1.getTypeData().elementAt(cmGridModel.numOfCell(rowSelected));
	                        cmFrame.statesMenusYTestDataAssignglobalReference(!s.getGlobal().equals("G"));
	                        if (obj2 instanceof CMCellTDStructureGlobal) {
	                            boolean stateMenus = !((CMCellTDStructureGlobal)obj2).getName().equals("G");
	                            this.cmFrame.statesMenusTDAssingGlobalInFieldGlobal(stateMenus);
	                        }*/
	                    }
	                    else {
	                        cmFrame.statesMenusFields(true);
	                        ITypeData s = (ITypeData)std1.getTypeData().elementAt(cmGridModel.numOfCell(getRowSelected()));
	                        boolean stateMenus = s.getGlobal().equals("G");
	                        this.cmFrame.stateAssignCancelGlobalValueReferenceinStructure(stateMenus);
	                    }
	            }
	        else {
                cmFrame.statesMenusTestDataAssingGlobalValue(false);
                cmFrame.statesMenusFields(false);
                this.cmFrame.stateGlobalValueReferenceinStructure(false);
                if (obj2 instanceof CMCellHeaderTDStructureType || obj2 instanceof CMCellHeaderTDStructureField ||
                    obj2 instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
                    obj2 instanceof CMCellHeaderTDStructureNewColumn || obj2 instanceof CMCellHeaderTDStructureValue ||
                    obj2 instanceof CMCellHeaderTDStructurePrefix || obj2 instanceof CMCellHeaderTDStructureSuffix ||
                    obj2 instanceof CMCellHeaderTDStructureFormat || obj2 instanceof CMCellHeaderTDStructureKey ||
                    obj2 instanceof CMCellHeaderTDStructureFormula /*|| obj2 instanceof CMCellHeaderTDStructureType */||
                    obj2 instanceof CMCellHeaderTDStructureLength || obj2 instanceof CMCellHeaderTDStructureGlobal) {
                	    if (obj2 instanceof CMCellHeaderTDStructureNewColumn){                	    	
             		        cmFrame.stateDeleteColumnOptionsinStructure(true);
             		        cmFrame.stateInsertColumnOptionsinStructure(true);
             		        cmFrame.stateChangeNameColumnOptionsinStructure(true);
                        }
//                	  svonborries_27122005_begin
                	    else{
                	    	int i = this.getRowCount();
                	    	if(i >1 ){
                	    		cmFrame.stateInsertColumnOptionsinStructure(true);
                	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
                	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
            	    		}
                	    	else {
                	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
                	    		cmFrame.stateInsertColumnOptionsinStructure(false);
                	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
                	    	}

                	    	}//svonborries_27122005_end
                        cmFrame.statesMenusFieldsHeader(true); //cmFrame.statesMenusFields(true);
                }
                else {
                    cmFrame.statesMenusFields(false);
                }
            }
//	svonborries_22112005_end
		}
		catch (Exception ex) {
			Logger.getLogger(this.getClass()).error("cell selected not found");
		}
	}
    /*Nuevo codigo para eliminar Uknown de las estructuras 28 may 2004 Harold C.   */

    /**  */
    private void deleteUknownStructure(Vector p_values, int p_globalindex, int row) {
        String fvalue = p_values.firstElement().toString();
        if (fvalue.startsWith(BusinessRules.TESTDATA_EMPTY_AT_EQUIVALENCE_CLASS_IN_TEST_CASE)) {
            StringBuffer newvalue = new StringBuffer(",");
            StructureTestData globalStructure = (StructureTestData)testData.getM_StructureTestData().elementAt(p_globalindex);
            ITypeData typ = (ITypeData)globalStructure.getTypeData().elementAt(row);
            newvalue.append(typ.getTypeName());
            p_values.setElementAt(newvalue.toString(), 0);
        }

    }

    public int indexFromjComboBoxOT(String ObjectType){
    	if (m_Technology == null){

      		ToolVendorManager toolvendormanager = ToolVendorManager.INSTANCE;

      		String toolVendor = cmFrame.getTreeWorkspaceView().getCurrentTestObject().getToolVendor();
      		String technology = cmFrame.getTreeWorkspaceView().getCurrentTestObject().getToolVendorTechnology();

  			m_Technology = toolvendormanager.findTechnologyByName(toolVendor,technology);
 		  }
		int sizeObjectTypes = m_Technology.getM_ObjectTypesValue().size();

    	int index = 0;
    	for (int i = 0; i < sizeObjectTypes; i++){
    		String item= m_Technology.getM_ObjectTypesValue().get(i).toString();
        	if (item.equals(ObjectType)){
        		index=i;
        		break;
        	}
        }
    	return index;
    } //cc 15.09.06

     /**
     * @param m_ce   
     * @param intervalAmount */
    @SuppressWarnings("unchecked")
	public UndoableEdit GenerateAllTDStructure(StructureTestData p_CreateStructure, UndoableEdit m_ce, int intervalAmount) {
    	CMCompoundEdit ce;
    	if(m_ce == null)
    		//ce = new CMCompoundEdit(2000);
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) m_ce;

    	System.gc();
        Vector value = new Vector();
        testCaseIntestData = new Vector();
//        int intervalAmount=2;
//        CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
//        cmd.setVisible(true);
//        if(cmd.isOkSelected()){
//        	intervalAmount=cmd.getAmountOfIntervalValues();
//        }
//        else{
//        	return ce;
//        }
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure =testData.getM_TestObject().getStructure(); //this.getTDStructure().getM_TestObject().getM_Structure();//testData.getM_TestObject().getM_Structure();
        int j = 0;
        int index = 0;


        int sizeTC = m_Structure.getLnkTestCases().size();
        for (int i = 0; i < sizeTC; i++) {
            TDStructure newTDStructure = new TDStructure(); //new
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit(newTDStructure,testData.getTestDataCombination()));
            newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
            TestData newTestData = new TestData(newTDStructure); //new*/
            ///////////////////////////////////////////////////////////////////////////
            String testdataName = newTestData.generateName(testData,ce);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,testdataName));
            newTestData.setName(testdataName);
            ///////////////////////////////////////////////////////////////////////////
            String testdataDescrp = newTestData.generateDescription();
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,testdataDescrp));
            newTestData.setDescription(testdataDescrp); //new
            TestCase testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().elementAt(i));
            testCaseIntestData.addElement(testCase);
            //hcanedo_21_09_2004_begin
            String testcaseinTD = new String(testCase.getName()) + new String(testCase.getStateName());
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit(newTestData,testcaseinTD));
            newTestData.setM_TestCaseinTestData(testcaseinTD); //new
            //hcanedo_21_09_2004_end
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,testCase.getRiskLevel()));
            newTestData.setM_RiskLevel(testCase.getRiskLevel());
            StructureTestData s_TestData = new StructureTestData();
            //        s_TestData.setM_TDStructure(newTestData.getM_TDStructure());//new
            ce.addEdit(setNameDescription2(s_TestData));
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
            s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData,testData.getM_StructureTestData().size() - 1));
            s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1); //0);//Harold canedo lopez bug eliminacion de estructuras automaticas
            index = testData.getTestDataCombination().getM_TestDatas().size(); //new
            //index = newTestData.getM_TDStructure().getM_StructureTestData().size();//new revisar
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit
        			(newTestData.getM_TDStructure(),s_TestData));
            newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData); //new
            String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
            if(names.equals(BusinessRules.TESTDATA_SEPARATOR)){//svonborries_01092006
            	return null;
            }
            //My add
            String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

            /** nuevo codigo de para las combinaciones faltantes 30 may 2004 harold canedo lopez */
            String preservednames = new String(names);

            /**/

            String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
            int numOfName = -1;
//HCanedo_06122005_Begin
            int lastValueSize=0;
            StructureTestData stdPopulated=null;
//HCanedo_06122005_end
            while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
            {
                numOfName++;
                ITypeData typeData = new TypeDataLocal();
                StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                stdPopulated=std;
                String name = testDataManager.generateTypeDataName(names);
                names = CMCharUtils.trimComa(names);
                names = CMCharUtils.killFirstElement(names);
                int change = value.size();
                value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(), intervalAmount);
                values = CMCharUtils.trimComa(values);
                values = CMCharUtils.killFirstElement(values);
                //My adds
                String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                //My adds end..................
                /*HCanedo_18012006_begin
                typeData.setField(name); // new harold
                typeData.setName(name);

              //  My adds......................................
                typeData.setToolVendorOT(individualObjectTypes);
                HCanedo_18012006_end*/
              //  typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
            //    typeData.setTVT(stateTVT);
               // typeData.setNewColumn(testDataManager.);
                                /** new 28 may 2004***************************** */
                deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);
                /*HCanedo_18012006_begin

                typeData.setType(testDataManager.getType(value.firstElement().toString()));
                typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                HCanedo_18012006_end*/
                
                
                
                
                //svonborries_15082008_begin
                /*
                 * In this change, we are looking for values that are numbers, but must be taken like an String
                 * the rule in TestCase for this is the '=' then anything else is an string
                 * for examples values like =000034 must be taken like 000034, other wise CM will take the number and returns 34
                 * if the value is a valid number and has an varChar type, then it must be used like a String
                 * else, it will validate if it is a formula, variable, or other ICMValue*/
                String valueSTR = testDataManager.getValue(value.firstElement().toString());
                int il = value.firstElement().toString().lastIndexOf(",");
                String type =  value.firstElement().toString().substring((il+1), value.firstElement().toString().length());
                if(CMNumberUtils.isValidNumber(valueSTR) && type.equalsIgnoreCase(BusinessRules.TESTDATA_STATE_VARCHAR)){
                	Object obj = valueSTR;
                	CMDefaultValue dvalue = new CMDefaultValue(obj);
                	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,dvalue));
                	typeData.setValue(dvalue);
                }
                else{
                	/*NEW FOR THE ENHANCEMENT OF FORMULAS AND VARIABLES IN TEST DATA DATE: 01/09/2006 BY SVONBORRIES*/
                    ce.addEdit(FormulaManager.calculateFormulasOrVariablesInGenerationOfTestData(valueSTR, typeData, this));
                }
                //svonborries_15082008_end	
                
                
                //svonborries_30082006_begin
                /*if(valueSTR.startsWith("$")){
                	String valueString = VariablesManager.returnImplicitExplicitVariable(valueSTR,CMApplication.frame.getGridTDStructure().getTDStructure());
                	if(valueString.equalsIgnoreCase("")){
                		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueSTR));
                        typeData.setValue(valueSTR);
                	}
                	else{
                		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueString));
                        typeData.setValue(valueString);
                        String formulaValue = valueSTR.substring(1);
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, formulaValue));
                        typeData.setFormula(formulaValue);
                	}
                }
                else{
                	CMDialogFormulasValues cmd1 = new CMDialogFormulasValues(CMApplication.frame, valueSTR, "",this,new TestDataFormat(), true);
                	String result = cmd1.calculeCompexFormula(valueSTR);
                	if(result.equalsIgnoreCase(valueSTR)){
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueSTR));
                        typeData.setValue(valueSTR);
                	}
                	else{
                		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,result));
                        typeData.setValue(result);
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, valueSTR));
                        typeData.setFormula(valueSTR);
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(typeData, true));
                        typeData.setisFormula(true);
                	}
                }*/
                //svonborries_30082006_end
                ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
                /*HCanedo_18012006_begin
                typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                typeData.setM_Formatter(new TestDataFormat());
                typeData.getM_Formatter().setValue(typeData.getValue());
                 HCanedo_18012006_end */
                //////////////////////////////////////////////////////////////////////////////
                ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
                setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
                typeData.setGlobal("G");
//              HCanedo_17112005_begin

//              HCanedo_17112005_end
                //////////////////////////////////////////////////////////////////////////////
                value.removeElementAt(0);
                if (value.size() > 0) {
                    if (change < value.size()) {
//HCanedo_06122005_begin
                    	Vector missingValues= new Vector();
                    //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                    	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//HCanedo_06122005_end
                    		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                    		aux.append(","); //$NON-NLS-1$
                    		aux.append(Integer.toString(numOfName));
                    		value.removeElementAt(indexValue);
                    		missingValues.insertElementAt(aux,0);
                    		//value.insertElementAt(aux.toString(), indexValue);
//HCanedo_06122005_begin
                    	}
                    	value.addElement(missingValues);
                    	lastValueSize=value.size();
//HCanedo_06122005_end
                    }
                }
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit
                		(std,typeData));
                typeData.setStructureTestData(std);
                std.getTypeData().addElement(typeData);
            }
            //HCanedo_18012006_begin
            if(stdPopulated != null)
            	ce.addEdit(setTypeDataReferences(stdPopulated,p_CreateStructure));
            //HCanedo_18012006_end
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit
        			(testData,newTestData));
            testData.getTestDataCombination().getM_TestDatas().addElement(newTestData);
            if (value.size() > 0) {
           /* j=*/

                ce.addEdit(generateCombinationTables(value, index,p_CreateStructure)); //modificar
            }

            /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
            values = CMCharUtils.trimComa(values);
            if (!values.trim().equals("")) {
                ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase,p_CreateStructure,intervalAmount));
            }

        }
      //  numofColumns = numofColumns - 1;
        update(0);
        System.gc();
        return ce;
    }

    private UndoableEdit setTypeDataReferences(StructureTestData stdPopulated, StructureTestData createStructure) {
    	CMCompoundEdit ce = new CMCompoundEdit();
		for(int i=0; i < stdPopulated.getTypeData().size();i++){
			ITypeData TypeDataRefered= (ITypeData) createStructure.getTypeData().elementAt(i);
			ITypeData toRefer=(ITypeData) stdPopulated.getTypeData().elementAt(i);
			ce.addEdit(CMModelEditFactory.INSTANCE.createChangeReferenceTypeDataInTypeDataModelEdit
					(toRefer,TypeDataRefered));
			((TypeDataLocal)toRefer).setM_ReferenceTypeData(TypeDataRefered);
		}
		return ce;
	}

	/** nnuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
    /**
     * @author svonborries
     * @param p_names
     * @param p_values
     * @param p_TestCase
     * @param p_createStrcuture
     * @param p_IntervalAmount
     * @return
     */
    @SuppressWarnings("unchecked")
	public UndoableEdit combinationsValuesInSameTestCase(String p_names, String p_values, TestCase p_TestCase, StructureTestData p_createStrcuture, int p_IntervalAmount) {
        CMCompoundEdit ce = new CMCompoundEdit();
    	Vector value = new Vector();
        // testCaseIntestData = new Vector();
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure = testData.getM_TestObject().getStructure();
        int j = 0;
        int index = 0;
        TDStructure newTDStructure = new TDStructure(); //new
        ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit
    			(newTDStructure,testData.getTestDataCombination()));
        newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
        TestData newTestData = new TestData(newTDStructure); //new*/
        ///////////////////////////////////////////////////////////////////////////
        String testdataSTR = newTestData.generateName(testData,ce);
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit
    			(newTestData,testdataSTR));
        newTestData.setName(testdataSTR);
        ///////////////////////////////////////////////////////////////////////////
        String tddescripSTR = newTestData.generateDescription();
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit
    			(newTestData,tddescripSTR));
        newTestData.setDescription(tddescripSTR); //new
        TestCase testCase = p_TestCase;
        // testCaseIntestData.addElement(testCase);
        //hcanedo_21_09_2004_begin
        String testcaseintestdata = new String(testCase.getName()) + new String(testCase.getStateName());
        ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit
    			(newTestData,testcaseintestdata));
        newTestData.setM_TestCaseinTestData(testcaseintestdata); //new
        //hcanedo_21_09_2004_end
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit
    			(newTestData,testCase.getRiskLevel()));
        newTestData.setM_RiskLevel(testCase.getRiskLevel());
        StructureTestData s_TestData = new StructureTestData();
        //        s_TestData.setM_TDStructure(newTestData.getM_TDStructure());//new
        ce.addEdit(setNameDescription2(s_TestData));
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData
    			(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
        s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData
    			(s_TestData,testData.getM_StructureTestData().size() - 1));
        s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1);
        index = testData.getTestDataCombination().getM_TestDatas().size(); //new
        //index = newTestData.getM_TDStructure().getM_StructureTestData().size();//new revisar
        ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit
    			(newTestData.getM_TDStructure(),s_TestData));
        newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData); //new
        String names = p_names;

        //My add...
        String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

        String preservednames = new String(names);
        String values = p_values.trim();
        int numOfName = -1;
//      HCanedo_06122005_Begin
        int lastValueSize=0;
        StructureTestData stdPopulated=null;
//HCanedo_06122005_end
        while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
        {
            numOfName++;
            ITypeData typeData = new TypeDataLocal();
            StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
            stdPopulated=std;
            String name = testDataManager.generateTypeDataName(names);
            names = CMCharUtils.trimComa(names);
            names = CMCharUtils.killFirstElement(names);
//
           // My adds..............
            String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
            ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
            ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
            //My adds end..................

            int change = value.size();
            value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(),p_IntervalAmount);
            values = CMCharUtils.trimComa(values);
            values = CMCharUtils.killFirstElement(values);
            /*HCanedo_18012006_Begin
            typeData.setField(name); // new harold
            typeData.setName(name);

            //  My adds......................................
            typeData.setToolVendorOT(individualObjectTypes);
       //     typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
      //      typeData.setTVT(stateTVT);
            HCanedo_18012006_End*/
            /** new 28 may 2004***************************** */
            deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);

            /**  */
            /*HCanedo_18012006_Begin
            typeData.setType(testDataManager.getType(value.firstElement().toString()));
            typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
            HCanedo_18012006_End*/
            
            
//          svonborries_16082008_begin
            /*
             * In this change, we are looking for values that are numbers, but must be taken like an String
             * the rule in TestCase for this is the '=' then anything else is an string
             * for examples values like =000034 must be taken like 000034, other wise CM will take the number and returns 34
             * if the value is a valid number and has an varChar type, then it must be used like a String
             * else, it will validate if it is a formula, variable, or other ICMValue*/
            String valueSTR = testDataManager.getValue(value.firstElement().toString());
            int il = value.firstElement().toString().lastIndexOf(",");
            String type =  value.firstElement().toString().substring((il+1), value.firstElement().toString().length());
            if(CMNumberUtils.isValidNumber(valueSTR) && type.equalsIgnoreCase(BusinessRules.TESTDATA_STATE_VARCHAR)){
            	Object obj = valueSTR;
            	CMDefaultValue dvalue = new CMDefaultValue(obj);
            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,dvalue));
            	typeData.setValue(dvalue);
            }
            else{
            	CMDefaultValue defaultValue = new CMDefaultValue(testDataManager.getValue(value.firstElement().toString()));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,defaultValue));
            	typeData.setValue(defaultValue);
            }
//          svonborries_16082008_end  
        	
//            typeData.setStringValue(testDataManager.getValue(value.firstElement().toString()));
            /*HCanedo_18012006_Begin
            ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
            typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
            typeData.setM_Formatter(new TestDataFormat());
            typeData.getM_Formatter().setValue(typeData.getValue());
            HCanedo_18012006_End*/
            //////////////////////////////////////////////////////////////////////////////
            ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
            setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
            typeData.setGlobal("G");
//          HCanedo_17112005_begin



//          HCanedo_17112005_end
            //////////////////////////////////////////////////////////////////////////////
            value.removeElementAt(0);
            if (value.size() > 0) {
                if (change < value.size()) {
//HCanedo_06122005_begin
                	Vector missingValues= new Vector();
                //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//HCanedo_06122005_end
                		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                		aux.append(","); //$NON-NLS-1$
                		aux.append(Integer.toString(numOfName));
                		value.removeElementAt(indexValue);
                		missingValues.insertElementAt(aux,0);
                		//value.insertElementAt(aux.toString(), indexValue);
//HCanedo_06122005_begin
                	}
                	value.addElement(missingValues);
                	lastValueSize=value.size();
//HCanedo_06122005_end
                }
            }
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit
            		(std,typeData));
            std.getTypeData().addElement(typeData);
            typeData.setStructureTestData(std);

        }
        //HCanedo_18012006_begin
        if(stdPopulated != null)
        	ce.addEdit(setTypeDataReferences(stdPopulated,p_createStrcuture));
        //HCanedo_18012006_end
        ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit
    			(testData,newTestData));
        testData.getTestDataCombination().getM_TestDatas().addElement(newTestData);
        if (value.size() > 0) {
           /* j=*/

            ce.addEdit(generateCombinationTables(value, index,p_createStrcuture)); //modificar
        }

        /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
        values = CMCharUtils.trimComa(values);
        if (!values.trim().equals("")) {
            ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase,p_createStrcuture,p_IntervalAmount));
        }
        return ce;
    }

    /**/

    //hcanedo_21_09_2004_begin
    @SuppressWarnings("unchecked")
	public boolean GenerateTDStructureForEspecificTestCase(UndoableEdit p_ce, int intervalAmount, Vector testCaseIntestData, Structure m_Structure, boolean b) {
    	CMCompoundEdit ce;
    	if(p_ce == null)
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) p_ce;
    	Vector value = new Vector();
        //testCaseIntestData = new Vector();
    	this.testCaseIntestData = testCaseIntestData;
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
//        Structure m_Structure = testData.getM_TestObject().getStructure();
//        CMDialogAssignTestCaseToTDStructure dlg = new
//            CMDialogAssignTestCaseToTDStructure(cmFrame, m_Structure, testCaseIntestData);
//        dlg.setVisible(true);
//        if (dlg.isEventJButtonOKClicked()) {
//        	int intervalAmount=2;
//            CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
//            cmd.setVisible(true);
//            if(cmd.isOkSelected()){
//            	intervalAmount=cmd.getAmountOfIntervalValues();
//            }
            StructureTestData p_CreatedStructure=insertDataTDStructureView(ce);
            int j = 0;
            int index = 0;
            for (int i = 0; i < testCaseIntestData.size(); i++) {
                TDStructure newTDStructure = new TDStructure(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit(newTDStructure,testData.getTestDataCombination()));
                newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
                TestData newTestData = new TestData(newTDStructure); //new
                ///////////////////////////////////////////////////////////////////////////
                String testdataName = newTestData.generateName(testData,ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,testdataName));
                newTestData.setName(testdataName);
                ///////////////////////////////////////////////////////////////////////////
                String testdataDescr = newTestData.generateDescription();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,testdataDescr));
                newTestData.setDescription(testdataDescr); //new
                TestCase testCase = ((TestCase)testCaseIntestData.elementAt(i));
                //hcanedo_21_09_2004_begin
                String testcaseinTD = new String(testCase.getName()) + new String(testCase.getStateName());
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit(newTestData,testcaseinTD));
                newTestData.setM_TestCaseinTestData(testcaseinTD); //new
                //hcanedo_21_09_2004_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,testCase.getRiskLevel()));
                newTestData.setM_RiskLevel(testCase.getRiskLevel());
                StructureTestData s_TestData = new StructureTestData();
                //        	s_TestData.setM_TDStructure(newTestData.getM_TDStructure());//new
                ce.addEdit(setNameDescription2(s_TestData));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
                s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
                s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1); //Harold canedo lopez bug eliminacion de estructuras automaticas
                index = testData.getTestDataCombination().getM_TestDatas().size(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(newTestData.getM_TDStructure(),s_TestData));
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData); //new
                String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
                if(names.equals(BusinessRules.TESTDATA_SEPARATOR)){//svonborries_01092006
                	//return dlg.isEventJButtonOKClicked();
                	return b;
                }
//              My add...
                String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

                /** nuevo codigo de para las combinaciones faltantes 30 may 2004 harold canedo lopez */
                String preservednames = new String(names);

            /**/

                String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
                int numOfName = -1;
//HCanedo_06122005_Begin
                int lastValueSize=0;
                StructureTestData stdPopulated=null;
//HCanedo_06122005_end
                while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
                {
                    numOfName++;
                    ITypeData typeData = new TypeDataLocal();
                    StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                    stdPopulated=std;
                    String name = testDataManager.generateTypeDataName(names);
                    names = CMCharUtils.trimComa(names);
                    names = CMCharUtils.killFirstElement(names);

                    String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                    ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                    ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);

                    int change = value.size();
                    value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(), intervalAmount);
                    values = CMCharUtils.trimComa(values);
                    values = CMCharUtils.killFirstElement(values);
                    /*Hcanedo_18012006_begin
                    typeData.setField(name); // new harold
                    typeData.setName(name);

//                  My adds......................................
                    typeData.setToolVendorOT(individualObjectTypes);
              //      typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
             //       typeData.setTVT(stateTVT);
                    HCanedo_18012006_end*/
                             /** new 28 may 2004***************************** */
                    deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);

                    /*HCanedo_18012006_begin
                    typeData.setType(testDataManager.getType(value.firstElement().toString()));
                    typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                    Hcanedo_18012006_end*/
                    String typedataName = testDataManager.getValue(value.firstElement().toString());
                    
                    /*NEW FOR THE ENHANCEMENT OF FORMULAS AND VARIABLES IN TEST DATA DATE: 01/09/2006 BY SVONBORRIES*/
                    FormulaManager.calculateFormulasOrVariablesInGenerationOfTestData(typedataName, typeData, this);
                    /*//svonborries_30082006_begin
                    if(typedataName.startsWith("$")){
                    	String valueString = VariablesManager.returnImplicitExplicitVariable(typedataName,CMApplication.frame.getGridTDStructure().getTDStructure());
                    	if(valueString.equalsIgnoreCase("")){
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                            typeData.setValue(typedataName);
                    	}
                    	else{
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueString));
                            typeData.setValue(valueString);
                            String formulaValue = typedataName.substring(1);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, formulaValue));
                            typeData.setFormula(formulaValue);
                    	}
                    }
                    else{
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                        typeData.setValue(typedataName);
                    }
                    //svonborries_30082006_end
*/                    
                    //ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                    //typeData.setValue(typedataName);
                    ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
                    /*HCanedo_18012006_begin
                    typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    HCanedo_18012006_end*/
                    //////////////////////////////////////////////////////////////////////////////
                    ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
                    setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
                    typeData.setGlobal("G");
//                  HCanedo_17112005_begin

//                  HCanedo_17112005_end
                    //////////////////////////////////////////////////////////////////////////////
                    value.removeElementAt(0);
                    if (value.size() > 0) {
                        if (change < value.size()) {
//    HCanedo_06122005_begin
                        	Vector missingValues= new Vector();
                        //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                        	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//    HCanedo_06122005_end
                        		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                        		aux.append(","); //$NON-NLS-1$
                        		aux.append(Integer.toString(numOfName));
                        		value.removeElementAt(indexValue);
                        		missingValues.insertElementAt(aux,0);
                        		//value.insertElementAt(aux.toString(), indexValue);
//    HCanedo_06122005_begin
                        	}
                        	value.addElement(missingValues);
                        	lastValueSize=value.size();
//    HCanedo_06122005_end
                        }
                    }
                    ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit(std,typeData));
                    typeData.setStructureTestData(std);
                    std.getTypeData().addElement(typeData);
                }
                //HCanedo_18012006_begin
                if(stdPopulated != null){
                	ce.addEdit(setTypeDataReferences(stdPopulated,p_CreatedStructure));
                }
                //Hcanedo_18012006_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit(testData,newTestData));
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData); //new
                if (value.size() > 0) {
               /* j=*/

                    ce.addEdit(generateCombinationTables(value, index,p_CreatedStructure));
                }

                /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
                values = CMCharUtils.trimComa(values);
                if (!values.trim().equals("")) {
                    ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase,p_CreatedStructure,intervalAmount));
                }
            }
            //	update(0);//CMIndexTestDataUpdate.getInstance().getIndex());
            //  revisar
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTestCaseInTDStructureModelEdit(testData,testCaseIntestData));
            testData.setM_TestCaseInTDStructure(testCaseIntestData);
            update(0);
//        }
//        else {
//            update(0);
//        }
        System.gc();
        //return dlg.isEventJButtonOKClicked();
        return b;
    }

    //hcanedo_21_09_2004_end
    private int getNumOfName(String s) {
        int i = s.lastIndexOf(","); //$NON-NLS-1$
        return Integer.parseInt(s.substring(i + 1));
    }

    @SuppressWarnings("unchecked")
	private UndoableEdit generateCombinationTables(Vector value, int index, StructureTestData p_CreatedStructure) // modificado
    {
    	CMCompoundEdit ce = new CMCompoundEdit();
    //	int oldCantofTables=testData.getTestDataCombination().getM_TestDatas().size() - index;
    //	int oldNumofName=-1;
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        do {
        	Vector typeDataValues=new Vector();
        	for (int i=value.size()-1;i>=0;i--) {
				Vector element = (Vector) value.elementAt(i);
				typeDataValues.addElement(element.firstElement());
				element.removeElementAt(0);
				if(element.size()==0){
					value.removeElement(element);
				}
			}
       //     String aux = value.lastElement().toString();
         //   value.removeElementAt(value.size() - 1);
     //       int numofname = getNumOfName(aux);
         //   int cantTables = testData.getTestDataCombination().getM_TestDatas().size() - index;
     //       if(oldNumofName == numofname){
       //     	cantTables=oldCantofTables;
         //   }
           // oldNumofName=numofname;
          //  oldCantofTables=cantTables;
 //            for (int i = 0; i < cantTables; i++) {
        	/**
        	 * Clone a structure to allow new values
        	 */
                TDStructure auxTDStructure = ((TestData)testData.getTestDataCombination().getM_TestDatas().elementAt(index)).getM_TDStructure(); //new
                TestData auxTestData = ((TestData)testData.getTestDataCombination().getM_TestDatas().elementAt(index )); //new
                StructureTestData s_TestData = ((StructureTestData)auxTDStructure.getM_StructureTestData().elementAt(0)); //new
                StructureTestData s_TestData2 = new StructureTestData();
                for (int j = 0; j < s_TestData.getTypeData().size(); j++) {
                    ITypeData typeAux = new TypeDataLocal();
                    ITypeData typeAux2 = (ITypeData)s_TestData.getTypeData().elementAt(j);
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeReferenceTypeDataInTypeDataModelEdit
        					(typeAux,((TypeDataLocal)typeAux2).getM_ReferenceTypeData()));
                    ((TypeDataLocal)typeAux).setM_ReferenceTypeData(((TypeDataLocal)typeAux2).getM_ReferenceTypeData());
                    //svonborries_17072007_begin
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeAux,typeAux2.getValue()));
                    typeAux.setValue((ICMValue) typeAux2.getValue().clone());
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(typeAux, typeAux2.getFormatter()));
                    typeAux.setFormatter(typeAux2.getFormatter());
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(typeAux, typeAux2.getFormat()));
                    typeAux.setFormat(typeAux2.getFormat());
                    //svonborries_17072007_end
                    //typeAux.setStringValue(new String(typeAux2.getStringValue()));
                    /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeAux, typeAux2.getStringFormula()));
                    typeAux.setFormula(typeAux2.getStringFormula());*/
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeAux,"G"));
                    typeAux.setGlobal("G");
                    ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit
                    		(s_TestData2,typeAux));
                    typeAux.setStructureTestData(s_TestData2);
                    s_TestData2.getTypeData().addElement(typeAux);
                }
                /**************************************************/
                /**
                 * Create new TypeDatas to allow the new Values and put it into Structure
                 */
                for (Iterator iter = typeDataValues.iterator(); iter.hasNext();) {
					String aux = iter.next().toString();
					int numofname = getNumOfName(aux);
					ITypeData typeData = (ITypeData)s_TestData.getTypeData().elementAt(numofname);
					ITypeData typeData2 = new TypeDataLocal();
					ce.addEdit(CMModelEditFactory.INSTANCE.createChangeReferenceTypeDataInTypeDataModelEdit
        					(typeData2,((TypeDataLocal)typeData).getM_ReferenceTypeData()));
					((TypeDataLocal)typeData2).setM_ReferenceTypeData(((TypeDataLocal)typeData).getM_ReferenceTypeData());
					String deleteIndex = aux.substring(0, aux.lastIndexOf(","));
					String valueSTR = new String(testDataManager.getValue(deleteIndex));
			        CMDefaultValue defaultValue = new CMDefaultValue(valueSTR);
					ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData2,defaultValue));
			        typeData2.setValue(defaultValue);
			        //svonborries_17072007_begin
			        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(typeData2, typeData.getFormatter()));
			        typeData2.setFormatter(typeData.getFormatter());
			        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(typeData2, typeData.getFormat()));
			        typeData2.setFormat(typeData.getFormat());
			        //svonborries_17072007_end
//					typeData2.setStringValue(valueSTR);
					ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData2,"G"));
					typeData2.setGlobal("G");

					ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataOnlyModelEdit
                    		(s_TestData2,typeData2));
					typeData2.setStructureTestData(s_TestData2);
					//s_TestData2.getTypeData().addElement(typeData2);
					ce.addEdit(CMModelEditFactory.INSTANCE.createRemoveElementAtInStructureTestDataWithTwoParamModelEdit(s_TestData2,numofname));
					s_TestData2.getTypeData().removeElementAt(numofname);
					ce.addEdit(CMModelEditFactory.INSTANCE.createInsertElementAtInStructureTestDataModelEdit(typeData2,s_TestData2,numofname));
					s_TestData2.getTypeData().insertElementAt(typeData2, numofname);
					ce.addEdit(setNameDescription2(s_TestData2));
					ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData2,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
					s_TestData2.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
					ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData2,testData.getM_StructureTestData().size() - 1));
             	    s_TestData2.setGlobalIndex(testData.getM_StructureTestData().size() - 1); //Harold canedo lopez bug eliminacion de estructuras automaticas
                }
                /*******************************************************************/
                /**
                 * Create a new Test Data to allow the new structure
                 */
                TDStructure newTDStructure = new TDStructure();
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit
            			(newTDStructure,testData.getTestDataCombination()));
                newTDStructure.setTestDataCombination(testData.getTestDataCombination());
                TestData newTestData = new TestData(newTDStructure); //new
                String ntdname = newTestData.generateName(testData,ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,ntdname));
                newTestData.setName(ntdname);
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit
            			(newTestData,new String(auxTestData.getM_TestCaseinTestData())));
                newTestData.setM_TestCaseinTestData(new String(auxTestData.getM_TestCaseinTestData())); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,auxTestData.getM_RiskLevel()));
                newTestData.setM_RiskLevel(auxTestData.getM_RiskLevel()); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(newTestData.getM_TDStructure(),s_TestData2));
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData2); //new
                String ntddescrip = newTestData.generateDescription();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,ntddescrip));
                newTestData.setDescription(ntddescrip); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit
            			(testData,newTestData));
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData); //new
                /****************************************************/
           // }
        } while (value.size() > 0);
        return ce;
    }

	@SuppressWarnings("unchecked")
	public void GenerateTDStructureForPositiveTestCase(StructureTestData p_CreatedStructure, UndoableEdit p_ce, int intervalAmount) {
    	CMCompoundEdit ce;
    	if(p_ce == null)
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) p_ce;
        testCaseIntestData = new Vector();
        Vector value = new Vector();
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure = testData.getM_TestObject().getStructure();
        int j = 0;
        int index = 0;
//        int intervalAmount=2;
//        CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
//        cmd.setVisible(true);
//        if(cmd.isOkSelected()){
//        	intervalAmount=cmd.getAmountOfIntervalValues();
//        }
        for (int i = 0; i < m_Structure.getLnkTestCases().size(); i++) {
            TestCase testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().elementAt(i));
            //hcanedo_21_09_2004_begin
            if (testCase.getStateName().equals("+")) //$NON-NLS-1$
            //hcanedo_21_09_2004_end
            {
                TDStructure newTDStructure = new TDStructure(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit(newTDStructure,testData.getTestDataCombination()));
                newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
                TestData newTestData = new TestData(newTDStructure); //new
                ///////////////////////////////////////////////////////////////////////////
                String tdName = newTestData.generateName(testData,ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,tdName));
                newTestData.setName(tdName);
                ///////////////////////////////////////////////////////////////////////////
                String tdDescrip = newTestData.generateDescription();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,tdDescrip));
                newTestData.setDescription(tdDescrip); //new
                //hcanedo_21_09_2004_begin
                String testcaseinTD = new String(testCase.getName()) + new String(testCase.getStateName());
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit(newTestData,testcaseinTD));
                newTestData.setM_TestCaseinTestData(testcaseinTD); //new
                //hcanedo_21_09_2004_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,testCase.getRiskLevel()));
                newTestData.setM_RiskLevel(testCase.getRiskLevel()); //new
                StructureTestData s_TestData = new StructureTestData();
                //		        s_TestData.setM_TDStructure(newTestData.getM_TDStructure());//new
                ce.addEdit(setNameDescription2(s_TestData));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
                s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData,testData.getM_StructureTestData().size() - 1));
                s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1);
                index = testData.getTestDataCombination().getM_TestDatas().size(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(newTestData.getM_TDStructure(),s_TestData));
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData); //new
                ce.addEdit(setNameDescription2(s_TestData));
                String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
                if(names.equals(";")){
                	return;
                }
//              My add...
                String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

                /** nuevo codigo de para las combinaciones faltantes 30 may 2004 harold canedo lopez */
                String preservednames = new String(names);

            /**/

                String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
                int numOfName = -1;
//              HCanedo_06122005_Begin
                int lastValueSize=0;
                StructureTestData stdPopulated=null;
//    HCanedo_06122005_end
                while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
                {
                    numOfName++;
                    ITypeData typeData = new TypeDataLocal();
                    StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                    stdPopulated=std;
                    String name = testDataManager.generateTypeDataName(names);
                    names = CMCharUtils.trimComa(names);
                    names = CMCharUtils.killFirstElement(names);
                    //My adds...
                    String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                    ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                    ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                    //My adds end....

                    int change = value.size();
                    value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(),intervalAmount);
                    values = CMCharUtils.trimComa(values);
                    values = CMCharUtils.killFirstElement(values);
                    /*HCanedo_18012006_Begin
                    typeData.setField(name); // new harold
                    typeData.setName(name);

//                  My adds......................................
                    typeData.setToolVendorOT(individualObjectTypes);
              //      typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
               //     typeData.setTVT(stateTVT);
                    //My adds end...................
                    HCanedo_18012006_end*/
                    /** new 28 may 2004***************************** */
                    deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);

                    /*HCanedo_18012006_Begin
                    typeData.setType(testDataManager.getType(value.firstElement().toString()));
                    typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                    HCanedo_18012006_end*/
                    String typedataName = testDataManager.getValue(value.firstElement().toString());
                    
                    
                    
                    /*NEW FOR THE ENHANCEMENT OF FORMULAS AND VARIABLES IN TEST DATA DATE: 01/09/2006 BY SVONBORRIES*/
                    FormulaManager.calculateFormulasOrVariablesInGenerationOfTestData(typedataName, typeData, this);
                    /*//svonborries_30082006_begin
                    if(typedataName.startsWith("$")){
                    	String valueString = VariablesManager.returnImplicitExplicitVariable(typedataName,CMApplication.frame.getGridTDStructure().getTDStructure());
                    	if(valueString.equalsIgnoreCase("")){
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                            typeData.setValue(typedataName);
                    	}
                    	else{
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueString));
                            typeData.setValue(valueString);
                            String formulaValue = typedataName.substring(1);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, formulaValue));
                            typeData.setFormula(formulaValue);
                    	}
                    }
                    else{
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                        typeData.setValue(typedataName);
                    }
                    //svonborries_30082006_end
*/                    
                    //ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameInTypeDataModelEdit(typeData,typedataName));
                    //typeData.setValue(typedataName);
                    ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
                    /*HCanedo_18012006_Begin
                    typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    HCanedo_18012006_end*/
                    //////////////////////////////////////////////////////////////////////////////
                    ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
                    setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
                    typeData.setGlobal("G");

                    //////////////////////////////////////////////////////////////////////////////
                    value.removeElementAt(0);
                    if (value.size() > 0) {
                        if (change < value.size()) {
//    HCanedo_06122005_begin
                        	Vector missingValues= new Vector();
                        //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                        	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//    HCanedo_06122005_end
                        		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                        		aux.append(","); //$NON-NLS-1$
                        		aux.append(Integer.toString(numOfName));
                        		value.removeElementAt(indexValue);
                        		missingValues.insertElementAt(aux,0);
                        		//value.insertElementAt(aux.toString(), indexValue);
//    HCanedo_06122005_begin
                        	}
                        	value.addElement(missingValues);
                        	lastValueSize=value.size();
//    HCanedo_06122005_end
                        }
                    }
                    ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit(std,typeData));
                    typeData.setStructureTestData(std);
                    std.getTypeData().addElement(typeData);
                }
                //HCanedo18012006_Begin
                if(stdPopulated != null){
                	ce.addEdit(setTypeDataReferences(stdPopulated,p_CreatedStructure));
                }
                //HCanedo18012006_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit(testData,newTestData));
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData);
                if (value.size() > 0) {
                /*	j=*/

                    ce.addEdit(generateCombinationTables(value, index,p_CreatedStructure));
                }

                /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
                values = CMCharUtils.trimComa(values);
                if (!values.trim().equals("")) {
                    ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase, p_CreatedStructure,intervalAmount));
                }
            }
        }

        /*
     	update(0);//CMIndexTestDataUpdate.getInstance().getIndex());*/
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTestCaseInTDStructureModelEdit(testData,testCaseIntestData));
        testData.setM_TestCaseInTDStructure(testCaseIntestData);
        update(0);
        System.gc();
    }

    @SuppressWarnings("unchecked")
	public void GenerateTDStructureForNegativeTestCase(StructureTestData p_CreatedStructure,UndoableEdit p_ce, int intervalAmount) {
    	CMCompoundEdit ce;
    	if(p_ce == null)
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) p_ce;
    	testCaseIntestData = new Vector();
        Vector value = new Vector();
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure = testData.getM_TestObject().getStructure();
        int j = 0;
        int index = 0;
//        int intervalAmount=2;
//        CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
//        cmd.setVisible(true);
//        if(cmd.isOkSelected()){
//        	intervalAmount=cmd.getAmountOfIntervalValues();
//        }
        for (int i = 0; i < m_Structure.getLnkTestCases().size(); i++) {
            TestCase testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().elementAt(i));
            //hcanedo_21_09_2004_begin
            if (testCase.getStateName().equals("-")) //$NON-NLS-1$
            //hcanedo_21_09_2004_end
            {
                TDStructure newTDStructure = new TDStructure(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit(newTDStructure,testData.getTestDataCombination()));
                newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
                TestData newTestData = new TestData(newTDStructure); //new
                ///////////////////////////////////////////////////////////////////////////
                String testdataName = newTestData.generateName(testData,ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,testdataName));
                newTestData.setName(testdataName);
                ///////////////////////////////////////////////////////////////////////////
                String tdDescrip = newTestData.generateDescription();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,tdDescrip));
                newTestData.setDescription(tdDescrip); //new
                //hcanedo_21_09_2004_begin
                String testcaseinTD = new String(testCase.getName()) + new String(testCase.getStateName());
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit(newTestData,testcaseinTD));
                newTestData.setM_TestCaseinTestData(testcaseinTD); //new
                //hcanedo_21_09_2004_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,testCase.getRiskLevel()));
                newTestData.setM_RiskLevel(testCase.getRiskLevel()); //new
                StructureTestData s_TestData = new StructureTestData();
                //		        s_TestData.setM_TDStructure(newTestData.getM_TDStructure());//new
                ce.addEdit(setNameDescription2(s_TestData));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
                s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData,testData.getM_StructureTestData().size() - 1));
                s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1); //Harold canedo lopez bug eliminacion de estructuras automaticas
                index = testData.getTestDataCombination().getM_TestDatas().size(); //new
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(newTestData.getM_TDStructure(),s_TestData));
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData); //new
                ce.addEdit(setNameDescription2(s_TestData));
                String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
                if(names.equals(BusinessRules.TESTDATA_SEPARATOR)){//svonborries_01092006
                	return;
                }
//              Ccastedo...
                String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

                /** nuevo codigo de para las combinaciones faltantes 30 may 2004 harold canedo lopez */
                String preservednames = new String(names);

            /**/

                String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
                int numOfName = -1;
//              HCanedo_06122005_Begin
                int lastValueSize=0;
                StructureTestData stdPopulated=null;
//    HCanedo_06122005_end
                while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
                {
                    numOfName++;
                    ITypeData typeData = new TypeDataLocal();
                    StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                    stdPopulated=std;
                    String name = testDataManager.generateTypeDataName(names);
                    names = CMCharUtils.trimComa(names);
                    names = CMCharUtils.killFirstElement(names);
                    //Ccastedo....
                    String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                    ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                    ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                    //Ccastedo end...

                    int change = value.size();
                    value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(), intervalAmount);
                    values = CMCharUtils.trimComa(values);
                    values = CMCharUtils.killFirstElement(values);
                    /*Hcanedo_18012006_begin
                    typeData.setField(name); // new harold
                    typeData.setName(name);

//                  My adds......................................
                    typeData.setToolVendorOT(individualObjectTypes);
              //      typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
              //      typeData.setTVT(stateTVT);
               		HCanedo_18012006_end*/
                                        /** new 28 may 2004***************************** */
                    deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);

                    /**  */
                    /*Hcanedo18012006_begin
                    typeData.setType(testDataManager.getType(value.firstElement().toString()));
                    typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                    HCanedo18012006_end*/
                    String typedataName = testDataManager.getValue(value.firstElement().toString());
                    
                    
                    /*NEW FOR THE ENHANCEMENT OF FORMULAS AND VARIABLES IN TEST DATA DATE: 01/09/2006 BY SVONBORRIES*/
                    FormulaManager.calculateFormulasOrVariablesInGenerationOfTestData(typedataName, typeData, this);
                    /*//svonborries_30082006_begin
                    if(typedataName.startsWith("$")){
                    	String valueString = VariablesManager.returnImplicitExplicitVariable(typedataName,CMApplication.frame.getGridTDStructure().getTDStructure());
                    	if(valueString.equalsIgnoreCase("")){
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                            typeData.setValue(typedataName);
                    	}
                    	else{
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueString));
                            typeData.setValue(valueString);
                            String formulaValue = typedataName.substring(1);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, formulaValue));
                            typeData.setFormula(formulaValue);
                    	}
                    }
                    else{
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                        typeData.setValue(typedataName);
                    }
                    //svonborries_30082006_end
*/                    
                    //ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataName));
                    //typeData.setValue(typedataName);
                    ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
                    /*HCanedo_18012006_begin
                    typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    HCanedo_18012006_end*/
                    //////////////////////////////////////////////////////////////////////////////
                    ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
                    setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
                    typeData.setGlobal("G");

                    //////////////////////////////////////////////////////////////////////////////
                    value.removeElementAt(0);
                    if (value.size() > 0) {
                        if (change < value.size()) {
//    HCanedo_06122005_begin
                        	Vector missingValues= new Vector();
                        //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                        	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//    HCanedo_06122005_end
                        		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                        		aux.append(","); //$NON-NLS-1$
                        		aux.append(Integer.toString(numOfName));
                        		value.removeElementAt(indexValue);
                        		missingValues.insertElementAt(aux,0);
                        		//value.insertElementAt(aux.toString(), indexValue);
//    HCanedo_06122005_begin
                        	}
                        	value.addElement(missingValues);
                        	lastValueSize=value.size();
//    HCanedo_06122005_end
                        }
                    }
                    ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit(std,typeData));
                    typeData.setStructureTestData(std);
                    std.getTypeData().addElement(typeData);
                }
                //HCanedo_18012006_Begin
                if(stdPopulated != null){
                	ce.addEdit(setTypeDataReferences(stdPopulated,p_CreatedStructure));
                }
                //HCanedo_18012006_End
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit(testData,newTestData));
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData);
                if (value.size() > 0) {
                /*	j=*/

                    ce.addEdit(generateCombinationTables(value, index,p_CreatedStructure));
                }

                /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
                values = CMCharUtils.trimComa(values);
                if (!values.trim().equals("")) {
                    ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase,p_CreatedStructure,intervalAmount));
                }
            }
        }

        /*
     	update(0);//CMIndexTestDataUpdate.getInstance().getIndex());*/
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTestCaseInTDStructureModelEdit(testData,testCaseIntestData));
        testData.setM_TestCaseInTDStructure(testCaseIntestData);
        update(0);
        System.gc();
    }

    //hcanedo_21_09_2004_begin
    @SuppressWarnings("unchecked")
	public void GenerateTDStructureForFaultyTestCase(StructureTestData p_CreatedStructure,UndoableEdit p_ce, int intervalAmount) {
    	CMCompoundEdit ce;
    	if(p_ce == null)
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) p_ce;
    	testCaseIntestData = new Vector();
        Vector value = new Vector();
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure = testData.getM_TestObject().getStructure();
        int j = 0;
        int index = 0;
//        int intervalAmount=2;
//        CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
//        cmd.setVisible(true);
//        if(cmd.isOkSelected()){
//        	intervalAmount=cmd.getAmountOfIntervalValues();
//        }
        for (int i = 0; i < m_Structure.getLnkTestCases().size(); i++) {
            TestCase testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().elementAt(i));
            if (testCase.getStateName().equals("F")) //$NON-NLS-1$
            {
                TDStructure newTDStructure = new TDStructure();
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestdataCOmbinationToTDStructureModelEdit(newTDStructure,testData.getTestDataCombination()));
                newTDStructure.setTestDataCombination(testData.getTestDataCombination());
                TestData newTestData = new TestData(newTDStructure);
                String testdataName = newTestData.generateName(testData,ce);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameTestDataModelEdit(newTestData,testdataName));
                newTestData.setName(testdataName);
                String tdDescription = newTestData.generateDescription();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionTestDataModelEdit(newTestData,tdDescription));
                newTestData.setDescription(tdDescription);
                String testcaseinTD = new String(testCase.getName()) + new String(testCase.getStateName());
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestCaseInTestDataModelEdit(newTestData,testcaseinTD));
                newTestData.setM_TestCaseinTestData(testcaseinTD);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeRiskLevelInTestDataModelEdit(newTestData,testCase.getRiskLevel()));
                newTestData.setM_RiskLevel(testCase.getRiskLevel());
                StructureTestData s_TestData = new StructureTestData();

                ce.addEdit(setNameDescription2(s_TestData));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
                s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData,testData.getM_StructureTestData().size() - 1));
                s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1);
                index = testData.getTestDataCombination().getM_TestDatas().size();
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(newTestData.getM_TDStructure(),s_TestData));
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData);
                ce.addEdit(setNameDescription2(s_TestData));
                String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
                String preservednames = new String(names);
                if(names.equals(BusinessRules.TESTDATA_SEPARATOR)){//svonborries_01092006
                	return;
                }
//              My add...
                String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

                String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
                int numOfName = -1;
//              HCanedo_06122005_Begin
                int lastValueSize=0;
                StructureTestData stdPopulated=null;
//    HCanedo_06122005_end
                while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //$svonborries_01092006
                {
                    numOfName++;
                    ITypeData typeData = new TypeDataLocal();
                    StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                    stdPopulated= std;
                    String name = testDataManager.generateTypeDataName(names);
                    names = CMCharUtils.trimComa(names);
                    names = CMCharUtils.killFirstElement(names);

                    //My adds..........
                    String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                    ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                    ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                    //My adds end........

                    int change = value.size();
                    value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(),intervalAmount);
                    values = CMCharUtils.trimComa(values);
                    values = CMCharUtils.killFirstElement(values);
                    /*HCanedo_18012006_Begin
                    typeData.setField(name);
                    typeData.setName(name);

//                  My adds......................................
                    typeData.setToolVendorOT(individualObjectTypes);
              //      typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
             //       typeData.setTVT(stateTVT);
              		HCanedo_18012006_end*/
                    deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);
                    /*HCanedo_18012006_Begin
                    typeData.setType(testDataManager.getType(value.firstElement().toString()));
                    typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                    HCanedo_18012006_end*/
                    String typedataValue = testDataManager.getValue(value.firstElement().toString());
                    
                    
                    /*NEW FOR THE ENHANCEMENT OF FORMULAS AND VARIABLES IN TEST DATA DATE: 01/09/2006 BY SVONBORRIES*/
                    FormulaManager.calculateFormulasOrVariablesInGenerationOfTestData(typedataValue, typeData, this);
                    /*//svonborries_30082006_begin
                    if(typedataValue.startsWith("$")){
                    	String valueString = VariablesManager.returnImplicitExplicitVariable(typedataValue,CMApplication.frame.getGridTDStructure().getTDStructure());
                    	if(valueString.equalsIgnoreCase("")){
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataValue));
                            typeData.setValue(typedataValue);
                    	}
                    	else{
                    		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,valueString));
                            typeData.setValue(valueString);
                            String formulaValue = typedataValue.substring(1);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(typeData, formulaValue));
                            typeData.setFormula(formulaValue);
                    	}
                    }
                    else{
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataValue));
                        typeData.setValue(typedataValue);
                    }
                    //svonborries_30082006_end
*/                    
                    //ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,typedataValue));
                    //typeData.setValue(typedataValue);
                    /*HCanedo_18012006_Begin
                    typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    HCanedo_18012006_end*/
                    //////////////////////////////////////////////////////////////////////////////
                    ////////nuevo codigo para referencias gloabales 08/07/04///////////////////////
                    setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),ce);
                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typeData,"G"));
                    typeData.setGlobal("G");

                    value.removeElementAt(0);
                    if (value.size() > 0) {
                        if (change < value.size()) {
//    HCanedo_06122005_begin
                        	Vector missingValues= new Vector();
                        //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                        	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//    HCanedo_06122005_end
                        		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                        		aux.append(","); //$NON-NLS-1$
                        		aux.append(Integer.toString(numOfName));
                        		value.removeElementAt(indexValue);
                        		missingValues.insertElementAt(aux,0);
                        		//value.insertElementAt(aux.toString(), indexValue);
//    HCanedo_06122005_begin
                        	}
                        	value.addElement(missingValues);
                        	lastValueSize=value.size();
//    HCanedo_06122005_end
                        }
                    }
                    ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit(std,typeData));
                    typeData.setStructureTestData(std);
                    std.getTypeData().addElement(typeData);

                }
                //HCanedo_18012006_Begin
                if(stdPopulated!= null){
                	ce.addEdit(setTypeDataReferences(stdPopulated,p_CreatedStructure));
                }
                //HCanedo_18012006_end
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTestDataToTDStructureModelEdit(testData,newTestData));
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData);
                if (value.size() > 0) {
                    ce.addEdit(generateCombinationTables(value, index,p_CreatedStructure));
                }

                /** nuevo codigo para las para mas de una combinacion 30 may 2004 harold canedo */
                values = CMCharUtils.trimComa(values);
                if (!values.trim().equals("")) {
                    ce.addEdit(combinationsValuesInSameTestCase(preservednames, values, testCase,p_CreatedStructure,intervalAmount));
                }
            }
        }
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTestCaseInTDStructureModelEdit(testData,testCaseIntestData));
        testData.setM_TestCaseInTDStructure(testCaseIntestData);
        update(0);
        System.gc();
    }

    //hcanedo_21_09_2004_end
    void deleteAllViews() {
        int numOfRows = cmGridModel.getRowCount();
        cmGridModel.removeRows(0, numOfRows);           
    }

    public void deleteTestCaseInTDStructure() {
        testCaseIntestData.removeAllElements();
    }

    public void setColumnWidths() {
        this.setColumnWidth(0, 30);
        this.setColumnWidth(1, 41);
        this.setColumnWidth(2, 93);
        this.setColumnWidth(3, 93);
        this.setColumnWidth(4, 93);
        this.setColumnWidth(5, 45);
        this.setColumnWidth(6, 40);
        this.setColumnWidth(7, 40);
        this.setColumnWidth(8, 93);
        this.setColumnWidth(9, 93);
        this.setColumnWidth(10,93);//619);
        this.setColumnWidth(11,93);


    }

    public CMFrameView getFrame() {
        return cmFrame;
    }

    public void eventGridMouseEntered(GridEvent e) {
    }

    public void eventEditingStarted(GridEditingEvent e) {       
        if( !isEnabled() )  return;
        int row = e.getRow();
        int column = e.getColumn();
        editingObject = getCellObjectAt(row,column);        
    }

    @SuppressWarnings("static-access")
	public void eventEditingStopped1(GridEditingEvent e) {
        int row = e.getRow();
        int column = e.getColumn();
        boolean isCancelEditValue = false;
        boolean isTestDataPanelSelected = cmFrame.isIsPanelTestDataSelected();
        CMCompoundEdit ce = null;
        String formatedValue = new String();
        String oldValue = new String();
        int p_index = CMIndexTDStructureUpdate.getInstance().getIndex();
        if (editingObject == null) {
            return;
        }
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));

        //new harold
        if (editingObject instanceof CMCellTDStructureKey) {
            Object value = cmGridModel.getValueAt(row, column);
        	if(s.getKey().equalsIgnoreCase((String) value))
        		return;
            setUndoRedoMediatorCell(p_index, new String(s.getKey()), (String)value, row, column, isTestDataPanelSelected,null);
        } //end
        else
            //new harold
            /*if (editingObject instanceof CMCellTDStructureField) {
                Object value = cmGridModel.getValueAt(row, column);
            	if(s.getField().equalsIgnoreCase((String) value))
            		return;
                if (uniqueValueFieldName(std, (String)value, editingObject, cmGridModel.numOfCell(row))) {
                    setUndoRedoMediatorCell(p_index,
                        new String(s.getField()), (String)value, row, column, isTestDataPanelSelected,null);
                }
                else {
                    JOptionPane.showMessageDialog(cmFrame, CMMessages.getString("TESTDATA_NAME_FIELD_EQUALS_MENSSAGE_ERROR"),
                        CMMessages.getString("TESTDATA_IMPORT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                }
        }*/ //end
       /* else if (editingObject instanceof CMCellTDStructureName) {
            Object value = cmGridModel.getValueAt(row, column);
        	if(s.getName().equalsIgnoreCase((String) value))
        		return;
            if (uniqueValueFieldName(std, (String)value, editingObject, cmGridModel.numOfCell(row))) {
                setUndoRedoMediatorCell(p_index, new String(s.getName()), (String)value, row, column, isTestDataPanelSelected,null);
            }
            else {
                JOptionPane.showMessageDialog(cmFrame, CMMessages.getString("TESTDATA_NAME_FIELD_EQUALS_MENSSAGE_ERROR"),
                    CMMessages.getString("TESTDATA_IMPORT_TITLE_ERROR"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
            }
        }*/
        //My add..............
        /*else if (editingObject instanceof CMCellTDStructureObjectTypes) {
        	
        	Object obj = cmGridModel.getCellObjectAt(row, column);
        	CMCellTDStructureObjectTypes selectedItem = (CMCellTDStructureObjectTypes)obj;//cmGridModel.getCellObjectAt(row, column);

            if (selectedItem != null){
            	String m_OT = new String(s.getToolVendorOT());
            	String newOT = (String)selectedItem.toString();
            	setUndoRedoMediatorCell(p_index, m_OT, newOT, row, column, isTestDataPanelSelected,null);
            }
        }*/ //cc 15.09.06
       /* if (editingObject instanceof CMCellTDStructureNewColumn) {
            Object value = cmGridModel.getValueAt(row, column);
            int i= column-5;
            String nc=s.getNewColumns().elementAt(i).toString();
            setUndoRedoMediatorCell(p_index, new String(nc), (String)value, row, column, isTestDataPanelSelected,null);
        }*/
        //My add ends...........................
        /* else if (editingObject instanceof CMCellTDStructureLength) {
            Object value = cmGridModel.getValueAt(row, column);
        	if(s.getLength().equalsIgnoreCase((String) value))
        		return;
            setUndoRedoMediatorCell(p_index, new String(s.getLength()), (String)value, row, column, isTestDataPanelSelected,null);
        }
        else if (editingObject instanceof CMCellTDStructurePrefix) {
            Object value = cmGridModel.getValueAt(row, column);
        	if(s.getPrefix().equalsIgnoreCase((String) value))
        		return;
            setUndoRedoMediatorCell(p_index, new String(s.getPrefix()), (String)value, row, column, isTestDataPanelSelected,null);
        }
        else if (editingObject instanceof CMCellTDStructureSuffix) {
            Object value = cmGridModel.getValueAt(row, column);
        	if(s.getSuffix().equalsIgnoreCase((String) value))
        		return;
            setUndoRedoMediatorCell(p_index, new String(s.getSuffix()), (String)value, row, column, isTestDataPanelSelected,null);
        }
        else if (editingObject instanceof CMCellTDStructureClassState) {
            CMCellTDStructureClassState selectedItem = (CMCellTDStructureClassState)getCellObjectAt(row, column);
            setUndoRedoMediatorCell(p_index,
                new String(s.getType()), (String)selectedItem.toString(), row, column, isTestDataPanelSelected,null);
        }
        else if (editingObject instanceof CMCellTDStructureFormula) {
            Object value = cmGridModel.getValueAt(row, column);
        	//if(s.getStringFormula().equalsIgnoreCase((String) value))
            if(s.getFormula().equalsIgnoreCase((String) value))
        		return;
            //setUndoRedoMediatorCell(p_index, new String(s.getStringFormula()), (String)value, row, column, isTestDataPanelSelected,null);
            setUndoRedoMediatorCell(p_index, new String(s.getFormula()), (String)value, row, column, isTestDataPanelSelected,null);
        }*/
        if (editingObject instanceof CMCellTDStructureValue) {

        	ce = new CMCompoundEdit();
        	ce.addEdit(CMViewEditFactory.INSTANCE.createChangeIndexInCMIndexTDStructureUpdate(CMIndexTDStructureUpdate.getInstance(),CMIndexTDStructureUpdate.getInstance().getIndex()));
            Object value = cmGridModel.getValueAt(row, column);
            //if (isTestDataPanelSelected && (s.getGlobal().equals("G") || !s.getStringFormula().trim().equals("")) &&
            if (isTestDataPanelSelected && (s.getGlobal().equals("G") || !s.getFormula().trim().equals("")) &&
                //!s.getStringValue().equals(value)) {
            		!s.getFormattedValue().equals(value)) {
                    int confirmFormula = JOptionPane.YES_OPTION;
                    int confirmGlobal = JOptionPane.YES_OPTION;
                    //if (!s.getStringFormula().trim().equals("")) {
                    if (!s.getFormula().trim().equals("")) {
                        confirmFormula = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("FORMULA_INCONSISTENT_DELETE"),
                            CMMessages.getString("TESTDATA_TITLE_ERROR"), JOptionPane.YES_NO_OPTION);
                    }
                    if (confirmFormula == JOptionPane.YES_OPTION && s.getGlobal().equals("G")) {
                        confirmGlobal = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("GLOBAL_REFERENCE_DELETE"),
                            CMMessages.getString("TESTDATA_TITLE_ERROR"), JOptionPane.YES_NO_OPTION);
                    }
                    if (confirmFormula == JOptionPane.YES_OPTION && confirmGlobal == JOptionPane.YES_OPTION) {
                        //if (!s.getStringFormula().trim().equals("")) {
                    	if (!s.getFormula().trim().equals("")) {
                        	setColumnSelected(getColumnSelected()-1);
                        	
                            cmGridModel.setValueAt( new CMCellTDStructureValue(this, s), row, column);
                            	TDStructureManager.deleteTypeDataReferenceInFormulas();
                            	ce.addEdit(deleteAllTypeDataInTestDataToObserverVariable());

                            	setFormulaEditValue("", (String)value /*CMMessages.getString("TESTDATA_UNKNOWN")*/,
                            			CMMessages.getString("TESTDATA_CHAR"), BusinessRules.FORMULAS_FORMAT_STRING, new TestDataFormat(),ce);

                            	setColumnSelected(getColumnSelected()+1);
                        }
                        else {
                            ITypeData oldTypeData = (ITypeData)s.clone();
                            ITypeData newTypeData = (ITypeData)s.clone();
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(newTypeData,""));
                            newTypeData.setGlobal("");
                            
                            CMDefaultValue defaultValue = new CMDefaultValue((String)value);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(newTypeData,defaultValue));
                            newTypeData.setValue(defaultValue);
                            //newTypeData.setStringValue((String)value);
                            //////////////////////////////////////////////////////////////////
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(newTypeData,CMMessages.getString("TESTDATA_CHAR")));
                            newTypeData.setType(CMMessages.getString("TESTDATA_CHAR"));
                            //My add....................................VERRRRRRrrrrrrrrrrrrrrrrrrrrr
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeToolVendorOTInTypeDataModelEdit(newTypeData,newTypeData.getStateOT()/*ccastedo 27.09.06 newTypeData.getToolVendorOT()*/));
                           //ccastedo 26.09.06 newTypeData.setToolVendorOT(/*selectedItemOT.getDefaultValue(*/newTypeData.getToolVendorOT()/*)*/);
                            newTypeData.setStateOT(newTypeData.getStateOT());
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNewColumnsInTypeDataModelEdit(newTypeData,newTypeData.getNewColumns()));
                            newTypeData.setNewColumns(newTypeData.getNewColumns());
              //              newTypeData.setStateOT(indexFromjComboBoxOT(newTypeData.getToolVendorOT()));
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(newTypeData,BusinessRules.FORMULAS_FORMAT_STRING));
                            newTypeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                            TestDataFormat format = new TestDataFormat();
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(newTypeData,format));
                            newTypeData.setFormatter(format);
                            /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTestDataFormatModelEdit(newTypeData.getM_Formatter(),newTypeData.getStringValue()));
                            newTypeData.getM_Formatter().setValue(newTypeData.getStringValue());*/
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTestDataFormatModelEdit(newTypeData.getFormatter(),newTypeData.getFormattedValue()));
                            newTypeData.getFormatter().setValue(newTypeData.getFormattedValue());
                            CMCellTDStructureClassState selectedItem =
                                (CMCellTDStructureClassState)getCellObjectAt(row, column - 6);
                            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(newTypeData,selectedItem.getDefaultValue(newTypeData.getTypeName())));
                            newTypeData.setLength(selectedItem.getDefaultValue(newTypeData.getTypeName()));

                            int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
                            int indexStructure = CMIndexTDStructureUpdate.getInstance().getIndex();
                            int numofTable = CMIndexTDStructureUpdate.getInstance().getnumOfTable();
                            int numofRow = CMIndexTDStructureUpdate.getInstance().getnumOfRow();
                            cmFrame.getM_CMUndoMediator().editInValidGlobalReferenceAndFormulainTestData(cmFrame.getPanelTestDataView(),
                                cmFrame.getGridTDStructure(),
                                indexTestData, indexStructure, oldTypeData, newTypeData, numofTable, numofRow, row, column,
                                cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TESTDATA"),ce);
                            //setUndoRedoMediatorCell(p_index,new
                            // String(s.getValue()),CMFormatFactory.getInstance().applyAnyFormat(s.getFormat(),(String)value),row,
                            // column,isTestDataPanelSelected);
                        }
                        CMDefaultValue defaultValue = new CMDefaultValue((String)value);
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
                        s.setValue(defaultValue);
//                        String valueFormated = CMFormatFactory.applyAnyFormat(s.getM_Formatter(), (String)value, s.getM_Formatter());
//                        s.setStringValue(valueFormated);
                        //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column);
                        
                        cmGridModel.setValueAt(new CMCellTDStructureValue(this,s), row, column);
                        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(s,""));
                        s.setGlobal("");                       
                       
                        cmGridModel.setValueAt(new CMCellTDStructureGlobal(this, s), row, 1);
                        ce.addEdit(cmFrame.getGridTDStructure().ifcancelReferenceInTestDataCancelinStructure(std.getGlobalIndex(), row - 1));
                    }
                    else {
                        //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column);
                    	
                    	cmGridModel.setValueAt(new CMCellTDStructureValue(this,s), row, column);
                    }
            }
            else {
            	//svonborries_14032006_begin fixed to adapt undo/redo
                //if (!s.getFormula().trim().equals("") && !s.getStringValue().equals(value)) {
            	//if (!s.getStringFormula().trim().equals("") && !s.getFormattedValue().equals(value)) {
            	if (!s.getFormula().trim().equals("") && !s.getFormattedValue().equals(value)) {
                    int confirmFormula = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("FORMULA_INCONSISTENT_DELETE"),
                        CMMessages.getString("TESTDATA_TITLE_ERROR"), JOptionPane.YES_NO_OPTION);
                    if (confirmFormula == JOptionPane.YES_OPTION) {
                    	setColumnSelected(getColumnSelected()-1);
                    	                   	
                    	cmGridModel.setValueAt(new CMCellTDStructureValue(this,s), row, column);
                       
                        ce.addEdit(TDStructureManager.deleteTypeDataReferenceInFormulas());
                    	ce.addEdit(deleteAllTypeDataInTestDataToObserverVariable());
                        setFormula("", (String)value, CMMessages.getString("TESTDATA_CHAR"), BusinessRules.FORMULAS_FORMAT_STRING, new TestDataFormat(),ce); //$NON-NLS-1$
                        setColumnSelected(getColumnSelected()+1);
                    }
                    else {
                        isCancelEditValue = true;
                        //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column);
                        
                    	cmGridModel.setValueAt(new CMCellTDStructureValue(this,s), row, column);                       
                    }
                }//svonborries_14032006_end fixed to adapt undo/redo
                else {
                	//if(s.getStringValue().equalsIgnoreCase((String) value))
                	if(s.getFormattedValue().equalsIgnoreCase((String) value))
                		return;
                	//formatedValue = CMFormatFactory.applyAnyFormat(s.getM_Formatter(), (String)value, s.getM_Formatter());
                	//oldValue = s.getStringValue();
                	oldValue = s.getFormattedValue();
                	CMDefaultValue defaultValue = new CMDefaultValue((String)value);
                	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
                    s.setValue(defaultValue);
//                	s.setStringValue(formatedValue);
                	//cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column);
                    
                    cmGridModel.setValueAt(new CMCellTDStructureValue(this,s), row, column);
                    
                	if(cmFrame.isIsPanelTestDataSelected()){
                    	setUndoRedoMediatorCell(p_index, oldValue, formatedValue,
                                row, column, isTestDataPanelSelected,ce);
                	}
                }
            }
        }
        else
            //new harold
            if (editingObject instanceof CMCellTDStructureFormat) {
                Object value = cmGridModel.getValueAt(row, column);
            	if(s.getFormat().equalsIgnoreCase((String) value))
            		return;
                setUndoRedoMediatorCell(p_index,
                    new String(s.getFormat()), (String)value, row, column, isTestDataPanelSelected,null);
        } //end
        if (!cmFrame.isIsPanelTestDataSelected() && !isCancelEditValue) {
        	if(ce == null)
        		ce = new CMCompoundEdit();
            int indexGlobalStructure = std.getGlobalIndex();
            int numofTypeData = cmGridModel.numOfCell(row);
            Object value = cmGridModel.getValueAt(row, column);
            ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                editingObject, indexGlobalStructure, numofTypeData, value,null, row, column));
        	setUndoRedoMediatorCell(p_index, oldValue, formatedValue,
                    row, column, isTestDataPanelSelected,ce);
        }
        setRowSelected(e.getRow());
        setColumnSelected(e.getColumn());
        thisFocusGained(null);
    }

    public void eventEditingCanceled(GridEditingEvent e) { }

    public void setUndoRedoFormatChange(int row, int column, UndoableEdit p_ce){
    		setundoredoFormatMediator(row, column+1,p_ce);
    }
    public void setundoredoFormatMediator(int row, int column, UndoableEdit p_ce) {
        int indexstructure = CMIndexTDStructureUpdate.getInstance().getIndex();
         cmFrame.getM_CMUndoMediator().cancelAssignFormatinTDStructureEdit(this, indexstructure, row, column,
                    cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"),p_ce);
    }
    /* nuevo codigo para la asignacion de valores globales 29 may 2004 harold canedo lopez			*/

    /**  */
    /**
     * @param p_testDataCombinations
     * @param p_editingObject
     * @param p_indexGlobalStructure
     * @param p_numofTypedata
     * @param p_value
     * @param p_Formatter
     * @param p_row
     * @param p_column
     * @author svonborries
     * @version: Modify to adapt to the new Undo/Redo Model
     * @return
     */
    @SuppressWarnings({"unchecked","static-access"})
	public CMCompoundEdit setReferenceValuesForGlobalStructure(TestDataCombinations p_testDataCombinations, Object p_editingObject,
        int p_indexGlobalStructure, int p_numofTypedata, Object p_value, TestDataFormat p_Formatter, int p_row, int p_column) {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	if(!(p_editingObject instanceof CMCellTDStructureSuffix)&&!(p_editingObject instanceof CMCellTDStructureField)&&!(p_editingObject instanceof CMCellTDStructureFormat)
    			&&!(p_editingObject instanceof CMCellTDStructureGlobal)&&!(p_editingObject instanceof CMCellTDStructureKey)
    			&&!(p_editingObject instanceof CMCellTDStructureLength)&&!(p_editingObject instanceof CMCellTDStructureName)
    			&&!(p_editingObject instanceof CMCellTDStructureNewColumn)&&!(p_editingObject instanceof CMCellTDStructureObjectTypes)
    			&&!(p_editingObject instanceof CMCellTDStructurePrefix)&&!(p_editingObject instanceof CMCellTDStructureClassState)){
            for (int i = 0; i < p_testDataCombinations.getM_TestDatas().size(); i++) {
                TestData m_td = (TestData)p_testDataCombinations.getM_TestDatas().elementAt(i);
                for (int j = 0; j < m_td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                    StructureTestData m_tds = (StructureTestData)m_td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                    if (m_tds.getGlobalIndex() == p_indexGlobalStructure) {
                        ITypeData s = (ITypeData)m_tds.getTypeData().elementAt(p_numofTypedata);
                        if (s.getGlobal().equals("G")) {
                            if (p_editingObject instanceof CMCellTDStructureFormula) {
                            	/*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(s,(String)p_value));
                                s.setFormula((String)p_value);*/
                            }
                            else if (p_editingObject instanceof CMCellTDStructureValue) {
                            	CMDefaultValue defaultValue = new CMDefaultValue((String)p_value);
                            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
                                s.setValue(defaultValue);
//                                s.setStringValue((String)p_value);
                            }
                            else if (p_editingObject instanceof Object) {
                            	try {
                            		/*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(s,((Boolean)p_value).booleanValue()));
                                    s.setisFormula(((Boolean)p_value).booleanValue());*/
								} catch (Exception e) {
									Logger.getLogger(this.getClass()).error("return editingObject: "+p_editingObject);
								}
                            }
                        }

                        /** new code for permanent reference  in fields non editing in testdata */
                        else {
                            if (p_editingObject instanceof CMCellTDStructureField) {
                                if (uniqueValueFieldName(m_tds, (String)p_value, p_editingObject,
                                    cmGridModel.numOfCell(p_row)))
                                		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFieldInTypeDataModelEdit(s,(String)p_value));
                                        s.setField((String)p_value);
                            }
                            else if (p_editingObject instanceof CMCellTDStructureName) {
                                if (uniqueValueFieldName(m_tds, (String)p_value, p_editingObject,
                                    cmGridModel.numOfCell(p_row)))
                                		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameInTypeDataModelEdit(s,(String)p_value));
                                        s.setName((String)p_value);
                            }
                            //My add
                            else if (p_editingObject instanceof CMCellTDStructureObjectTypes) {
                            	/*s.setToolVendorOT((String)p_value);
                            //	s.setStateOT(indexFromjComboBoxOT((String)p_value));*/
                            	CMCellTDStructureObjectTypes selectedItem =
                                    (CMCellTDStructureObjectTypes)getCellObjectAt(p_row, p_column);
                             	if (selectedItem != null){
                             		/*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeToolVendorOTInTypeDataModelEdit(s,(String)selectedItem.toString()));
                             		s.setToolVendorOT((String)selectedItem.toString());*///ccastedo 27.09.06
                             		ce.addEdit(CMModelEditFactory.INSTANCE.createChangeToolVendorOTInTypeDataModelEdit(s,selectedItem.getStateOT()));
                             		s.setStateOT(selectedItem.getStateOT());
                             		//s.setStateOT(indexFromjComboBoxOT((String)p_value));
                             	}


                            }//My adds end*/
                            else if (p_editingObject instanceof CMCellTDStructureNewColumn) {
                            	int pos = p_column-5;
                            	Vector columns = new Vector();
                                columns = (Vector) s.getNewColumns().clone();
                                columns.setElementAt((String)p_value,pos);
                                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNewColumnsInTypeDataModelEdit(s,columns));
                                s.setNewColumns(columns);
                            }

                            else if (p_editingObject instanceof CMCellTDStructureLength) {
                            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,(String)p_value));
                                s.setLength((String)p_value);
                            }
                            else if (p_editingObject instanceof CMCellTDStructurePrefix) {
                            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangePrefixInTypeDataModelEdit(s,(String)p_value));
                                s.setPrefix((String)p_value);
                            }
                            else if (p_editingObject instanceof CMCellTDStructureSuffix) {
                            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeSuffixInTypeDataModelEdit(s,(String)p_value));
                                s.setSuffix((String)p_value);
                            }
                            else if (p_editingObject instanceof CMCellTDStructureClassState) {
                            	CMCellTDStructureClassState selectedItem =
                                    (CMCellTDStructureClassState)getCellObjectAt(p_row, p_column);
                                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(s,(String)selectedItem.toString()));
                                s.setType((String)selectedItem.toString());
                                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,selectedItem.getDefaultValue(s.getTypeName())));
                                s.setLength(selectedItem.getDefaultValue(s.getTypeName()));
                            }
                            else if (p_editingObject instanceof CMCellTDStructureFormat) {
                            	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,(String)p_value));
                                s.setFormat((String)p_value);
                                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
                                s.setFormatter(p_Formatter);
                            } //end

						/**/
                        }
                    }
                }
            }
    }
            return ce;
    }

    public void setReferenceFormatForGlobalStructure(TestDataCombinations p_testDataCombinations, int p_indexGlobalStructure,
        int p_numofTypedata, Object p_value,TestDataFormat p_Formatter,String p_valueString) {
            for (int i = 0; i < p_testDataCombinations.getM_TestDatas().size(); i++) {
                TestData m_td = (TestData)p_testDataCombinations.getM_TestDatas().elementAt(i);
                for (int j = 0; j < m_td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                    StructureTestData m_tds = (StructureTestData)m_td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                    if (m_tds.getGlobalIndex() == p_indexGlobalStructure) {
                        ITypeData s = (ITypeData)m_tds.getTypeData().elementAt(p_numofTypedata);
                        if (s.getGlobal().equals("G")) {
                            s.setFormat((String)p_value);
                            s.setFormatter(p_Formatter);
                            CMDefaultValue defaultValue = new CMDefaultValue(p_valueString);
                            s.setValue(defaultValue);
                            //TODO ADD TO THE COMPOUND
                            //s.setStringValue(p_valueString);
                        }

                        /** new permanent reference of format in test data */
                        else {
                            s.setFormat((String)p_value);
                            s.setFormatter(p_Formatter);
                        }

                        /**/
                    }
                }
            }
    }
    public boolean isPosibleApplyFormatInAllTestData(TestDataCombinations p_testDataCombinations, int p_indexGlobalStructure,
            int p_numofTypedata, TestDataFormat p_Formatter){
    	boolean isposible=true;
    	for (int i = 0; i < p_testDataCombinations.getM_TestDatas().size(); i++) {
            TestData m_td = (TestData)p_testDataCombinations.getM_TestDatas().elementAt(i);
            for (int j = 0; j < m_td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                StructureTestData m_tds = (StructureTestData)m_td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                if (m_tds.getGlobalIndex() == p_indexGlobalStructure) {
                    ITypeData s = (ITypeData)m_tds.getTypeData().elementAt(p_numofTypedata);
                    //CMFormatFactory.applyAnyFormat(p_Formatter,s.getStringValue(),s.getM_Formatter());
                    s.getFormattedValue();
                    if(!CMFormatFactory.isSuccessFormated()){
                    	int confirmation = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("QUESTION_TESTDATA_ASSIGN_FORMAT"),
                                CMMessages.getString("TESTDATA_ASSIGN_FORMAT_TITLE_ERROR"), JOptionPane.YES_NO_OPTION); //$NON-NLS-1$ //$NON-NLS-2$
                        if (confirmation == JOptionPane.YES_OPTION) {
                           	return true;
                        }
                        else {
                           	return false;
                        }
                    }

                }
            }
    	}
    	return isposible;
    }
//    public UndoableEdit applyFormatInAllTestData(TestDataCombinations p_testDataCombinations, int p_indexGlobalStructure,
//            int p_numofTypedata, TestDataFormat p_Formatter, String p_AboslutePath){
//    	CMCompoundEdit ce = new CMCompoundEdit();//svonborries_14032006
//    	boolean showReport= false;
//    	TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
//
//    	StringBuffer testDatasNotFormatter= new StringBuffer();
//    	testDatasNotFormatter.append("<?xml version=" + '"' + "1.0" + '"' + " encoding=" + '"' + "iso-8859-1" + '"' + " ?>"); //$NON-NLS-1$
//    	testDatasNotFormatter.append(System.getProperty("line.separator"));
//    	testDatasNotFormatter.append("<reportFormats> ");
//    	testDatasNotFormatter.append(System.getProperty("line.separator"));
//    	testDatasNotFormatter.append(BusinessRules.REPORT_HEAD_TITLE_BEGIN);
//    	testDatasNotFormatter.append(CMMessages.getString("REPORT_HEAD_TITLE_FORMATS")+" - "+model.BusinessRules.APPLICATIONNAME+" "+model.BusinessRules.APPLICATIONVERSION); //$NON-NLS-1$
//    	testDatasNotFormatter.append(BusinessRules.REPORT_HEAD_TITLE_END);
//    	testDatasNotFormatter.append(System.getProperty("line.separator"));
//    	testDatasNotFormatter.append(BusinessRules.REPORT_TITLE_BEGIN);
//    	testDatasNotFormatter.append(CMMessages.getString("REPORT_HEAD_TITLE_FORMATS")); //$NON-NLS-1$
//        testDatasNotFormatter.append(BusinessRules.REPORT_TITLE_END);
//        testDatasNotFormatter.append(System.getProperty("line.separator"));
//    	testDatasNotFormatter.append("<HeaderImg>"); //$NON-NLS-1$
//    	testDatasNotFormatter.append(BusinessRules.REPORT_IMAGEFLD+"/"+CMIcon.CASEMAKER_LOGO.getFilename());
//    	testDatasNotFormatter.append("</HeaderImg>"); //$NON-NLS-1$
//    	testDatasNotFormatter.append(System.getProperty("line.separator")); //$NON-NLS-1$
//    	testDatasNotFormatter.append(BusinessRules.REPORT_USER_LABEL_BEGIN);
//    	testDatasNotFormatter.append(CMMessages.getString("REPORT_USER_LABEL")); //$NON-NLS-1$
//    	testDatasNotFormatter.append(BusinessRules.REPORT_USER_LABEL_END);
//    	testDatasNotFormatter.append(BusinessRules.REPORT_USER_VALUE_BEGIN);
//        String userName = System.getProperty("user.name"); //$NON-NLS-1$
//        if (userName != null) {
//        	testDatasNotFormatter.append(testDataManager.changeReservedCharacterInXML(userName));
//        }
//        testDatasNotFormatter.append(BusinessRules.REPORT_USER_VALUE_END);
//        testDatasNotFormatter.append(System.getProperty("line.separator")); //$NON-NLS-1$
//        testDatasNotFormatter.append(BusinessRules.REPORT_DATE_LABEL_BEGIN);
//        testDatasNotFormatter.append(CMMessages.getString("REPORT_DATE_LABEL")); //$NON-NLS-1$
//        testDatasNotFormatter.append(BusinessRules.REPORT_DATE_LABEL_END);
//    	testDatasNotFormatter.append("<ActualDate>"); //$NON-NLS-1$
//        Date date = new java.util.Date();
//        testDatasNotFormatter.append(date.toString());
//        testDatasNotFormatter.append("</ActualDate>"); //$NON-NLS-1$
//        testDatasNotFormatter.append(System.getProperty("line.separator"));
//        testDatasNotFormatter.append("<TitleFormatLine TDName=\""+CMMessages.getString("REPORT_FORMAT_LABEL_TDNAME")+"\" SName=\""+CMMessages.getString("REPORT_FORMAT_LABEL_SNAME")+"\" SNumber=\""+CMMessages.getString("REPORT_FORMAT_LABEL_SNUMBER")+"\" SValue=\""+CMMessages.getString("REPORT_FORMAT_LABEL_SVALUE")+"\" SFormat=\""+CMMessages.getString("REPORT_FORMAT_LABEL_SFORMAT")+"\" />");
//        testDatasNotFormatter.append(System.getProperty("line.separator"));
//    	for (int i = 0; i < p_testDataCombinations.getM_TestDatas().size(); i++) {
//            TestData m_td = (TestData)p_testDataCombinations.getM_TestDatas().elementAt(i);
//            for (int j = 0; j < m_td.getM_TDStructure().getM_StructureTestData().size(); j++) {
//                StructureTestData m_tds = (StructureTestData)m_td.getM_TDStructure().getM_StructureTestData().elementAt(j);
//                if (m_tds.getGlobalIndex() == p_indexGlobalStructure) {
//                    ITypeData s = (ITypeData)m_tds.getTypeData().elementAt(p_numofTypedata);
//                    //String valueresult=CMFormatFactory.applyAnyFormat(p_Formatter,s.getStringValue(),s.getM_Formatter());
//                    String valueresult=s.getFormattedValue();
//                    if(!CMFormatFactory.isSuccessFormated()){
//                    	showReport=true;
//                    	//testDatasNotFormatter.append("<FormatLine TDName=\""+m_td.getName()+"\" SName=\""+m_tds.getName()+"\" SNumber=\""+(j+1)+"\" SValue=\""+s.getStringValue()+"\" SFormat=\""+p_Formatter.getVisualFormatter()+"\" />");
//                    	testDatasNotFormatter.append("<FormatLine TDName=\""+m_td.getName()+"\" SName=\""+m_tds.getName()
//                    			+"\" SNumber=\""+(j+1)+"\" SValue=\""+s.getFormattedValue()+"\" SFormat=\""
//                    			+p_Formatter.getVisualFormatter()+"\" />");
//                    	testDatasNotFormatter.append(System.getProperty("line.separator"));
//                    }
//                    CMDefaultValue defaultValue = new CMDefaultValue(valueresult);
//                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
//                    s.setValue(defaultValue);
////                    s.setStringValue(valueresult);
//                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
//                    s.setM_Formatter(p_Formatter);
//                    ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,p_Formatter.getVisualFormatter()));
//                    s.setFormat(p_Formatter.getVisualFormatter());
//                }
//            }
//    	}
//    	testDatasNotFormatter.append("</reportFormats> ");
//    	if(showReport)
//    	    testDataManager.createReportFormatNotApply(testDatasNotFormatter.toString(), this, cmFrame, p_AboslutePath);
//    	return ce;
//    }

    public UndoableEdit ifcancelReferenceInTestDataCancelinStructure(int globalindex, int row) {
    	CMCompoundEdit ce = new CMCompoundEdit();
        int cant = getNumOfReferenceInTestDatas(globalindex, row);
        if (cant == 0) {
            int globalindex2 = -1;
            int i = 0;
            StructureTestData std = null;
            while (i < testData.getM_StructureTestData().size() && globalindex != globalindex2) {
                std = (StructureTestData)testData.getM_StructureTestData().elementAt(i);
                globalindex2 = std.getGlobalIndex();
                i++;
            }
            if (std != null) {
                ITypeData typ = (ITypeData)std.getTypeData().elementAt(row);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typ,""));
                typ.setGlobal("");
            }
        }
        return ce;
    }

    public ITypeData setGlobalReferenceStructure(int numoftable, int numofrow,UndoableEdit p_ce) {
		 CMCompoundEdit ce;
	    	if(p_ce!=null)
	    		ce = (CMCompoundEdit) p_ce;
	    	else
	    		ce = new CMCompoundEdit();
        try {
            if (testData.getM_StructureTestData().size() != 0) {
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
                ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
                // typ.setGlobalreferences(typ.getGlobalreferences()+1);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(typ,"G"));
                typ.setGlobal("G");
                return typ;
            }
            else
                return new TypeDataGlobal();
        }
        catch (Exception ex) {
            return new TypeDataGlobal();
        }
    }

    public int getNumOfReferenceInTestDatas(int globalindex, int row) {
        int cant = 0;
        for (int i = 0; i < testData.getTestDataCombination().getM_TestDatas().size(); i++) {
            TestData td = (TestData)testData.getTestDataCombination().getM_TestDatas().elementAt(i);
            for (int j = 0; j < td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                if (globalindex == globalindex2) {
                    StructureTestData tds = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j));
                    ITypeData typ = (ITypeData)tds.getTypeData().elementAt(row);
                    if (typ.getGlobal().equals("G"))
                        cant++;
                }
            }
        }
        return cant;
    }

/*Nuevo metodo para el control de campo field  y  name  28 may 2004 Harold*/

    /**  */
    //svonborries_22022006
    //change it to static to let it use outside the class with out the necessity
    //to create a object of this type
    public static boolean uniqueValueFieldName(StructureTestData p_std, String p_value, Object p_editObject, int p_indexTyp) {
        boolean sw = true;
        if (p_editObject instanceof CMCellTDStructureField) {
            for (int i = 0; i < p_std.getTypeData().size(); i++) {
                if (i != p_indexTyp) {
                    ITypeData typ = (ITypeData)p_std.getTypeData().elementAt(i);
                    if (typ.getField().equalsIgnoreCase(p_value))
                        sw = false;
                }
            }
        }
        else if (p_editObject instanceof CMCellTDStructureName) {
            for (int i = 0; i < p_std.getTypeData().size(); i++) {
                if (i != p_indexTyp) {
                    ITypeData typ = (ITypeData)p_std.getTypeData().elementAt(i);
                    if (typ.getName().equalsIgnoreCase(p_value))
                        sw = false;
                }
            }
        }
        return sw;
    }

    /**
     * @deprecated nevermore used instead use the Action that delete Formula*/
    public void deleteFormula() {
        if (!cmGridModel.getValueAt(getRowSelected(), getColumnSelected()).equals("")) //$NON-NLS-1$
        {
            isFormulaDelete = true;


            setFormula("", "" /*CMMessages.getString("TESTDATA_UNKNOWN")*/, CMMessages.getString("TESTDATA_CHAR"),
                BusinessRules.FORMULAS_FORMAT_STRING, new TestDataFormat(), null);

            TDStructureManager.deleteTypeDataReferenceInFormulas();

            isFormulaDelete = false;
             deleteAllTypeDataInTestDataToObserverVariable();

        }

    }

    public String getGlobalValue(int numoftable, int numofrow, int numofcol) {
        try {
            if (testData.getM_StructureTestData().size() != 0) {
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
                ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
                if (numofcol == 0)
                    return typ.getKey();
                else {
                    if (numofcol == 1)
                        return typ.getGlobal();
                    else {
                        if (numofcol == 2)
                            return typ.getField();
                        else {
                            if (numofcol == 3)
                                return typ.getName();
                            else {
                            	if (numofcol == 4)//My addddd...................
                                    return typ.getToolVendorOT(CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject());
                                else {
                                  if (numofcol == 6)
                                      return typ.getTypeName();
                                  else {
                                    if (numofcol == 7)
                                        return typ.getPrefix();
                                    else {
                                        if (numofcol == 8)
                                            return typ.getSuffix();
                                        else {
                                            if (numofcol == 9)
                                                return typ.getFormat();
                                            else {
                                                if (numofcol == 10)
                                                  //return typ.getStringFormula();
                                                	return typ.getFormula();
                                                else {
                                                  if (numofcol == 11)
                                                  //return typ.getStringValue();
                                                	  return typ.getFormattedValue();
                                                  else
                                                  return new Boolean(typ.isFormula()).toString(); //$NON-NLS-1$
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                }
            }
            else {
                return "";
            }
        }
        catch (Exception ex) {
            return "";
        }
    }

    public ITypeData getTypeData(int numoftable, int numofrow, int numofcol) {
        if (numoftable < testData.getM_StructureTestData().size()) {
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
            ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
            return typ;
        }
        else
            return new TypeDataGlobal();
    }

    public void setTypeData(int numoftable, int numofrow, int numofcol, ITypeData p_TypeData) {
        if (numoftable < testData.getM_StructureTestData().size()) {
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
            std.getTypeData().setElementAt(p_TypeData, cmGridModel.numOfCell(numofrow));
        }
    }

    public void setGlobalValue(String value, int numoftable, int numofrow, int numofcol) {
        if (numoftable < testData.getM_StructureTestData().size()) {
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
            ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
            if (numofcol == 0)
                typ.setKey(value);
            else {
                if (numofcol == 1)
                    typ.setGlobal(value);
                else {
                    if (numofcol == 2)
                        typ.setField(value);
                    else {
                        if (numofcol == 3)
                            typ.setName(value);
                        else {
                        	if (numofcol == 4) { //My addddd............
                               //ccastedo 27.09.06 typ.setToolVendorOT(value);
                                typ.setStateOT(indexFromjComboBoxOT(value));
                            }
                            else {
                        	  if (numofcol == 6) {
                                  typ.setType(value);
                                  typ.setLength(length(value));
                              }
                              else {
                                if (numofcol == 7)
                                    typ.setPrefix(value);
                                else {
                                    if (numofcol == 8)
                                        typ.setSuffix(value);
                                    else {
                                        if (numofcol == 9)
                                            typ.setFormat(value);
                                        else {
                                            if (numofcol == 10) {
                                                //typ.setFormula(value);
                                                //typ.setisFormula(true);
                                            }
                                            else {
                                                if (numofcol == 11){
                                                	CMDefaultValue defaultValue = new CMDefaultValue(value);
                                                	typ.setValue(defaultValue);
                                                //TODO ADD TO THE COMPOUND
                                                  //typ.setStringValue(value);
                                                }
                                                /*else {

                                                  typ.setisFormula(new Boolean(value).booleanValue());
                                                }*/
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                }
            }
        }
    }

    public boolean isSelectedCellFormula() {
        return isSelectedCellFormula;
    }

    public void revalidateMenusAfterAnyAction() {
        try {

            int row = getRowSelected();
            int column =getColumnSelected();
            cmFrame.statesMenusFormulas(false);
            cmFrame.statesMenusVariables(false);
            cmFrame.statesMenusEditFormulas(false);
            cmFrame.statesMenusDeleteFormulas(false);
            cmFrame.statesMenusDeleteVariable(false);
			cmFrame.statesMenusTestDataAssingGlobalValue(false);
            cmFrame.statesMenusTDAssingGlobalInFieldGlobal(false);
            cmFrame.statesMenusFields(false);
            cmFrame.stateGlobalValueReferenceinStructure(false);
            cmFrame.statesMenusFieldsHeader(false);
     		cmFrame.stateDeleteColumnOptionsinStructure(false);
     		cmFrame.stateChangeNameColumnOptionsinStructure(false);
     		cmFrame.statesMenusLinkElement(false);//svonborries_14112005
            //cmFrame.setStatesMenusTestData(false);
            if (row >= 0 && column >= 0) {
            CMIndexTDStructureUpdate.getInstance().setnumOfCol(column);
            CMIndexTDStructureUpdate.getInstance().setRowOfGrid(row);
            CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(row));
            if (!cmFrame.isIsPanelResultComparationSelected()) {
                StructureTestData stdaux = (StructureTestData)
                    testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
                CMIndexTDStructureUpdate.getInstance().setnumOfTable(stdaux.getGlobalIndex());
               // cmFrame.setStatesMenusTestData(false);
                Object obj2 = getCellObjectAt(row, column);
                if (obj2 instanceof CMCellTDStructureFormula) {
                    isSelectedCellFormula = true;
                    cmFrame.statesMenusFormulas(true);
                    cmFrame.statesMenusVariables(true);
                    cmFrame.statesMenusLinkElement(true);//svonborries_14112005
                    ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                    //if (!s.getStringFormula().equals("")) {
                    if (!s.getFormula().equals("")) {
                        if (s.isFormula()) {
                            CMDialogFormulasValues cmd = new CMDialogFormulasValues();
                            //if (cmd.cantParam(s.getStringFormula()) == 0)
                            if (cmd.cantParam(s.getFormula()) == 0)
                                cmFrame.statesMenusEditFormulas(false);
                            else
                                cmFrame.statesMenusEditFormulas(true);
                            cmFrame.statesMenusDeleteFormulas(true);
                        }
                        else{
                        	if (!s.isLinkValue())
                        		cmFrame.statesMenusDeleteVariable(true);
                        	}
                        //svonborries_14112005_begin
                        if(s.isLinkValue()){
                            cmFrame.statesMenusDeleteLinkElement(true);
                        }
                        //svonborries_14112005_end
                    }
                    else {
                        cmFrame.statesMenusEditFormulas(false);
                        cmFrame.statesMenusDeleteFormulas(false);
                        cmFrame.statesMenusDeleteVariable(false);
                        //svonborries_14112005_begin
                        cmFrame.statesMenusDeleteLinkElement(false);
                        //svonborries_14112005_end
                    }
                    //  editFormula = s.getFormula();
                }
                else {
                    isSelectedCellFormula = false;
                    cmFrame.statesMenusFormulas(false);
                    cmFrame.statesMenusVariables(false);
                    cmFrame.statesMenusEditFormulas(false);
                    cmFrame.statesMenusDeleteFormulas(false);
                    cmFrame.statesMenusDeleteVariable(false);
//                  svonborries_14112005_begin
                    cmFrame.statesMenusLinkElement(false);
                    cmFrame.statesMenusDeleteLinkElement(false);
                    //svonborries_14112005_end
                }
                if (obj2 instanceof CMCellTDStructureClassState || obj2 instanceof CMCellTDStructureField ||
                    obj2 instanceof CMCellTDStructureName || obj2 instanceof CMCellTDStructureObjectTypes ||
                    obj2 instanceof CMCellTDStructureNewColumn || obj2 instanceof CMCellTDStructureValue ||
                    obj2 instanceof CMCellTDStructurePrefix || obj2 instanceof CMCellTDStructureSuffix ||
                    obj2 instanceof CMCellTDStructureFormat || obj2 instanceof CMCellTDStructureKey ||
                    obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureLength ||
                    obj2 instanceof CMCellTDStructureGlobal) {

                	    if (obj2 instanceof CMCellTDStructureNewColumn){
                		   cmFrame.stateDeleteColumnOptionsinStructure(true);
                		   cmFrame.stateInsertColumnOptionsinStructure(true);
                		   cmFrame.stateChangeNameColumnOptionsinStructure(true);
                        }
                        if (this.cmFrame.isIsPanelTestDataSelected()) {
                            if (obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureValue)
                                cmFrame.statesMenusTestDataAssingGlobalValue(true);
                            /*else//svonborries_220112005
                                cmFrame.statesMenusTestDataAssingGlobalValue(false);
                            TypeData s = (TypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                            cmFrame.statesMenusYTestDataAssignglobalReference(!s.getGlobal().equals("G"));
                            if (obj2 instanceof CMCellTDStructureGlobal) {
                                boolean stateMenus = !((CMCellTDStructureGlobal)obj2).getName().equals("G");
                                this.cmFrame.statesMenusTDAssingGlobalInFieldGlobal(stateMenus);
                            }*/
                        }
                        else {
                            cmFrame.statesMenusFields(true);
                            ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                            boolean stateMenus = s.getGlobal().equals("G");
                            this.cmFrame.stateAssignCancelGlobalValueReferenceinStructure(stateMenus);
                        }
                }
                else {
                    cmFrame.statesMenusTestDataAssingGlobalValue(false);
                    cmFrame.statesMenusFields(false);
                    this.cmFrame.stateGlobalValueReferenceinStructure(false);
                    if (obj2 instanceof CMCellHeaderTDStructureType || obj2 instanceof CMCellHeaderTDStructureField ||
                        obj2 instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
                        obj2 instanceof CMCellTDStructureNewColumn || obj2 instanceof CMCellHeaderTDStructureValue ||
                        obj2 instanceof CMCellHeaderTDStructurePrefix || obj2 instanceof CMCellHeaderTDStructureSuffix ||
                        obj2 instanceof CMCellHeaderTDStructureFormat || obj2 instanceof CMCellHeaderTDStructureKey ||
                        obj2 instanceof CMCellHeaderTDStructureFormula || obj2 instanceof CMCellHeaderTDStructureType ||
                        obj2 instanceof CMCellHeaderTDStructureLength || obj2 instanceof CMCellHeaderTDStructureGlobal) {
                            cmFrame.statesMenusFieldsHeader(true); //cmFrame.statesMenusFields(true);
                            if (obj2 instanceof CMCellHeaderTDStructureNewColumn){
                     		   cmFrame.stateDeleteColumnOptionsinStructure(true);
                     		   cmFrame.stateInsertColumnOptionsinStructure(true);
                     		   cmFrame.stateChangeNameColumnOptionsinStructure(true);
                             }
                    }
                    else {
                        cmFrame.statesMenusFields(false);
                    }
                }
            }
            }

        }
        catch (Exception ex) {
           // ex.printStackTrace();
            cmFrame.statesMenusFormulas(false);
                cmFrame.statesMenusVariables(false);
                cmFrame.statesMenusEditFormulas(false);
                cmFrame.statesMenusDeleteFormulas(false);
                cmFrame.statesMenusDeleteVariable(false);
                cmFrame.statesMenusTDAssingGlobalInFieldGlobal(false);
                cmFrame.statesMenusFields(false);
                cmFrame.stateGlobalValueReferenceinStructure(false);
                cmFrame.statesMenusFieldsHeader(false);
                cmFrame.statesMenusTestDataAssingGlobalValue(false);
                cmFrame.setStatesMenusTestData(false);
//              svonborries_14112005_begin
                cmFrame.statesMenusLinkElement(false);
                cmFrame.statesMenusDeleteLinkElement(false);
                //svonborries_14112005_end
        }
    }

    public void eventGridMouseClicked(GridEvent e) {
        stopCellEditing();
        MouseEvent mouseEvent = (MouseEvent)e.getSourceEvent();

        setRowSelected(e.getRow());
        setColumnSelected(e.getColumn());
        thisFocusGained(null);
        int row = e.getRow();
        int column = e.getColumn();
        CMIndexTDStructureUpdate.getInstance().setnumOfCol(column);
        CMIndexTDStructureUpdate.getInstance().setRowOfGrid(row);
        CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(row));
        if (!cmFrame.isIsPanelResultComparationSelected()) {
            StructureTestData stdaux = (StructureTestData)
                testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
            CMIndexTDStructureUpdate.getInstance().setnumOfTable(stdaux.getGlobalIndex());
            cmFrame.setStatesMenusTestData(false);
            Object obj2 = getCellObjectAt(row, column);
            if (obj2 instanceof CMCellTDStructureFormula) {
                isSelectedCellFormula = true;
                cmFrame.statesMenusFormulas(true);
                cmFrame.statesMenusVariables(true);
                cmFrame.statesMenusLinkElement(true);//svonborries_14112005
                ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                //if (!s.getStringFormula().equals("")) {
                if (!s.getFormula().equals("")) {
                    if (s.isFormula()) {
                        //CMDialogFormulasValues cmd = new CMDialogFormulasValues();
                        //if (cmd.cantParam(s.getStringFormula()) == 0)
                        //if (cmd.cantParam(s.getFormula()) == 0)
                         //   cmFrame.statesMenusEditFormulas(false);
                        //else
                            cmFrame.statesMenusEditFormulas(true);
                        cmFrame.statesMenusDeleteFormulas(true);
                    }
                    else{
                    	if (!s.isLinkValue())
                    		cmFrame.statesMenusDeleteVariable(true);
                    	}
                    //svonborries_14112005_begin
                    if(s.isLinkValue()){
                        cmFrame.statesMenusDeleteLinkElement(true);
                    }
                    //svonborries_14112005_end
                }
                else {
                    cmFrame.statesMenusEditFormulas(false);
                    cmFrame.statesMenusDeleteFormulas(false);
                    cmFrame.statesMenusDeleteVariable(false);
                    //svonborries_14112005_begin
                    cmFrame.statesMenusDeleteLinkElement(false);
                    //svonborries_14112005_end
                }
                //  editFormula = s.getFormula();
            }
            else {
                isSelectedCellFormula = false;
                cmFrame.statesMenusFormulas(false);
                cmFrame.statesMenusVariables(false);
                cmFrame.statesMenusEditFormulas(false);
                cmFrame.statesMenusDeleteFormulas(false);
                cmFrame.statesMenusDeleteVariable(false);
//              svonborries_14112005_begin
                cmFrame.statesMenusLinkElement(false);
                cmFrame.statesMenusDeleteLinkElement(false);
                //svonborries_14112005_end
            }
            if (obj2 instanceof CMCellTDStructureClassState || obj2 instanceof CMCellTDStructureField ||
                obj2 instanceof CMCellTDStructureName || obj2 instanceof CMCellTDStructureObjectTypes ||
                obj2 instanceof CMCellTDStructureNewColumn || obj2 instanceof CMCellTDStructureValue ||
                obj2 instanceof CMCellTDStructurePrefix || obj2 instanceof CMCellTDStructureSuffix ||
                obj2 instanceof CMCellTDStructureFormat || obj2 instanceof CMCellTDStructureKey ||
                obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureLength ||
                obj2 instanceof CMCellTDStructureGlobal) {
                    mouseEvent = (MouseEvent)e.getSourceEvent();
                    if (obj2 instanceof CMCellTDStructureNewColumn){
                    		cmFrame.stateDeleteColumnOptionsinStructure(true);
                    		cmFrame.stateInsertColumnOptionsinStructure(true);
                    		cmFrame.stateChangeNameColumnOptionsinStructure(true);
                    }
                    else{
                    	cmFrame.stateDeleteColumnOptionsinStructure(false);//svonborries_27122005
                    	cmFrame.stateChangeNameColumnOptionsinStructure(false);
                    }
                    if (this.cmFrame.isIsPanelTestDataSelected()) {
                        if (obj2 instanceof CMCellTDStructureFormula || obj2 instanceof CMCellTDStructureValue)
                            cmFrame.statesMenusTestDataAssingGlobalValue(true);
                       /* else//svonborries_220112005
                            cmFrame.statesMenusTestDataAssingGlobalValue(false);
                        TypeData s = (TypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                        cmFrame.statesMenusYTestDataAssignglobalReference(!s.getGlobal().equals("G"));*/
                        /*if (obj2 instanceof CMCellTDStructureGlobal) {
                            boolean stateMenus = !((CMCellTDStructureGlobal)obj2).getName().equals("G");
                            //this.cmFrame.statesMenusTDAssingGlobalInFieldGlobal(stateMenus);
                        }*/
                    }
                    else {
                        cmFrame.statesMenusFields(true);
                        ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                        boolean stateMenus = s.getGlobal().equals("G");
                        this.cmFrame.stateAssignCancelGlobalValueReferenceinStructure(stateMenus);
                    }
            }
            else {
                cmFrame.statesMenusTestDataAssingGlobalValue(false);
                cmFrame.statesMenusFields(false);
                this.cmFrame.stateGlobalValueReferenceinStructure(false);
                if (obj2 instanceof CMCellHeaderTDStructureType || obj2 instanceof CMCellHeaderTDStructureField ||
                    obj2 instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
                    obj2 instanceof CMCellHeaderTDStructureNewColumn || obj2 instanceof CMCellHeaderTDStructureValue ||
                    obj2 instanceof CMCellHeaderTDStructurePrefix || obj2 instanceof CMCellHeaderTDStructureSuffix ||
                    obj2 instanceof CMCellHeaderTDStructureFormat || obj2 instanceof CMCellHeaderTDStructureKey ||
                    obj2 instanceof CMCellHeaderTDStructureFormula /*|| obj2 instanceof CMCellHeaderTDStructureType */||
                    obj2 instanceof CMCellHeaderTDStructureLength || obj2 instanceof CMCellHeaderTDStructureGlobal) {
                	    if (obj2 instanceof CMCellHeaderTDStructureNewColumn){
             		        cmFrame.stateDeleteColumnOptionsinStructure(true);
             		        cmFrame.stateInsertColumnOptionsinStructure(true);
             		        cmFrame.stateChangeNameColumnOptionsinStructure(true);
                        }
                	    //svonborries_27122005_begin
                	    else{
                	    	int i = this.getRowCount();
                	    	if(i >1 ){
                	    		cmFrame.stateInsertColumnOptionsinStructure(true);
                	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
                	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
            	    		}
                	    	else {
                	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
                	    		cmFrame.stateInsertColumnOptionsinStructure(false);
                	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
                	    		}

                	    	}//svonborries_27122005_end

                        cmFrame.statesMenusFieldsHeader(true); //cmFrame.statesMenusFields(true);

                }
                else {
                    cmFrame.statesMenusFields(false);
                }
            }
            if (mouseEvent.getClickCount() == 2 && this.isEnabled()) {
                if (row >= 0 && column >= 0) {
                    CMIndexTDStructureUpdate.getInstance().setnumOfCol(column);
                    CMIndexTDStructureUpdate.getInstance().setRowOfGrid(row);
                    CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(row));
                    StructureTestData std = (StructureTestData)
                        testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
                    CMIndexTDStructureUpdate.getInstance().setnumOfTable(std.getGlobalIndex());
                    this.clearSelection();
                    this.changeSelection(row, column, false, false);
                    Object obj = getCellObjectAt(row, column);
                    if (obj instanceof CMCellTDStructureKey && !cmFrame.isIsPanelTestDataSelected()) {
                        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
                        CMCompoundEdit ce = new CMCompoundEdit();
                        if (s.getKey().equals("K")) //$NON-NLS-1$
                        {
                        	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeKeyInTypeDataModelEdit(s,""));
                            s.setKey("");
                        }
                        else {
                            /*setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), obj, std.getGlobalIndex(),
                                cmGridModel.numOfCell(row), "K",null, row, column);*/
                        	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeKeyInTypeDataModelEdit(s,"K"));
                            s.setKey("K");
                        }
                        cmFrame.getM_CMUndoMediator().changeKeyValueInTDSructure(this, CMIndexTDStructureUpdate.getInstance().getIndex(),
                                row, column, obj, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"),ce);
                        update(CMIndexTDStructureUpdate.getInstance().getIndex());
                        this.changeSelection(row, column, false, false);
                    }
                }
            }
            if (e.getSourceEvent().getModifiers() == Event.META_MASK && this.isEnabled()) {
                if (row >= 0 && column >= 0) {
                    CMIndexTDStructureUpdate.getInstance().setnumOfCol(column);
                    CMIndexTDStructureUpdate.getInstance().setRowOfGrid(row);
                    CMIndexTDStructureUpdate.getInstance().setnumOfRow(this.cmGridModel.numOfCell(row));
                    StructureTestData std = (StructureTestData)
                        testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
                    CMIndexTDStructureUpdate.getInstance().setnumOfTable(std.getGlobalIndex());
                    this.clearSelection();
                    this.changeSelection(row, column, false, false);
                    this.grabFocus();
                    Object obj = getCellObjectAt(row, column);
                    if (!cmFrame.isIsPanelTestDataSelected()) {
                        if (obj instanceof CMCellHeaderTDStructureType || obj instanceof CMCellHeaderTDStructureField ||
                            obj instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
                            obj2 instanceof CMCellHeaderTDStructureNewColumn || obj instanceof CMCellHeaderTDStructureValue ||
                            obj instanceof CMCellHeaderTDStructurePrefix || obj instanceof CMCellHeaderTDStructureSuffix ||
                            obj instanceof CMCellHeaderTDStructureFormat || obj instanceof CMCellHeaderTDStructureKey ||
                            obj instanceof CMCellHeaderTDStructureFormula || obj instanceof CMCellHeaderTDStructureType ||
                            obj instanceof CMCellHeaderTDStructureLength || obj instanceof CMCellHeaderTDStructureGlobal) {

                                this.cmFrame.jPopupMenuFields().show(this, mouseEvent.getX(), mouseEvent.getY());
                        }
                    }
                    if (obj instanceof CMCellTDStructureFormula) {
                        mouseEvent = (MouseEvent)e.getSourceEvent();
                        if (cmFrame.isIsPanelTestDataSelected()) {
                            /*cmFrame.jMenuItemAssignGlobalReference.setVisible(true);
                            cmFrame.jMenuItemAssignGlobalValue.setVisible(true);
                            cmFrame.jMenuItemCancelGlobalValueReferenceinStructure2.setVisible(true);*/

                        }
                        else {
                           /* cmFrame.jMenuItemAssignGlobalReference.setVisible(false);
                            cmFrame.jMenuItemAssignGlobalValue.setVisible(false);
                            cmFrame.jMenuItemCancelGlobalValueReferenceinStructure2.setVisible(false);*/
                        }
                        ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(row));
                        cmFrame.statesMenusYTestDataAssignglobalReference(!s.getGlobal().equals("G"));
                        this.cmFrame.getJPopupMenuTDStructureFormula().show(this, mouseEvent.getX(), mouseEvent.getY());
                        // this.cmFrame.changeJItemMenuAssignGlobalValue();
                        this.revalidate();
                    }
                    else if (obj instanceof CMCellTDStructureClassState || obj instanceof CMCellTDStructureField ||
                        obj instanceof CMCellTDStructureName || obj2 instanceof CMCellTDStructureObjectTypes ||
                        obj2 instanceof CMCellTDStructureNewColumn || obj instanceof CMCellTDStructureValue ||
                        obj instanceof CMCellTDStructurePrefix || obj instanceof CMCellTDStructureSuffix ||
                        obj instanceof CMCellTDStructureFormat || obj instanceof CMCellTDStructureKey ||
                        obj instanceof CMCellTDStructureGlobal || obj instanceof CMCellTDStructureLength) {
                            mouseEvent = (MouseEvent)e.getSourceEvent();
                            if (this.cmFrame.isIsPanelTestDataSelected()) {
                           
                                if (obj instanceof CMCellTDStructureValue)// || obj instanceof CMCellTDStructureGlobal)
                                    this.cmFrame.getJPopupMenuAssignGlobalValue().show(this, mouseEvent.getX(), mouseEvent.getY());
                                if (obj instanceof CMCellTDStructureGlobal) {
                                    //  boolean stateMenus=!((CMCellTDStructureGlobal)obj).getName().equals("G");
                                    //this.cmFrame.statesMenusTDAssingGlobalInFieldGlobal(stateMenus);
                                    //this.cmFrame.jPopupMenuAssignGlobalValue.show(this, mouseEvent.getX(), mouseEvent.getY());
                                }
                                //svonborries_18072007_begin
                                if(obj instanceof CMCellTDStructureFormat){
                                	this.cmFrame.getJPopupMenuAssignFormattoLocalTypeData().show(this, mouseEvent.getX(), mouseEvent.getY());
                                }
                                //svonborries_18072007_end	
                            }
                            else {
//                                if (obj instanceof CMCellTDStructureFormat) {
//                                    cmFrame.jMenuItemFormatStructure.setVisible(true);
//                                }
//                                else {
//                                    cmFrame.jMenuItemFormatStructure.setVisible(false);
//                                }
                                this.cmFrame.jPopupMenuFields().show(this, mouseEvent.getX(), mouseEvent.getY());
                            }
                    }
                }
            }
        }
    }

    public void eventGridMouseMoved(GridEvent e) {
        int row = e.getRow();
        int column = e.getColumn();
        Object obj = getCellObjectAt(row, column);
        if (obj != null) {
            if (cmFrame.isIsPanelTestDataSelected()) {
                if (obj instanceof CMCellTDStructureValue) //new harold
                {
                    this.setCursor(new Cursor(Cursor.TEXT_CURSOR));
                }
                else {
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
            }
            else {
                if (obj instanceof CMCellTDStructureName || /*My Add*/obj instanceof CMCellTDStructureObjectTypes ||
                	obj instanceof CMCellTDStructureNewColumn || obj instanceof CMCellTDStructurePrefix ||
                    obj instanceof CMCellTDStructureSuffix || obj instanceof CMCellTDStructureValue ||
                    obj instanceof CMCellTDStructureFormat || obj instanceof CMCellTDStructureField) //new harold
                    {
                        this.setCursor(new Cursor(Cursor.TEXT_CURSOR));
                }
                else {
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
            }
        }
    }

    public void eventMouseClicked(MouseEvent e) {
    	
    }

    ///////////////////////////////////////////////////////////////////////////////
    /*public void createTDStructureView(TDStructure testData) {
        StructureTestData s_TestData = new StructureTestData();
        testData.getM_StructureTestData().addElement(s_TestData);
        CMCellGroupHeaderTDStructure cmCellGroupHeaderTDStructure = new CMCellGroupHeaderTDStructure(11);
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureKey(testData)); //new

        *//**  *//*

         Nuevo codigo para asignacion global de datos 29 may 2004 Harold Canedo Lopez				

        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureGlobal(testData));

        *//**  *//*
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureField(testData)); //new harold
        cmCellGroupHeaderTDStructure.addElement(
            new CMCellHeaderTDStructureName(testData, testData.getM_StructureTestData().size() - 1));
        //My add
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureObjectTypes(testData));

        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureType(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureLength(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructurePrefix(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureSuffix(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureFormat(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureFormula(testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureValue(testData));
        cmGridModel.addRow(cmCellGroupHeaderTDStructure);
        int selectedElementViewIndex = this.getRowCount() - 1;
        if (selectedElementViewIndex >= 0) {
            this.changeSelection(selectedElementViewIndex, 0, false, false);
        }
        this.validate();
    }*/

    /**
     * @param p_ce
     * @author svonborries
     * @return A compound of edit, modified to be adapted to the new model of Undo/Redo
     */
    @SuppressWarnings("unchecked")
	public StructureTestData insertDataTDStructureView(UndoableEdit p_ce) {
    	CMCompoundEdit ce;
    	if(p_ce==null)
    		//ce = new CMCompoundEdit(2000);
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit)p_ce;
    	TestCase testCase;
        try {
            testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().firstElement());
        }
        catch (Exception ex) {
            testCase = null;
        }
        if (testCase != null) {
            TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
            Structure m_Structure = testData.getM_TestObject().getStructure();
            String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
            StructureTestData s_TestData = new StructureTestData();
            //        s_TestData.setM_TDStructure(testData);
            ce.addEdit(setNameDescription(s_TestData));
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInStructureTestData(s_TestData,BusinessRules.TYPETDSTRUCTURE_PRIMARY));
            s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalIndexInStructureTestData(s_TestData,testData.getM_StructureTestData().size()));
            s_TestData.setGlobalIndex(testData.getM_StructureTestData().size());
            ce.addEdit(CMModelEditFactory.INSTANCE.createAddStructureTestDataToTDStructureModelEdit(testData,s_TestData));
            testData.getM_StructureTestData().addElement(s_TestData);
            int index = testData.getM_StructureTestData().size() - 1;

            Vector newColumnsHeader = new Vector(5);
            /*newColumnsHeader = testData.getNewColumnsHeader();
            newColumnsHeader.removeAllElements();*/
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNewColumnsHeaderInStructureTestDataModelEdit(s_TestData,newColumnsHeader));
            s_TestData.setNewColumnsHeader(newColumnsHeader);

            /**  */

        /*Nuevo codigo para dar el tipo de datos a la estructura global 18/may/20044  */

            /**  */

            Vector value = new Vector();
            //   TestCase testCase = ((TestCase)testData.getM_TestObject().getM_Structure().getLnkTestCases().firstElement());
            String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);

            //My add...........
            String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

            while (names.length() != 0 && !names.equals(BusinessRules.TESTDATA_SEPARATOR)) //svonborries_01092006
            {
                ITypeData typeData = new TypeDataGlobal();
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(index);
                String name = testDataManager.generateTypeDataName(names);
                names = CMCharUtils.trimComa(names);
                names = CMCharUtils.killFirstElement(names);
//              My adds
                String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                //My adds end..................
                /**  */

        /*Nuevo codigo para dar el tipo de datos a la estructura global 18/may/20044  */

                /**  */
                value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(),2);
                values = CMCharUtils.trimComa(values);
                values = CMCharUtils.killFirstElement(values);
                String typeSTR = testDataManager.getType(value.firstElement().toString());
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(typeData,typeSTR));
                typeData.setType(typeSTR);
                String lengthSTR = length(testDataManager.getType(value.firstElement().toString()));
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(typeData,lengthSTR));
                typeData.setLength(lengthSTR);

                /**  */
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFieldInTypeDataModelEdit(typeData,name));
                typeData.setField(name);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameInTypeDataModelEdit(typeData,name));
                typeData.setName(name);

//              My adds......................................
                /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeToolVendorOTInTypeDataModelEdit(typeData,individualObjectTypes));
                typeData.setToolVendorOT(individualObjectTypes);*///ccastedo 27.09.06
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeToolVendorOTInTypeDataModelEdit(typeData,indexFromjComboBoxOT(individualObjectTypes.toString())));
                typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));

                Vector newColumns = new Vector(5);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNewColumnsInTypeDataModelEdit(typeData,newColumns));
                typeData.setNewColumns(newColumns);

         //       typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
          //      typeData.setTVT(stateTVT);

                ////////////////nuevo Formato por defecto Text 09/06/04/////////////////////////////////
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(typeData,BusinessRules.FORMULAS_FORMAT_STRING));
                typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                TestDataFormat tdf = new TestDataFormat();
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(typeData,tdf));
                typeData.setFormatter(tdf);
                //////////////////////////////////////////////////////////////////////////////

                /**  */

		   /*Old codigo para dar el tipo de datos a la estructura global 18/may/20044  */

                /**  */

          /*	typeData.setType(BusinessRules.TESTDATA_STATE_BINARY);	//				*/

         /* 	typeData.setLength(length( BusinessRules.TESTDATA_STATE_BINARY));	//	*/

                /**  */
                CMDefaultValue defaultValue = new CMDefaultValue((String)"");
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(typeData,defaultValue));
                typeData.setValue(defaultValue);
//                typeData.setStringValue(""); //$NON-NLS-1$
                /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTestDataFormatModelEdit(typeData.getM_Formatter(),typeData.getStringValue()));
                typeData.getM_Formatter().setValue(typeData.getStringValue());*/
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTestDataFormatModelEdit(typeData.getFormatter(),typeData.getFormattedValue()));
                typeData.getFormatter().setValue(typeData.getFormattedValue());
                ce.addEdit(CMModelEditFactory.INSTANCE.createAddTypeDataToStructureTestDataModelEdit
                		(std,typeData));
                typeData.setStructureTestData(std);
                std.getTypeData().addElement(typeData);
            }
            CMIndexTDStructureUpdate.getInstance().setindex(index);
            update(CMIndexTDStructureUpdate.getInstance().getIndex());
            testDataManager.setDataCombination(new Vector()); //Nuevo codigo para dar el tipo de datos a la estructura global 18/may/20044
            return s_TestData;

    /*    }
        catch (Exception e) {
            JOptionPane.showMessageDialog(cmFrame, CMMessages.getString("TESTDATA_ERROR"), CMMessages.getString("TESTDATA_TITLE_ERROR"),
                JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
        }*/
        }
        else {
            JOptionPane.showMessageDialog(cmFrame, CMMessages.getString("TDSTRUCTURE_MESSAGE_CREATE_WITHOUT_TESTCASE"),
                CMMessages.getString("TESTDATA_TITLE_MESSAGE_ERROR"), JOptionPane.ERROR_MESSAGE); // new harold 25.06.04
            return null;
        }
    }

    public boolean existTestCase() {
        TestCase testCase;
        try {
            testCase = ((TestCase)testData.getM_TestObject().getStructure().getLnkTestCases().firstElement());
        }
        catch (Exception ex) {
            testCase = null;
        }
        if (testCase == null) {
            JOptionPane.showMessageDialog(cmFrame, CMMessages.getString("TDSTRUCTURE_MESSAGE_CREATE_WITHOUT_TESTCASE"),
                CMMessages.getString("TESTDATA_TITLE_MESSAGE_ERROR"), JOptionPane.ERROR_MESSAGE); // new harold 25.06.04
            return false;
        }
        else {
            return true;
        }
    }

   /* public void insertDataTDStructureView(int index, TDStructure testData, int j) {
        TypeData typeData = new TypeData();
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(rowSelected));
        std.getTypeData().addElement(typeData);
        CMCellGroupDataTDStructure cmCellGroupDataTDStructure = new CMCellGroupDataTDStructure(11);
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureKey(testData, typeData.getKey())); //new
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureGlobal(testData, typeData.getGlobal())); //new
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureField(testData, typeData.getField())); //new harold
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureName(testData, typeData.getName()));
        //My add
        if (swVOT){
            String OType = typeObject.elementAt(j).toString();
              cmCellGroupDataTDStructure.addElement(jCBObjectType.getItemAt(intValueObjectTypes(OType)));//intValueObjectTypes(OType)));//stateTVT()));//s_TestData.getTVT()));// HACER EL INTVALUE PARA EL TESTDATA

          }

        cmCellGroupDataTDStructure.addElement(jComboBox.getItemAt(0));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureLength(testData, typeData.getLength()));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructurePrefix(testData, typeData.getPrefix()));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureSuffix(testData, typeData.getSuffix()));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureFormat(testData, typeData.getFormat()));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureFormula(testData, typeData.getFormula()));
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureValue(testData, typeData.getValue()));
        cmGridModel.insertRow(index, cmCellGroupDataTDStructure);
    }*/

    public TDStructure getTDStructure() {
        return testData;
    }

    public String length(String name) {
        if (name.equals(BusinessRules.TESTDATA_STATE_BINARY)) { return BusinessRules.TESTDATA_STATE_BINARY_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_BIT)) { return BusinessRules.TESTDATA_STATE_BIT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_BOOLEAN))
            { return BusinessRules.TESTDATA_STATE_BOOLEAN_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_CHAR)) { return BusinessRules.TESTDATA_STATE_CHAR_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_DATETIME)) {
            return BusinessRules.TESTDATA_STATE_DATETIME_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_DECIMAL))
            { return BusinessRules.TESTDATA_STATE_DECIMAL_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_FLOAT)) { return BusinessRules.TESTDATA_STATE_FLOAT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_INT)) { return BusinessRules.TESTDATA_STATE_INT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_MONEY)) { return BusinessRules.TESTDATA_STATE_MONEY_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NCHAR)) { return BusinessRules.TESTDATA_STATE_NCHAR_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NTEXT)) { return BusinessRules.TESTDATA_STATE_NTEXT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NUMERIC))
            { return BusinessRules.TESTDATA_STATE_NUMERIC_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NVARCHAR)) {
            return BusinessRules.TESTDATA_STATE_NVARCHAR_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_REAL)) { return BusinessRules.TESTDATA_STATE_REAL_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLDATETIME)) {
            return BusinessRules.TESTDATA_STATE_SMALLDATETIME_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLINT)) {
            return BusinessRules.TESTDATA_STATE_SMALLINT_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLMONEY)) {
            return BusinessRules.TESTDATA_STATE_SMALLMONEY_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TEXT)) {
        	return BusinessRules.TESTDATA_STATE_TEXT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TIMESTAMP)) {
            return BusinessRules.TESTDATA_STATE_TIMESTAMP_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TINYINT))
            { return BusinessRules.TESTDATA_STATE_TINYINT_DEFAULT_VALUE; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_VARBINARY)) {
            return BusinessRules.TESTDATA_STATE_VARBINARY_DEFAULT_VALUE;
        }
        else if (name.equals(BusinessRules.TESTDATA_STATE_VARCHAR))
            { return BusinessRules.TESTDATA_STATE_VARCHAR_DEFAULT_VALUE; }
        else { return CMMessages.getString("TESTDATA_UNKNOWN_1"); } //$NON-NLS-1$
    }

    public int intValue(String name) {
        if (name.equals(BusinessRules.TESTDATA_STATE_BINARY)) { return 0; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_BIT)) { return 1; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_BOOLEAN)) { return 2; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_CHAR)) { return 3; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_DATETIME)) { return 4; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_DECIMAL)) { return 5; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_FLOAT)) { return 6; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_INT)) { return 7; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_MONEY)) { return 8; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NCHAR)) { return 9; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NTEXT)) { return 10; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NUMERIC)) { return 11; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_NVARCHAR)) { return 12; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_REAL)) { return 13; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLDATETIME)) { return 14; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLINT)) { return 15; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_SMALLMONEY)) { return 16; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TEXT)) { return 17; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TIMESTAMP)) { return 18; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_TINYINT)) { return 19; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_VARBINARY)) { return 20; }
        else if (name.equals(BusinessRules.TESTDATA_STATE_VARCHAR)) { return 21; }
        else { return 22; }
    }


    public void setTDStructure(TDStructure testData) {
        this.testData = testData;
        testCaseIntestData = testData.getM_TestCaseInTDStructure();
    }

    /**
     * @param p_StructureTestData
     * Modify to Be Adapted to the new Undo/Redo Structure
     * @author svonborries
     * @return
     */
    public UndoableEdit setNameDescription(StructureTestData p_StructureTestData) {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	String name = p_StructureTestData.generateName(testData,ce);
    	String descrip = p_StructureTestData.generateDescription(testData);
    	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameInStructureTestData(p_StructureTestData,name));
        p_StructureTestData.setName(name);
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionInStructureTestData(p_StructureTestData,descrip));
        p_StructureTestData.setDescription(descrip);
        return ce;
    }

    public UndoableEdit setNameDescription2(StructureTestData p_StructureTestData) {
    	CMCompoundEdit ce = new CMCompoundEdit();
    	String name = p_StructureTestData.generateName2(testData,ce);
    	String descrip = p_StructureTestData.generateDescription(testData);
    	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeNameInStructureTestData(p_StructureTestData,name));
        p_StructureTestData.setName(name);
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeDescriptionInStructureTestData(p_StructureTestData,descrip));
        p_StructureTestData.setDescription(descrip);
        return ce;
    }
    //hcanedo_21102004_begin
    public void deleteTDStructurefromTestData(StructureTestData p_StructureTestData, int index) {
        Vector p_ResultCompariosnActual = (Vector)this.getTDStructure().getM_ResultComparation().getTestDataSetActual().clone();
        Vector p_ResultComparisonTarget = (Vector)this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().clone();
        Vector p_TestDataSetDeleted = new Vector();
        Vector p_TestDataSetIndex = new Vector();
        Vector p_TDDeletedinTDS = new Vector();
        TestData tdDeleted = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(CMIndexTDStructureUpdate.getInstance().getindexTestData());
        int indexTD = CMIndexTDStructureUpdate.getInstance().getindexTestData();
        boolean isDeletedTestData = false;
        int sizeCombinations = this.testData.getTestDataCombination().getM_TestDatas().size();
        for (int i = sizeCombinations - 1; i >= 0; i--) // modificado para la eliminacion de testdatas sin estructuras
        {
            TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
            if (td.getM_TDStructure().getM_StructureTestData().size() == 0) {
                int idTD = td.getId();
                isDeletedTestData = true;
                this.testData.deleteIdTestData(idTD);
                this.testData.getTestDataCombination().getM_TestDatas().removeElementAt(i);
                for (int k = this.getTDStructure().getM_TestDataSet().size() - 1; k >= 0; k--) {
                    TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(k);
                    int indextds = -1; //=tds.getM_TestDataCombinations().getM_TestDatas().indexOf(td);
                    boolean b = false; // = tds.getM_TestDataCombinations().getM_TestDatas().removeElement(td);
                    String nameTestData = td.getName();
                    for (int h = 0; h < tds.getM_TestDataCombinations().getM_TestDatas().size(); h++) {
                        TestData tdaux = (TestData)tds.getM_TestDataCombinations().getM_TestDatas().elementAt(h);
                        if (nameTestData.equals(tdaux.getName())) {
                            indextds = h;
                        }
                    }
                    if (indextds >= 0) {
                        tds.getM_TestDataCombinations().getM_TestDatas().remove(indextds);
                        b = true;
                    }
                    if (b) {
                        CMComplexObjectToDeleted obj = new CMComplexObjectToDeleted(k, indextds, td);
                        p_TDDeletedinTDS.addElement(obj);
                    }
                    if (tds.getM_TestDataCombinations().getM_TestDatas().size() == 0) {
                        int idTDS = tds.getId();
                        p_TestDataSetDeleted.addElement(tds);
                        p_TestDataSetIndex.addElement(new Integer(k));
                        this.getTDStructure().deleteIdTestDataSet(idTDS);
                        String name = tds.getName();
                        this.getTDStructure().getM_ResultComparation().getTestDataSetActual().remove(name);
                        this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().remove(name);
                        this.getTDStructure().getM_TestDataSet().removeElementAt(k);
                    }
                }
            }
        }
        if (testData.getM_StructureTestData().size() == 0) {
            cmFrame.statesMenusTDStructureEditDelete(false);
            cmFrame.stateInsertColumnOptionsinStructure(false);
        }
        if (testData.getM_TestDataSet().size() == 0) {
            cmFrame.statesMenusTestDataSetEditDeleteReport(false);
        }
        if (testData.getTestDataCombination().getM_TestDatas().size() == 0) {
            cmFrame.statesMenusTestDataEditDeleteAssign(false);
        }
        CMIndexTDStructureUpdate.getInstance().setindex(CMIndexTDStructureUpdate.getInstance().getIndex() - 1);
        update(0);
        cmFrame.getM_CMUndoMediator().cutStructureTestData(this, p_ResultCompariosnActual, p_ResultComparisonTarget,
            p_TestDataSetDeleted, p_TestDataSetIndex, tdDeleted, indexTD, p_StructureTestData, index, isDeletedTestData,
            p_TDDeletedinTDS, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TESTDATA"));
    }

    public void deleteTDStructurefromTestDataRedo() {
        int sizeCombinations = this.testData.getTestDataCombination().getM_TestDatas().size();
        for (int i = sizeCombinations - 1; i >= 0; i--) // modificado para la eliminacion de testdatas sin estructuras
        {
            TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
            if (td.getM_TDStructure().getM_StructureTestData().size() == 0) {
                int idTD = td.getId();
                this.testData.deleteIdTestData(idTD);
                this.testData.getTestDataCombination().getM_TestDatas().removeElementAt(i);
                for (int k = this.getTDStructure().getM_TestDataSet().size() - 1; k >= 0; k--) {
                    TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(k);
                    int indextds = -1; //=tds.getM_TestDataCombinations().getM_TestDatas().indexOf(td);
                    String nameTestData = td.getName();
                    for (int h = 0; h < tds.getM_TestDataCombinations().getM_TestDatas().size(); h++) {
                        TestData tdaux = (TestData)tds.getM_TestDataCombinations().getM_TestDatas().elementAt(h);
                        if (nameTestData.equals(tdaux.getName())) {
                            indextds = h;
                        }
                    }
                    if (indextds >= 0) {
                        tds.getM_TestDataCombinations().getM_TestDatas().remove(indextds);
                    }
                    if (tds.getM_TestDataCombinations().getM_TestDatas().size() == 0) {
                        int idTDS = tds.getId();
                        this.getTDStructure().deleteIdTestDataSet(idTDS);
                        String name = tds.getName();
                        this.getTDStructure().getM_ResultComparation().getTestDataSetActual().remove(name);
                        this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().remove(name);
                        this.getTDStructure().getM_TestDataSet().removeElementAt(k);
                    }
                }
            }
        }
        if (testData.getM_StructureTestData().size() == 0) {
            cmFrame.statesMenusTDStructureEditDelete(false);
            cmFrame.stateInsertColumnOptionsinStructure(false);
        }
        if (testData.getM_TestDataSet().size() == 0) {
            cmFrame.statesMenusTestDataSetEditDeleteReport(false);
        }
        if (testData.getTestDataCombination().getM_TestDatas().size() == 0) {
            cmFrame.statesMenusTestDataEditDeleteAssign(false);
        }
        CMIndexTDStructureUpdate.getInstance().setindex(CMIndexTDStructureUpdate.getInstance().getIndex() - 1);
        update(0);
    }
    //hcanedo_21102004_end

    public int getSizeGridTDStructure(){
    	return this.numofcolumnsDinamic;
    }
    public void update(int index) {
        deleteAllViews();

        int cont = -1;
        //ccastedo comments 04.01.07  cont++;
        if (testData != null){

        	int sizeNCH = sizeNewColumnsHeader(index);//testData.getNewColumnsHeader().size();

        		int sizeGrid=0;
               	if (swInsertColumn){
            		sizeGrid = sizeNCH + numofColumnsStatic;
            		numofcolumnsDinamic = sizeGrid;
            	}
            	else{
            		sizeGrid = (sizeNCH+numofColumnsStatic);
            		numofcolumnsDinamic = sizeGrid;
            	}
                if (sizeNCH > 0){
                	numofcolumnsDinamic = sizeGrid;
                //	sizeTDHS = sizeGrid;
                }
               /* this.clearSelection();*/
                this.changeSelection(rowSelected, columnSelected, false, false);
                cmGridModel.setColumnCount(sizeGrid);
              //  this.changeSelection(0, 0, false, false);
        	}

        //}

        int STDsize=testData.getM_StructureTestData().size();
        
        createGridHeader(index);
        if (STDsize != 0) {
            if (index >= testData.getM_StructureTestData().size())
                index = testData.getM_StructureTestData().size() - 1;
            //ccastedo comments 04.01.07  createTDStructureView2(testData, index);
                      
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(index);
            Vector vtd = std.getTypeData();


            int sizeVTD = 0;
            sizeVTD = vtd.size();
   	

            for (int j = 0; j < sizeVTD ; j++) {
                cont++;
                if (vtd.elementAt(j) instanceof ITypeData) {
                	ITypeData typeData = (ITypeData)vtd.elementAt(j);                
                	insertDataTDStructureView2(cont, testData, typeData,j);
                }
            }

            this.clearSelection();

           // revalidateMenusAfterAnyAction();
        }      
		revalidateMenusAfterAnyAction();

    }

    public void update() {
        deleteAllViews();
        int cont = -1;
        Vector vstd = testData.getM_StructureTestData();
        for (int i = 1; i <= vstd.size(); i++) {
          //  cont++;
           //ccastedo commnts 04.01.07 createTDStructureView2(testData, i - 1);
        	createGridHeader(i-1);
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(i - 1);
            Vector vtd = std.getTypeData();


            for (int j = 0; j < vtd.size(); j++) {
                cont++;
                ITypeData typeData = (ITypeData)vtd.elementAt(j);                 
                insertDataTDStructureView2(cont, testData, typeData,j);
            }
        }     
        this.clearSelection();
        this.changeSelection(getRowSelected(), getColumnSelected(), false, false);
        revalidateMenusAfterAnyAction();
    }
    
//  ccastedo begins 04.01.07

/*public void creategridHeader(int i){    	
	scrollPaneGridTDStructure = new CMScrollpaneGridTDStructure();
	scrollPaneGridTDStructure.createHeader(this,i);	
	//scrollPaneGridTDStructure.getM_CMHeaderGridTDStructure().createTDStructureHeaderView(i, getTDStructure());
	   
}*/


    public void insertDataTDStructureView2(int index, TDStructure testData, ITypeData s_TestData,int j) {
    	CMCellGroupDataTDStructure cmCellGroupDataTDStructure = new CMCellGroupDataTDStructure(numofcolumnsDinamic-1);//I change 11 to 12
    	    	
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureKey(this,s_TestData));
        
        
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureGlobal(this,s_TestData));
        
        
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureField(this,s_TestData));
        
        
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureName(this,s_TestData));
              
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureObjectTypes(this,s_TestData));
     
        if (s_TestData.getNewColumns()!=null){
        	int sizeNC = s_TestData.getNewColumns().size();
        	if ( sizeNC > 0 ){
            	for (int i=0; i<s_TestData.getNewColumns().size();i++){
            		/*CMCellTDStructureNewColumn newCMCellTDStructureNewColumn = new CMCellTDStructureNewColumn(this,s_TestData);
            		newCMCellTDStructureNewColumn.setName(s_TestData.getNewColumns().elementAt(i).toString());*/
            		cmCellGroupDataTDStructure.addElement(new CMCellTDStructureNewColumn(this,s_TestData,i));
            	}
            }
        }
        
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureClassState(this,s_TestData));        
        
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureLength(this,s_TestData));        
       
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructurePrefix(this,s_TestData));
                
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureSuffix(this,s_TestData));
              
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureFormat(this,s_TestData));
              
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureFormula(this,s_TestData));
                       
        cmCellGroupDataTDStructure.addElement(new CMCellTDStructureValue(this,s_TestData));
      
        cmGridModel.insertRow(index, cmCellGroupDataTDStructure);
    }

    public int sizeNewColumnsHeader(int index){
    	int sizeNCH = 0;
    	if (testData != null){
    		int  sizestructureTestData = testData.getM_StructureTestData().size();
    		if (sizestructureTestData > 0 && index<sizestructureTestData){    			
    			StructureTestData structureTestData = (StructureTestData)testData.getM_StructureTestData().elementAt(index);
        		if (structureTestData != null){
        			if (structureTestData.getNewColumnsHeader() != null){
        	        	sizeNCH = structureTestData.getNewColumnsHeader().size();
        			}
        		}
    		}
    	}
        return sizeNCH;
    }

    /*public void createTDStructureView2(TDStructure testData, int i) { //new harold
        CMCellGroupHeaderTDStructure cmCellGroupHeaderTDStructure = new CMCellGroupHeaderTDStructure(numofcolumnsDinamic-1);
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureKey(this,testData)); //end

        *//**  *//*

         Nuevo codigo para asignacion global de datos 29 may 2004 Harold Canedo Lopez				

        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureGlobal(this,testData));

        *//**  *//*
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureField(this,testData)); //end
        CMCellHeaderTDStructureName newCMCellHeaderTDStructureName = new CMCellHeaderTDStructureName(this,testData);
        newCMCellHeaderTDStructureName.setNumOfTable(i);
        cmCellGroupHeaderTDStructure.addElement(newCMCellHeaderTDStructureName);
        //My add
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureObjectTypes(this,testData));

        int sizeNCH = sizeNewColumnsHeader(i);
        if (sizeNCH > 0){
        	//int sizeNC = testData.getNewColumnsHeader().size();
        	if ( sizeNCH> 0){
        		StructureTestData structureTestData = (StructureTestData)testData.getM_StructureTestData().elementAt(i);
            	for (int j=0;j<sizeNCH;j++){

            		String nameNewColumn = structureTestData.getNewColumnsHeader().elementAt(j).toString();
            		CMCellHeaderTDStructureNewColumn newCMCellHeaderTDStructureNewColumn = new CMCellHeaderTDStructureNewColumn(this,testData);
            		newCMCellHeaderTDStructureNewColumn.setName(nameNewColumn);
            		cmCellGroupHeaderTDStructure.addElement(newCMCellHeaderTDStructureNewColumn);
            	}
            }
        }

        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureType(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureLength(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructurePrefix(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureSuffix(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureFormat(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureFormula(this,testData));
        cmCellGroupHeaderTDStructure.addElement(new CMCellHeaderTDStructureValue(this,testData));
        if (swInsertColumn){
        	cmGridModel.insertColumn(5,cmCellGroupHeaderTDStructure);
        	this.setStyleModel(cmStyleModel);
            this.setModel(cmGridModel);
        	//changeSelection(0,5, false, false);
        }
        cmGridModel.addRow(cmCellGroupHeaderTDStructure);
        int selectedElementViewIndex = this.getRowCount() - 2;
        if (selectedElementViewIndex >= 0) {
            this.changeSelection(selectedElementViewIndex, 0, false, false);
        }
        this.validate();
    }
*///ccastedo comments 04.01.07
    
    public void setFormulaEditValue(String formula, String value, String type, String format, TestDataFormat p_Formatter,UndoableEdit p_ce) {
    	CMCompoundEdit ce;
    	if(p_ce!=null)
    		ce = (CMCompoundEdit) p_ce;
    	else
    		ce = new CMCompoundEdit();
    	int row = getRowSelected();
        int column = getColumnSelected();
        Vector typeDatasinTestData = new Vector();
        Object obj = getCellObjectAt(row, column);
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
        ITypeData oldtd = (ITypeData)s.clone();
        if (obj instanceof CMCellTDStructureFormula) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
                int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                Object p_value = formula;
                /*tyeDatasModifiedinFormulasForUndoRedo(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
                    typeDatasinTestData);*/
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value,null, row, column));
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), new Object(), indexGlobalStructure, numofTypeData,
                    new Boolean(true),null, row, column));
            }
            /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(s,formula));
            s.setFormula(formula);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(s,true));
            s.setisFormula(true);
            cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);*/
            
           
            cmGridModel.setValueAt(new CMCellTDStructureFormula(this,s), row, column);
        }
        obj = getCellObjectAt(row, column - 1);
        if (obj instanceof CMCellTDStructureFormat) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
                /*int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);*/
                Object p_value = format;
                /*setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value,p_Formatter, row, column - 1);*/
            }
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,format));
            s.setFormat(format);
            if(p_Formatter == null){
            	p_Formatter = new TestDataFormat();
            }
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
            s.setFormatter(p_Formatter);
           
            cmGridModel.setValueAt(new CMCellTDStructureFormat(this,s), row, column - 1);
        }
        obj = getCellObjectAt(row, column + 1);
        if (obj instanceof CMCellTDStructureValue) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
                int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                Object p_value = value;
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value,null, row, column + 1));
            }
            CMDefaultValue defaultValue = new CMDefaultValue(value);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
            s.setValue(defaultValue);
//            s.setStringValue(value);
            //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
            
            cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
        }
        obj = getCellObjectAt(row, column - 5);
        if (obj instanceof CMCellTDStructureClassState) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
            	Object p_value = type;
                /*int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value,null, row, column - 5);*/
            }
            //Object obj1 = cmGridModel.getCellObjectAt(row,column-5);
            CMCellTDStructureClassState selectedItem =
                (CMCellTDStructureClassState)getCellObjectAt(row, column - 5);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(s,type));
            s.setType(type);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,selectedItem.getDefaultValue(s.getTypeName())));
            s.setLength(selectedItem.getDefaultValue(s.getTypeName()));
            
           
            cmGridModel.setValueAt(new CMCellTDStructureLength(this,s), row, column - 4);
        }
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(s,""));
        s.setGlobal("");

        ITypeData newtd = (ITypeData)s.clone();
        int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
        int indexStructure = CMIndexTDStructureUpdate.getInstance().getIndex();
        int numofTable = CMIndexTDStructureUpdate.getInstance().getnumOfTable();
        int numofRow = CMIndexTDStructureUpdate.getInstance().getnumOfRow();

        /*cmFrame.getM_CMUndoMediator().editInValidGlobalReferenceAndFormulainTestData(cmFrame.getPanelTestDataView(), cmFrame.getGridTDStructure(),
            indexTestData, indexStructure, oldtd, (ITypeData)s.clone(), numofTable, numofRow, row, column, cmFrame.getm_TabbedPaneView(),
            CMMessages.getString("TESTDATA_TESTDATA"));*/
        ce.addEdit(cmFrame.getGridTDStructure().ifcancelReferenceInTestDataCancelinStructure(std.getGlobalIndex(), row - 1));
        setundoredoFormulasMediator(row, column,ce);
        //setundoredoFormulasMediator(oldtd, newtd, row, column,ce);
        update(CMIndexTDStructureUpdate.getInstance().getIndex());
    }
    /**
     * @param formula
     * @param value
     * @param type
     * @param format
     * @param p_Formatter
     * @author svonborries
     * @version: this method is modify to adapt the new Undo/Redo Model in CM
     */
    public void setFormula(String formula, String value, String type, String format, TestDataFormat p_Formatter, UndoableEdit p_ce) {
    	CMCompoundEdit ce;
    	if(p_ce == null)
    		ce = new CMCompoundEdit();
    	else
    		ce = (CMCompoundEdit) p_ce;
        int row = getRowSelected();
        int column = getColumnSelected();
       // System.out.println("del setFormula: row: "+row+" column: "+column);//test
        //Vector typeDatasinTestData = new Vector();
        Object obj = getCellObjectAt(row, column);
        ce.addEdit(CMViewEditFactory.INSTANCE.createChangeIndexInCMIndexTDStructureUpdate(CMIndexTDStructureUpdate.getInstance(),CMIndexTDStructureUpdate.getInstance().getIndex()));
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
        //if (cmFrame.isIsPanelTestDataSelected() && s.getGlobal().equals("G") && !s.getStringFormula().equals(formula)) {
        if (cmFrame.isIsPanelTestDataSelected() && s.getGlobal().equals("G") && !s.getFormula().equals(formula)) {
            int confirmFormula = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("GLOBAL_REFERENCE_DELETE"),
                CMMessages.getString("TESTDATA_TITLE_ERROR"), JOptionPane.YES_NO_OPTION);
            if (confirmFormula == JOptionPane.YES_OPTION)
                setFormulaEditValue(formula, value, type, format,p_Formatter, ce);
        } else {
            //ITypeData oldtd = (ITypeData)s.clone();
            if (obj instanceof CMCellTDStructureFormula) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = formula;
                    /*tyeDatasModifiedinFormulasForUndoRedo(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
                        typeDatasinTestData);*/
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column));
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), new Object(), indexGlobalStructure, numofTypeData,
                        new Boolean(true),null, row, column));
                }
                /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(s,formula));
                s.setFormula(formula);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(s,true));
                s.setisFormula(true);*/
                //cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);
                
                cmGridModel.setValueAt(new CMCellTDStructureFormula(this,s), row, column);
            }
            obj = getCellObjectAt(row, column - 1);
            if (obj instanceof CMCellTDStructureFormat) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    //int indexGlobalStructure = std.getGlobalIndex();
                    //int numofTypeData = cmGridModel.numOfCell(row);
                    //Object p_value = format;
                    /*setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,p_Formatter, row, column - 1);*/
                }
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,format));
                s.setFormat(format);
                if(p_Formatter == null){
                	p_Formatter = new TestDataFormat();
                }
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
                s.setFormatter(p_Formatter);                
               
                cmGridModel.setValueAt(new CMCellTDStructureFormat(this,s), row, column - 1);
            }
            obj = getCellObjectAt(row, column + 1);
            if (obj instanceof CMCellTDStructureValue) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = value;
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column + 1));
                }
                CMDefaultValue defaultValue = new CMDefaultValue(value);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
                s.setValue(defaultValue);
//                s.setStringValue(value);
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
               
                cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
            }
            obj = getCellObjectAt(row, column - 5);
            if (obj instanceof CMCellTDStructureClassState) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    //int indexGlobalStructure = std.getGlobalIndex();
                    //int numofTypeData = cmGridModel.numOfCell(row);
                    //Object p_value = type;
                    /*setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column - 5);*/
                }
                //Object obj1 = cmGridModel.getCellObjectAt(row,column-5);
                CMCellTDStructureClassState selectedItem =
                    (CMCellTDStructureClassState)getCellObjectAt(row, column - 5);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(s,type));
                s.setType(type);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,selectedItem.getDefaultValue(s.getTypeName())));
                s.setLength(CMCellTDStructureClassState.getDefaultValue(s.getTypeName()));
               
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
            }
            //ITypeData newtd = (ITypeData)s.clone();
            setundoredoFormulasMediator(row, column, ce);
          //  update(CMIndexTDStructureUpdate.getInstance().getIndex());
        }
    }

    /**
     * @param oldtd
     * @param newtd
     * @param column
     * @param p_ce
     * @author svonborries
     * @version: Modify to be adapted to the new model of Undo/Redo
     */
    public void setundoredoFormulasMediator(int row, int column, UndoableEdit p_ce) {
        int indexstructure = CMIndexTDStructureUpdate.getInstance().getIndex();
        if (!isFormulaDelete) {
            if (cmFrame.isIsPanelTestDataSelected()) {
                int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
                cmFrame.getM_CMUndoMediator().assignFormulainTDStructureinTestDataEdit(
                    indexTestData, indexstructure, row, column, p_ce, cmFrame.getContentTabbedPane(),
                    CMMessages.getString("TESTDATA_TESTDATA"));
            }
            else {
                cmFrame.getM_CMUndoMediator().assignFormulainTDStructureEdit(this, indexstructure, row, column, p_ce,
                    cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"));
            }
        }
        else {
            if (cmFrame.isIsPanelTestDataSelected()) {
                int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
                cmFrame.getM_CMUndoMediator().cancelAssignFormulainTDStructureinTestDataEdit(cmFrame.getPanelTestDataView(),
                    indexTestData, indexstructure, row, column,p_ce, cmFrame.getContentTabbedPane(),
                    CMMessages.getString("TESTDATA_TESTDATA"));
            }
            else {
                cmFrame.getM_CMUndoMediator().cancelAssignFormulainTDStructureEdit(this, indexstructure, row, column,
                    p_ce, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"));
            }
        }
    }

    public void setAllTypeDataInTestDataToObserverVariable(Variable p_Variable){
    	int row = getRowSelected();
    	Vector typeDatasinTestDataToObserver = new Vector();
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        int indexGlobalStructure = std.getGlobalIndex();
        int numofTypeData = cmGridModel.numOfCell(row);
        tyeDatasForObseverAVariable(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
        		typeDatasinTestDataToObserver);
        for (Iterator iter = typeDatasinTestDataToObserver.iterator(); iter.hasNext();) {
        	ITypeData typedata = (ITypeData) iter.next();
        	p_Variable.getM_Observers().addObserver(typedata);
        }

    }
    public UndoableEdit deleteAllTypeDataInTestDataToObserverVariable(){
    	CMCompoundEdit ce = new CMCompoundEdit();
    	int row = getRowSelected();
//svonborries_05012006_begin
    		//Project2 project=CMApplication.frame.getTreeWorkspaceView().getCurrentProject();
    		Vector variables=getTDStructure().getM_Variables().getVariables();
//svonborries_05012006_end
    		for (Iterator iter = variables.iterator(); iter.hasNext();) {
    			Variable p_Variable = (Variable) iter.next();
    			Vector typeDatasinTestDataToObserver = new Vector();
    			StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
    			ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
    			ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteIObserverFromDelegateObservable(p_Variable.getM_Observers(),s));
    			p_Variable.getM_Observers().deleteObserver(s);
    			if(!cmFrame.isIsPanelTestDataSelected()){
    				int indexGlobalStructure = std.getGlobalIndex();
    				int numofTypeData = cmGridModel.numOfCell(row);
    				tyeDatasForObseverAVariable(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
    						typeDatasinTestDataToObserver);
    				for (Iterator iter2 = typeDatasinTestDataToObserver.iterator(); iter2.hasNext();) {
    					ITypeData typedata = (ITypeData) iter2.next();
    					ce.addEdit(CMModelEditFactory.INSTANCE.createDeleteIObserverFromDelegateObservable(p_Variable.getM_Observers(),typedata));
    					p_Variable.getM_Observers().deleteObserver(typedata);
    				}
    			}
    		}
    		return ce;
    }
    /**
     * @deprecated instead use Action AddVariable
     * @param formula
     * @param value
     * @param type
     * @param format
     * @param p_Formatter
     * @param p_Variable
     * @param p_ce
     * 14/12/2006
     * svonborries
     */
    public void setVariable(String formula, String value, String type, String format,TestDataFormat p_Formatter,Variable p_Variable,UndoableEdit p_ce) {
    	CMCompoundEdit ce;
    	if(p_ce!=null)
    		ce = (CMCompoundEdit) p_ce;
    	else
    		ce = new CMCompoundEdit();
    	int row = getRowSelected();
        int column = getColumnSelected();
        Object obj = getCellObjectAt(row, column);
        //Vector typeDatasinTestData = new Vector();
        Vector typeDatasinTestDataToObserver = new Vector();
        ce.addEdit(CMViewEditFactory.INSTANCE.createChangeIndexInCMIndexTDStructureUpdate(CMIndexTDStructureUpdate.getInstance(),CMIndexTDStructureUpdate.getInstance().getIndex()));
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
        //if (cmFrame.isIsPanelTestDataSelected() && s.getGlobal().equals("G") && !s.getStringFormula().equals(formula)) {
        if (cmFrame.isIsPanelTestDataSelected() && s.getGlobal().equals("G") && !s.getFormula().equals(formula)) {
            int confirmFormula = JOptionPane.showConfirmDialog(cmFrame, CMMessages.getString("GLOBAL_REFERENCE_DELETE"),
                CMMessages.getString("TESTDATA_TITLE_ERROR"), JOptionPane.YES_NO_OPTION);
            if (confirmFormula == JOptionPane.YES_OPTION){
                if(p_Variable != null){
                	ce.addEdit(CMModelEditFactory.INSTANCE.createAddObserverVariableInTypeDataModelEdit(p_Variable,s));
                	p_Variable.getM_Observers().addObserver(s);}
                setVariableEditValue(formula, value, type, format,p_Formatter,ce);
            }
        } else {
            //ITypeData oldtd = (ITypeData)s.clone();
            if (obj instanceof CMCellTDStructureFormula) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = formula;
                    tyeDatasForObseverAVariable(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
                    		typeDatasinTestDataToObserver);
                   /* tyeDatasModifiedinFormulasForUndoRedo(numofTypeData, indexGlobalStructure, testData.getTestDataCombination(),
                        typeDatasinTestData);*/
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value, null,row, column));
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), new Object(), indexGlobalStructure, numofTypeData,
                        new Boolean(false),null, row, column));
                }
                /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(s,formula));
                s.setFormula(formula);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(s,false));
                s.setisFormula(false);*/
                if(p_Variable != null)
                	p_Variable.getM_Observers().addObserver(s);
                //cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);
               
                cmGridModel.setValueAt(new CMCellTDStructureFormula(this,s), row, column);
            }
            obj = getCellObjectAt(row, column - 1);
            if (obj instanceof CMCellTDStructureFormat) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    /*int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = format;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,p_Formatter, row, column - 1);*/
                }
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,format));
                s.setFormat(format);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
                s.setFormatter(p_Formatter);                
               
                cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column - 1);
            }
            obj = getCellObjectAt(row, column + 1);
            if (obj instanceof CMCellTDStructureValue) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = value;
                    ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column + 1));
                }
                CMDefaultValue defaultValue = new CMDefaultValue(value);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
                s.setValue(defaultValue);
//                s.setStringValue(value);
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
                              
                cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
            }
            obj = getCellObjectAt(row, column - 5);
            if (obj instanceof CMCellTDStructureClassState) {
                /*if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = type;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column - 5);
                }*/
                //Object obj1 = cmGridModel.getCellObjectAt(row,column-5);
                CMCellTDStructureClassState selectedItem =
                    (CMCellTDStructureClassState)getCellObjectAt(row, column - 5);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(s,type));
                s.setType(type);
                ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,selectedItem.getDefaultValue(s.getTypeName())));
                s.setLength(CMCellTDStructureClassState.getDefaultValue(s.getTypeName()));
                              
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
            }
            if(p_Variable != null){
            	for (Iterator iter = typeDatasinTestDataToObserver.iterator(); iter
						.hasNext();) {
					ITypeData typedata = (ITypeData) iter.next();
					ce.addEdit(CMModelEditFactory.INSTANCE.createAddObserverVariableInTypeDataModelEdit(p_Variable,typedata));
					p_Variable.getM_Observers().addObserver(typedata);
				}
            }
            //ITypeData newtd = (ITypeData)s.clone();
            setundoredoFormulasMediator(row, column, ce);
          //cc  update(CMIndexTDStructureUpdate.getInstance().getIndex());
        }
    }


    /**
     * @param formula
     * @param value
     * @param type
     * @param format
     * @param p_Formatter
     * @author svonborries
     * @version: Modify to be adapted to the new model of Undo/Redo
     */
    public void setVariableEditValue(String formula, String value, String type, String format, TestDataFormat p_Formatter, UndoableEdit p_ce) {
        CMCompoundEdit ce;
        if(p_ce!=null)
    		ce = (CMCompoundEdit) p_ce;
    	else
    		ce = new CMCompoundEdit();
    	int row = getRowSelected();
        int column = getColumnSelected();
        Object obj = getCellObjectAt(row, column);
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
        ITypeData oldtd = (ITypeData)s.clone();
        if (obj instanceof CMCellTDStructureFormula) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
                int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                Object p_value = formula;
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value, null,row, column));
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(), new Object(), indexGlobalStructure, numofTypeData,
                    new Boolean(false),null, row, column));
            }
            /*ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormulaInTypeDataModelEdit(s,formula));
            s.setFormula(formula);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeisFormulaInTypeDataModelEdit(s,false));
            s.setisFormula(false);
            cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);*/
            
            cmGridModel.setValueAt(new CMCellTDStructureFormula(this, s), row, column);
        }
        obj = getCellObjectAt(row, column - 1);
        if (obj instanceof CMCellTDStructureFormat) {
        	ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatInTypeDataModelEdit(s,format));
            s.setFormat(format);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeFormatterInTypeDataModelEdit(s,p_Formatter));
            s.setFormatter(p_Formatter);
            
            cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column - 1);
        }
        obj = getCellObjectAt(row, column + 1);
        if (obj instanceof CMCellTDStructureValue) {
            if (!cmFrame.isIsPanelTestDataSelected()) {
                int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                Object p_value = value;
                ce.addEdit(setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    obj, indexGlobalStructure, numofTypeData, p_value,null, row, column + 1));
            }
            CMDefaultValue defaultValue = new CMDefaultValue(value);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeValueInTypeDataModelEdit(s,defaultValue));
            s.setValue(defaultValue);
//            s.setStringValue(value);
            //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
                      
            cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
        }
        obj = getCellObjectAt(row, column - 5);
        if (obj instanceof CMCellTDStructureClassState) {
            CMCellTDStructureClassState selectedItem =
                (CMCellTDStructureClassState)getCellObjectAt(row, column - 5);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeTypeInTypeDataModelEdit(s,type));
            s.setType(type);
            ce.addEdit(CMModelEditFactory.INSTANCE.createChangeLengthInTypeDataModelEdit(s,selectedItem.getDefaultValue(s.getTypeName())));
            s.setLength(selectedItem.getDefaultValue(s.getTypeName()));
                        
            cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
        }
        ce.addEdit(CMModelEditFactory.INSTANCE.createChangeGlobalReferenceInTypeDataModelEdit(s,""));
        s.setGlobal("");
        ITypeData newtd = (ITypeData)s.clone();
        setundoredoFormulasMediator(row, column,ce);
       //cc update(CMIndexTDStructureUpdate.getInstance().getIndex());
    }

    public StructureTestData getSelectedStructure() {
        try {
            return (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
        }
        catch (Exception ex) {
            return null;
        }
    }

    public void cutStructure() {
        my_CutCopyPasteManager.setStructureCutOrCopy(getSelectedStructure().clones());
        testData.getM_StructureTestData().remove(getSelectedStructure());
    }

    public void copyStructure() {
        my_CutCopyPasteManager.setStructureCutOrCopy(getSelectedStructure().clones());
    }

    public void pasteStructure() {
        try {
            testData.getM_StructureTestData().addElement(my_CutCopyPasteManager.getStructureCutOrCopy());
            cmFrame.getM_CMUndoMediator().pasteStructureTestData(cmFrame.getPanelTestDataView(),
                CMIndexTDStructureUpdate.getInstance().getindexTestData(), (StructureTestData)my_CutCopyPasteManager.getStructureCutOrCopy(),
                cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TESTDATA"));
            CMIndexTDStructureUpdate.getInstance().setindex(testData.getM_StructureTestData().size() - 1);
        }
        catch (Exception ex) {
        }
    }

    public void deleteStructureTestData(int p_index) {
        int index = p_index;
        if (testData.getM_StructureTestData().size() > 0 && index < testData.getM_StructureTestData().size()) {
            int globalindex = ((StructureTestData)this.testData.getM_StructureTestData().elementAt(index)).getGlobalIndex();
            StructureTestData structTD = (StructureTestData)this.testData.getM_StructureTestData().elementAt(index);
            int idstructTD = structTD.getId();
            this.testData.deleteIdStructure(idstructTD);
            this.testData.getM_StructureTestData().removeElementAt(index);
            int sizeCombinations = this.testData.getTestDataCombination().getM_TestDatas().size();
            for (int i = sizeCombinations - 1; i >= 0; i--) // modificado para la eliminacion de testdatas sin estructuras
            {
                TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                for (int j = td.getM_TDStructure().getM_StructureTestData().size() - 1; j >= 0; j--) {
                    int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                    if (globalindex == globalindex2)
                        td.getM_TDStructure().getM_StructureTestData().removeElementAt(j);
                }
                if (td.getM_TDStructure().getM_StructureTestData().size() == 0) {
                    int idTD = td.getId();
                    this.testData.deleteIdTestData(idTD);
                    this.testData.getTestDataCombination().getM_TestDatas().removeElementAt(i);
                    for (int k = this.getTDStructure().getM_TestDataSet().size() - 1; k >= 0; k--) {
                        TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(k);
                        //hcanedo_21_09_2004_begin
                        int indextds = -1; //=tds.getM_TestDataCombinations().getM_TestDatas().indexOf(td);
                        String nameTestData = td.getName();
                        for (int h = 0; h < tds.getM_TestDataCombinations().getM_TestDatas().size(); h++) {
                            TestData tdaux = (TestData)tds.getM_TestDataCombinations().getM_TestDatas().elementAt(h);
                            if (nameTestData.equals(tdaux.getName())) {
                                indextds = h;
                            }
                        }
                        if (indextds >= 0) {
                            tds.getM_TestDataCombinations().getM_TestDatas().remove(indextds);
                        }
                        //hcanedo_21_09_2004_end
                        if (tds.getM_TestDataCombinations().getM_TestDatas().size() == 0) {
                            int idTDS = tds.getId();
                            this.getTDStructure().deleteIdTestDataSet(idTDS);
                            String name = tds.getName();
                            this.getTDStructure().getM_ResultComparation().getTestDataSetActual().remove(name);
                            this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().remove(name);
                            this.getTDStructure().getM_TestDataSet().removeElementAt(k);
                        }
                    }
                }
            }
            if (testData.getM_StructureTestData().size() == 0) {
                cmFrame.statesMenusTDStructureEditDelete(false);
                cmFrame.stateInsertColumnOptionsinStructure(false);
            }
            if (testData.getM_TestDataSet().size() == 0) {
                cmFrame.statesMenusTestDataSetEditDeleteReport(false);
            }
            if (testData.getTestDataCombination().getM_TestDatas().size() == 0) {
                cmFrame.statesMenusTestDataEditDeleteAssign(false);
            }
            CMIndexTDStructureUpdate.getInstance().setindex(index - 1);
            update(0);
        }
    }

    public void addStructureTestDataAt(int p_index, StructureTestData p_StructureTestData) {
        p_StructureTestData.setName(p_StructureTestData.generateName(testData,null));
        this.getTDStructure().getM_StructureTestData().insertElementAt(p_StructureTestData, p_index);
    }

    public void changeStructureTestDataDescription(int p_Index, String p_Description, String p_Type,
        StructureTestData m_StructureTestData) {
            StructureTestData tds = (StructureTestData)testData.getM_StructureTestData().elementAt(p_Index);
            tds.setDescription(p_Description);
            tds.setType(p_Type);
    }
//REFACTORED CODE, TO ALLOW COMMANDS THAT ONLY EDIT MODEL CLASES
    //svonborries_24022006_begin

    public void changeValuesInGridTDstructure(Object p_editingObject, int indexStructure, String p_value,
        int p_row, int p_column) {
            editingObject = p_editingObject;
            int row = p_row;
            int column = p_column;
            String value = p_value;
            if (editingObject == null) {
                return;
            }
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(indexStructure); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            if (!cmFrame.isIsPanelTestDataSelected()) {
                int indexGlobalStructure = std.getGlobalIndex();
                int numofTypeData = cmGridModel.numOfCell(row);
                setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                    editingObject, indexGlobalStructure, numofTypeData, value,null, row, column);
            }
            /* if (editingObject instanceof CMCellTDStructureKey) {
            	
                cmGridModel.setValueAt(new CMCellTDStructureKey(this, s), row, column);
            } //end
            else
                //new harold
                if (editingObject instanceof CMCellTDStructureField) {                	
                    cmGridModel.setValueAt(new CMCellTDStructureField(this, getSelectedTypeData()), row, column);
            } *///end
            /*else if (editingObject instanceof CMCellTDStructureName) {
            	CMCellTDStructureName newCMCellTDStructureName = new CMCellTDStructureName(this, testData);
            	newCMCellTDStructureName.setName(s.getName());
                cmGridModel.setValueAt(newCMCellTDStructureName, row, column);
            }
            //My add.............................................
            else if (editingObject instanceof CMCellTDStructureNewColumn) {
            	CMCellTDStructureNewColumn newCMCellTDStructureNewColumn = new CMCellTDStructureNewColumn(this, testData);
            	newCMCellTDStructureNewColumn.setName((String)value);
                cmGridModel.setValueAt(newCMCellTDStructureNewColumn, row, column);
            }

            else if (editingObject instanceof CMCellTDStructureLength) {
            	CMCellTDStructureLength newCMCellTDStructureLength = new CMCellTDStructureLength(this, testData);
                newCMCellTDStructureLength.setName(s.getLength());
                cmGridModel.setValueAt(newCMCellTDStructureLength, row, column);
            }
            else if (editingObject instanceof CMCellTDStructurePrefix) {
            	CMCellTDStructurePrefix newCMCellTDStructurePrefix = new CMCellTDStructurePrefix(this, testData);
            	newCMCellTDStructurePrefix.setName(s.getPrefix());
                cmGridModel.setValueAt(newCMCellTDStructurePrefix, row, column);
            }
            else if (editingObject instanceof CMCellTDStructureSuffix) {
            	CMCellTDStructureSuffix newCMCellTDStructureSuffix = new CMCellTDStructureSuffix(this, testData);
            	newCMCellTDStructureSuffix.setName(s.getSuffix());
                cmGridModel.setValueAt(newCMCellTDStructureSuffix, row, column);
            }*/
            /*else if (editingObject instanceof CMCellTDStructureClassState) {
                CMCellTDStructureClassState.getDefaultValue(s.getType());
                
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column + 1);
            }
            else if (editingObject instanceof CMCellTDStructureFormula) {
                //cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureFormula(this, s), row, column);
            }
            else if (editingObject instanceof CMCellTDStructureValue) {
                //s.setValue(CMFormatFactory.applyAnyFormat(s.getM_Formatter(), value, s.getM_Formatter()));
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column);
            }
            else
                //new harold
                if (editingObject instanceof CMCellTDStructureFormat) {
                   // cmGridModel.setValueAt(new CMCellTDStructureFormat(testData, s.getStringValue()), row, column);
                	
                	cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column);
            } *///end
    }
//  svonborries_24022006_end
    public void setUndoRedoMediatorCell(int p_index, String oldValue, String value, int row, int column,
        boolean isTestDataPanelSelected,UndoableEdit p_ce) {
            if (!oldValue.equals(value)) {
                if (isTestDataPanelSelected) {
                    int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
                    cmFrame.getM_CMUndoMediator().changeValuesInTDSructureInTestData(cmFrame.getPanelTestDataView(),
                        indexTestData, p_index, editingObject, value, oldValue, row, column, cmFrame.getContentTabbedPane(),
                        CMMessages.getString("TESTDATA_TESTDATA"),p_ce);
                    this.update(CMIndexTDStructureUpdate.getInstance().getIndex());
                }
                else {
                    cmFrame.getM_CMUndoMediator().changeValuesInTDSructure(this, p_index, editingObject, value, oldValue, row,
                        column, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TDSTRUCTURE"),p_ce);
                }
            }

    }

    public void redoSetGlobalinTDSTructure(int numoftable, int numofrow) {
        try {
            if (testData.getM_StructureTestData().size() != 0) {
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
                ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
                // typ.setGlobalreferences(typ.getGlobalreferences()+1);
                typ.setGlobal("G");
            }
        }
        catch (Exception ex) {
        }
    }

    public int undoSetGlobalinTDSTructure(int p_row, int p_column, int p_index, ITypeData p_TypeData) {
        if (cmFrame.isIsPanelTestDataSelected()) {
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            std.getTypeData().setElementAt(p_TypeData, p_row - 1);
            return std.getGlobalIndex();
        }
        return -1;
    }

    public void redoGlobalReferenceValuesinTestData(int p_row, int p_column, int p_index, ITypeData p_typ) {
        if (cmFrame.isIsPanelTestDataSelected()) {
            int row = p_row;
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            s.setGlobal("G");
            s.setField(p_typ.getField());
            s.setFormat(p_typ.getFormat());
            s.setFormatter(p_typ.getFormatter());
            //s.setFormula(p_typ.getStringFormula());
            s.setKey(p_typ.getKey());
            s.setLength(p_typ.getLength());
            s.setName(p_typ.getName());
            //My add..................
           //ccastedo 27.09.06  s.setToolVendorOT(p_typ.getToolVendorOT());
            s.setStateOT(indexFromjComboBoxOT(p_typ.getToolVendorOT(CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject())));

            s.setPrefix(p_typ.getPrefix());
            s.setSuffix(p_typ.getSuffix());
            s.setType(p_typ.getTypeName());
            s.setValue(p_typ.getValue());
            //s.setStringValue(p_typ.getStringValue());
        }
    }

    public void undoRedoInValidGlobalAndFormulaInTestData(int p_row, int p_column, int p_index, ITypeData p_typ) {
        if (cmFrame.isIsPanelTestDataSelected()) {
            int row = p_row;
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            s.setGlobal(p_typ.getGlobal());
            s.setField(p_typ.getField());
            s.setFormat(p_typ.getFormat());
            s.setFormatter(p_typ.getFormatter());
            //s.setFormula(p_typ.getStringFormula());
            s.setKey(p_typ.getKey());
            s.setLength(p_typ.getLength());
            s.setName(p_typ.getName());
            //My add..................
           //ccastedo 27.09.06  s.setToolVendorOT(p_typ.getToolVendorOT());
            s.setStateOT(indexFromjComboBoxOT(p_typ.getToolVendorOT(CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject())));

            s.setPrefix(p_typ.getPrefix());
            s.setSuffix(p_typ.getSuffix());
            s.setType(p_typ.getTypeName());
            s.setValue(p_typ.getValue());
            //s.setStringValue(p_typ.getStringValue());
        }
    }

    public void undoRedoReferenceGlobalInTDStructure(int p_row, int p_column, int p_index, String value,
        Vector p_OldReferenceInTestData) {
            int row = p_row;
            int column = p_column;
            if (row > 0 && column > 0) {
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
                ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
                s.setGlobal(value);
                int globalindex = std.getGlobalIndex();
                for (int i = 0; i < testData.getTestDataCombination().getM_TestDatas().size(); i++) {
                    TestData td = (TestData)testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                    for (int j = 0; j < td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                        int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                        String valuei = Integer.toString(i);
                        String valuej = Integer.toString(j);
                        if (globalindex == globalindex2 && p_OldReferenceInTestData.contains(valuei + valuej)) {
                            StructureTestData tds = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j));
                            ITypeData typ = (ITypeData)tds.getTypeData().elementAt(cmGridModel.numOfCell(row));
                            typ.setGlobal(value);
                        }
                    }
                }
            }
    }

    /**
     * @param p_row
     * @param p_column
     * @param p_index
     * @author svonborries
     * @version: Modify to adapt the new model of Undo/Redo
     */
    public void redosetFormula(int p_row, int p_column, int p_index) {
            int row = p_row;
            int column = p_column;
            Object obj = getCellObjectAt(row, column);
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            if (obj instanceof CMCellTDStructureFormula) {
                //cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureFormula(this, s), row, column);
            }
            obj = getCellObjectAt(row, column - 1);
            if (obj instanceof CMCellTDStructureFormat) {
            	
                cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column - 1);
            }
            obj = getCellObjectAt(row, column + 1);
            if (obj instanceof CMCellTDStructureValue) {
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
            }
            obj = getCellObjectAt(row, column - 5);
            if (obj instanceof CMCellTDStructureClassState) {
            	
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
            }
    }

    public void undoRedosetVariable(int p_row, int p_column, int p_index, String formula, String value, String type,
        String format, TestDataFormat p_Formatter, boolean isFormula) {
            int row = p_row;
            int column = p_column;
            Object obj = getCellObjectAt(row, column);
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            if (obj instanceof CMCellTDStructureFormula) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = formula;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column);
                }
                /*s.setFormula(formula);
                s.setisFormula(false);
                cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);*/
               
                cmGridModel.setValueAt(new CMCellTDStructureFormula(this, s), row, column);
            }
            obj = getCellObjectAt(row, column - 1);
            if (obj instanceof CMCellTDStructureFormat) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = format;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,p_Formatter, row, column - 1);
                }
                s.setFormat(format);
                s.setFormatter(p_Formatter);
               
                cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column - 1);
            }
            obj = getCellObjectAt(row, column + 1);
            if (obj instanceof CMCellTDStructureValue) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = value;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null,row, column + 1);
                }
                CMDefaultValue defaultValue = new CMDefaultValue(value);
                s.setValue(defaultValue);
                //TODO ADD TO THE COMPOUND
                //s.setStringValue(value);
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
              
                cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
            }
            obj = getCellObjectAt(row, column - 5);
            if (obj instanceof CMCellTDStructureClassState) {
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    int indexGlobalStructure = std.getGlobalIndex();
                    int numofTypeData = cmGridModel.numOfCell(row);
                    Object p_value = type;
                    setReferenceValuesForGlobalStructure(testData.getTestDataCombination(),
                        obj, indexGlobalStructure, numofTypeData, p_value,null, row, column - 5);
                }
                //Object obj1 = cmGridModel.getCellObjectAt(row,column-5);
                CMCellTDStructureClassState selectedItem =
                    (CMCellTDStructureClassState)getCellObjectAt(row, column - 5);
                s.setType(type);
                s.setLength(selectedItem.getDefaultValue(s.getTypeName()));
                
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
            }
    }

    public void tyeDatasForObseverAVariable(int p_numofTypeData, int p_indexGlobalStructure,
            TestDataCombinations p_testDataCombinations, Vector vectorTD) {
                for (int i = 0; i < p_testDataCombinations.getM_TestDatas().size(); i++) {
                    TestData m_td = (TestData)p_testDataCombinations.getM_TestDatas().elementAt(i);
                    for (int j = 0; j < m_td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                        StructureTestData m_tds = (StructureTestData)m_td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                        if (m_tds.getGlobalIndex() == p_indexGlobalStructure) {
                            ITypeData s = (ITypeData)m_tds.getTypeData().elementAt(p_numofTypeData);
                            if (s.getGlobal().equals("G")) {
                                vectorTD.addElement(s);
                            }
                        }
                    }
                }
        }
    /**
     * @param p_row
     * @param p_column
     * @param p_index
     * @author svonborries
     * @version: Modify to adapt to the new model of Undo/Redo
     */
    public void undosetFormula(int p_row, int p_column, int p_index) {

            int row = p_row;
            int column = p_column;
            Object obj = getCellObjectAt(row, column);
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(p_index); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            if (obj instanceof CMCellTDStructureFormula) {
                //cmGridModel.setValueAt(new CMCellTDStructureFormula(testData, s.getStringFormula()), row, column);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureFormula(this, s), row, column);
            }
            obj = getCellObjectAt(row, column - 1);
            if (obj instanceof CMCellTDStructureFormat) {
            	
                cmGridModel.setValueAt(new CMCellTDStructureFormat(this, s), row, column - 1);
            }
            obj = getCellObjectAt(row, column + 1);
            if (obj instanceof CMCellTDStructureValue) {
                //cmGridModel.setValueAt(new CMCellTDStructureValue(testData, s.getStringValue()), row, column + 1);
            	
            	cmGridModel.setValueAt(new CMCellTDStructureValue(this, s), row, column + 1);
            }
            obj = getCellObjectAt(row, column - 5);
            if (obj instanceof CMCellTDStructureClassState) {
            	
                cmGridModel.setValueAt(new CMCellTDStructureLength(this, s), row, column - 4);
            }
    }

    public void undoCreateTestDataSet(int p_testDataSet, int p_idTestDataSet) {
        //hcanedo_21_09_2004_begin
        this.getTDStructure().deleteIdTestDataSet(p_idTestDataSet); //this.getTDStructure().degenerateIDTestDataSet();
        //hcanedo_21_09_2004_end
        this.getTDStructure().getM_TestDataSet().remove(p_testDataSet);
        cmFrame.getPanelTestDataSetView().update();
    }

    public void redoCreateTestDataSet(TestDataSet p_testDataSet) {
        TestDataSet newTestDataSet = new TestDataSet(this.getTDStructure());
        newTestDataSet.setM_TestDataCombinations(p_testDataSet.getM_TestDataCombinations());
        newTestDataSet.setDescription(p_testDataSet.getDescription());
        newTestDataSet.setM_ReportFormat(p_testDataSet.getM_ReportFormat());
        this.getTDStructure().getM_TestDataSet().addElement(newTestDataSet);
        cmFrame.getPanelTestDataSetView().update();
    }

    public void redoGenerateTDStructure(Vector p_ResultCompariosnActual, Vector p_ResultComparisonTarget,
        Vector p_TestDataSetDeleted, Vector p_TestDataSetIndex, Vector p_TestDataDeleted, Vector p_TestDataIndex,
        StructureTestData p_StructureDeleted, int p_IndexStructure, Vector p_TDDeletedinTDS, Vector p_StDeletedinTD) {
            this.getTDStructure().getM_ResultComparation().setTestDataSetActual(p_ResultCompariosnActual);
            this.getTDStructure().getM_ResultComparation().setTestDataSetTarget(p_ResultComparisonTarget);
            for (int i = p_TestDataSetDeleted.size() - 1; i >= 0; i--) {
                this.getTDStructure().getM_TestDataSet().insertElementAt(p_TestDataSetDeleted.elementAt(i),
                    p_TestDataSetIndex.elementAt(i).hashCode());
            }
            for (int i = p_TestDataDeleted.size() - 1; i >= 0; i--) {
                this.getTDStructure().getTestDataCombination().getM_TestDatas().insertElementAt(p_TestDataDeleted.elementAt(i),
                    p_TestDataIndex.elementAt(i).hashCode());
            }
            this.testData.getM_StructureTestData().insertElementAt(p_StructureDeleted, p_IndexStructure);
            for (int i = p_StDeletedinTD.size() - 1; i >= 0; i--) {
                CMComplexObjectToDeleted obj = (CMComplexObjectToDeleted)p_StDeletedinTD.elementAt(i);
                TestData td = (TestData)this.getTDStructure().getTestDataCombination().getM_TestDatas().elementAt(obj.getPosi());
                td.getM_TDStructure().getM_StructureTestData().insertElementAt(obj.getM_Object(), obj.getPosj());
            }
            for (int i = p_TDDeletedinTDS.size() - 1; i >= 0; i--) {
                CMComplexObjectToDeleted obj = (CMComplexObjectToDeleted)p_TDDeletedinTDS.elementAt(i);
                TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(obj.getPosi());
                tds.getM_TestDataCombinations().getM_TestDatas().insertElementAt(obj.getM_Object(), obj.getPosj());
            }
            if (testData.getM_StructureTestData().size() > 0) {
                cmFrame.statesMenusTDStructureEditDelete(true);
            }
            if (testData.getM_TestDataSet().size() > 0) {
                cmFrame.statesMenusTestDataSetEditDeleteReport(true);
            }
            if (testData.getTestDataCombination().getM_TestDatas().size() > 0) {
                cmFrame.statesMenusTestDataEditDeleteAssign(true);
            }

				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().chargeVectorIds(testData);

    }

    public void redoDeleteTestData(int p_Index) {
        TestData td = (TestData)this.getTDStructure().getTestDataCombination().getM_TestDatas().elementAt(p_Index);
        for (int i = this.getTDStructure().getM_TestDataSet().size() - 1; i >= 0; i--) { //modificado 19.05.04
            TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(i);
            //hcanedo_21_09_2004_begin
            int indextds = -1; //=tds.getM_TestDataCombinations().getM_TestDatas().indexOf(td);
            String nameTestData = td.getName();
            for (int h = 0; h < tds.getM_TestDataCombinations().getM_TestDatas().size(); h++) {
                TestData tdaux = (TestData)tds.getM_TestDataCombinations().getM_TestDatas().elementAt(h);
                if (nameTestData.equals(tdaux.getName())) {
                    indextds = h;
                }
            }
            if (indextds >= 0) {
                tds.getM_TestDataCombinations().getM_TestDatas().remove(indextds);
            }
            //hcanedo_21_09_2004_end
            if (tds.getM_TestDataCombinations().getM_TestDatas().size() == 0) {
                /**  */

        		/*nuevo codigo para la eliminacion de Id para su reutilizacion  19. may 2004         */

                /**  */
                int idTDS = tds.getId();
                this.getTDStructure().deleteIdTestDataSet(idTDS);

                /**  */
                String name = tds.getName();
                this.getTDStructure().getM_ResultComparation().getTestDataSetActual().remove(name);
                this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().remove(name);
                this.getTDStructure().getM_TestDataSet().removeElementAt(i);
            }
        }

        /**  */

        	/*nuevo codigo para la eliminacion de Id para su reutilizacion  19. may 2004         */

        /**  */
        int idTD = td.getId();
        this.getTDStructure().deleteIdTestData(idTD);

        /**  */
        this.getTDStructure().getTestDataCombination().getM_TestDatas().removeElementAt(p_Index);//CMIndexTDStructureUpdate.getInstance().getindexTestData());
        if (this.getTDStructure().getTestDataCombination().getM_TestDatas().size() == 0) {
            cmFrame.statesMenusTestDataEditDeleteAssign(false);
        }
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update();
    }

    public void undoDeleteTestData(Vector p_ResultCompariosnActual, Vector p_ResultComparisonTarget,
        Vector p_TestDataSetDeleted, Vector p_TestDataSetIndex, TestData p_tesData, int p_Index, Vector p_TDDeletedinTDS) {
            this.getTDStructure().getM_ResultComparation().setTestDataSetActual(p_ResultCompariosnActual);
            this.getTDStructure().getM_ResultComparation().setTestDataSetTarget(p_ResultComparisonTarget);
            for (int i = p_TestDataSetDeleted.size() - 1; i >= 0; i--) {
                this.getTDStructure().getM_TestDataSet().insertElementAt(p_TestDataSetDeleted.elementAt(i),
                    p_TestDataSetIndex.elementAt(i).hashCode());
            }
            this.getTDStructure().getTestDataCombination().getM_TestDatas().insertElementAt(p_tesData, p_Index);
            for (int i = p_TDDeletedinTDS.size() - 1; i >= 0; i--) {
                CMComplexObjectToDeleted obj = (CMComplexObjectToDeleted)p_TDDeletedinTDS.elementAt(i);
                TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(obj.getPosi());
                tds.getM_TestDataCombinations().getM_TestDatas().insertElementAt(obj.getM_Object(), obj.getPosj());
            }
            if (testData.getM_TestDataSet().size() > 0) {
                cmFrame.statesMenusTestDataSetEditDeleteReport(true);
            }
            if (testData.getTestDataCombination().getM_TestDatas().size() > 0) {
                cmFrame.statesMenusTestDataEditDeleteAssign(true);
            }

				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().chargeVectorIds(testData);

    }

    public void undoDeleteTestDataSet(Vector p_ResultCompariosnActual, Vector p_ResultComparisonTarget,
        TestDataSet p_TestDataSet, int p_Index) {
            this.getTDStructure().getM_ResultComparation().setTestDataSetActual(p_ResultCompariosnActual);
            this.getTDStructure().getM_ResultComparation().setTestDataSetTarget(p_ResultComparisonTarget);
            this.getTDStructure().getM_TestDataSet().insertElementAt(p_TestDataSet, p_Index);
            if (testData.getM_TestDataSet().size() > 0) {
                cmFrame.statesMenusTestDataSetEditDeleteReport(true);
            }

				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().chargeVectorIds(testData);

            for (int i = 0; i < p_TestDataSet.getM_TestDataCombinations().getM_TestDatas().size(); i++) {
                TestData td = (TestData)p_TestDataSet.getM_TestDataCombinations().getM_TestDatas().elementAt(i);
                td.setContTestDataSet(td.getContTestDataSet()+ 1);
               // if (td.getContTestDataSet() == 0)
                    td.setSet(true);
            }
            //if(p_Index < cmFrame.getPanelTestDataSetView().getM_CMScrollPaneTestDataSetDescription().getM_CMTestDataSetView().getRowCount())
            	CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(p_Index);
            cmFrame.getPanelTestDataSetView().update();
    }

    public void undoCancelAssignTDStructureInTestData(Vector m_ResultCompariosnActual, Vector m_ResultComparisonTarget,
        Vector p_TestDataSetDeleted, Vector p_TestDataSetIndex, TestData m_TestData, int m_IndexTestData,
        StructureTestData m_StructureTestData, int m_indexStructure, boolean isdeletedTD, Vector p_TDDeletedinTDS) {
            this.getTDStructure().getM_ResultComparation().setTestDataSetActual(m_ResultCompariosnActual);
            this.getTDStructure().getM_ResultComparation().setTestDataSetTarget(m_ResultComparisonTarget);
            for (int i = p_TestDataSetDeleted.size() - 1; i >= 0; i--) {
                this.getTDStructure().getM_TestDataSet().insertElementAt(p_TestDataSetDeleted.elementAt(i),
                    p_TestDataSetIndex.elementAt(i).hashCode());
            }
            for (int i = p_TDDeletedinTDS.size() - 1; i >= 0; i--) {
                CMComplexObjectToDeleted obj = (CMComplexObjectToDeleted)p_TDDeletedinTDS.elementAt(i);
                TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(obj.getPosi());
                tds.getM_TestDataCombinations().getM_TestDatas().insertElementAt(obj.getM_Object(), obj.getPosj());
            }
            if (isdeletedTD)
                this.getTDStructure().getTestDataCombination().getM_TestDatas().insertElementAt(m_TestData, m_IndexTestData);
            TestData auxTD = (TestData)testData.getTestDataCombination().getM_TestDatas().elementAt(m_IndexTestData);
            auxTD.getM_TDStructure().getM_StructureTestData().insertElementAt(m_StructureTestData, m_indexStructure);
            if (testData.getM_TestDataSet().size() > 0) {
                cmFrame.statesMenusTestDataSetEditDeleteReport(true);
            }
            if (testData.getTestDataCombination().getM_TestDatas().size() > 0) {
                cmFrame.statesMenusTestDataEditDeleteAssign(true);
            }

				CMIndexTDStructureUpdate.getInstance().getTDStructureManager().chargeVectorIds(testData);

    }

    public void redoCancelAssignTDStructureInTestData(int m_IndexTestData, int m_indexStructure) {
        TestData tds = (TestData)this.getTDStructure().getTestDataCombination().getM_TestDatas().elementAt(m_IndexTestData);
        tds.getM_TDStructure().getM_StructureTestData().removeElementAt(m_indexStructure);
        this.deleteTDStructurefromTestDataRedo();
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update();
        if (this.getTDStructure().getTestDataCombination().getM_TestDatas().size() == 0) {
            cmFrame.stateMenusAssignTdStructure(false);
        }
    }

    public void redoDeleteTestDataSet(int p_Index) {
        TestDataSet tds = (TestDataSet)this.getTDStructure().getM_TestDataSet().elementAt(p_Index);
        for (int i = 0; i < tds.getM_TestDataCombinations().getM_TestDatas().size(); i++) {
            TestData td = (TestData)tds.getM_TestDataCombinations().getM_TestDatas().elementAt(i);
            td.setContTestDataSet(td.getContTestDataSet() - 1);
            if (td.getContTestDataSet() == 0)
                td.setSet(false);
        }

        /**  */

       		/*nuevo codigo para la eliminacion de Id para su reutilizacion  19. may 2004         */

        /**  */
        int idTDS = tds.getId();
        this.getTDStructure().deleteIdTestDataSet(idTDS);

        /**  */
        String name = tds.getName();
        this.getTDStructure().getM_ResultComparation().getTestDataSetActual().remove(name);
        this.getTDStructure().getM_ResultComparation().getTestDataSetTarget().remove(name);
        this.getTDStructure().getM_TestDataSet().removeElement(tds);//CMIndexTDStructureUpdate.getInstance().getindexTestDataSet());
        if (this.getTDStructure().getM_TestDataSet().size() == 0) {
            cmFrame.statesMenusTestDataSetEditDeleteReport(false);
        }
        if(CMIndexTDStructureUpdate.getInstance().getindexTestDataSet() - 1 >= 0)
        	CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(CMIndexTDStructureUpdate.getInstance().getindexTestDataSet() - 1);
        cmFrame.getPanelTestDataSetView().update();
    }

    public void generateAllTestDataEdit() {
    	StructureTestData createStructure=insertDataTDStructureView(null);//the null one is a CMCompoundEdit
        GenerateAllTDStructure(createStructure, null,2);//the null one is a CMCompoundEdit
        CMIndexTDStructureUpdate.getInstance().setindex(0);
        CMIndexTDStructureUpdate.getInstance().setindexTestData(0);
        cmFrame.getPanelTDStructureView().update();
        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update(); //new 05.05.04
    }

    public void generatePosTestDataEdit() {
        StructureTestData createStructure=insertDataTDStructureView(null);//the null one is a CMCompoundEdit
        GenerateTDStructureForPositiveTestCase(createStructure,null,2);//the null one is a CMCompoundEdit
        CMIndexTDStructureUpdate.getInstance().setindex(0);
        CMIndexTDStructureUpdate.getInstance().setindexTestData(0);
        cmFrame.getPanelTDStructureView().update();
        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update(); //new 05.05.04
    }

    public void generateNegTestDataEdit() {
        StructureTestData createdStructure=insertDataTDStructureView(null);//the null one is a CMCompoundEdit
        GenerateTDStructureForNegativeTestCase(createdStructure,null,2);//the null one is a CMCompoundEdit
        CMIndexTDStructureUpdate.getInstance().setindex(0);
        CMIndexTDStructureUpdate.getInstance().setindexTestData(0);
        cmFrame.getPanelTDStructureView().update();
        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update(); //new 05.05.04
    }

    //hcanedo_21102004_begin
    public void generateSpcTestDataEdit(Vector p_testcaseinTestData) {
        //     if(p_testcaseinTestData!= null && p_testcaseinTestData.size()>0)
        //	insertDataTDStructureView();
       // GenerateTDStructureForEspecificTestCase(p_testcaseinTestData);
        CMIndexTDStructureUpdate.getInstance().setindex(0);
        CMIndexTDStructureUpdate.getInstance().setindexTestData(0);
        cmFrame.getPanelTDStructureView().update();
        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update(); //new 05.05.04
    }
    /**
     * @deprecated
     * @param p_testCaseintestData
     * @param p_CreatedStructure
     */
    public void GenerateTDStructureForEspecificTestCase(Vector p_testCaseintestData, StructureTestData p_CreatedStructure) {
        Vector value = new Vector();
        testCaseIntestData = p_testCaseintestData;
        TDStructureManager testDataManager = cmFrame.getCmApplication().getSessionManager().getTDStructureManager();
        Structure m_Structure = testData.getM_TestObject().getStructure();
        int intervalAmount=2;
        CMDialogIntervalValuesChooser cmd= new CMDialogIntervalValuesChooser(cmFrame);
        cmd.setVisible(true);
        if(cmd.isOkSelected()){
        	intervalAmount=cmd.getAmountOfIntervalValues();
        }
        if (p_testCaseintestData != null && p_testCaseintestData.size() > 0) {
            insertDataTDStructureView(null);
            int j = 0;
            int index = 0;
            int sizeTC = testCaseIntestData.size();
            for (int i = 0; i < sizeTC; i++) {
                TDStructure newTDStructure = new TDStructure(); //new
                newTDStructure.setTestDataCombination(testData.getTestDataCombination()); //new
                TestData newTestData = new TestData(newTDStructure); //new
                newTestData.setName(newTestData.generateName(testData,null));//the null one is a CMCompoundEdit
                newTestData.setDescription(newTestData.generateDescription()); //new
                TestCase testCase = ((TestCase)testCaseIntestData.elementAt(i));
                newTestData.setM_TestCaseinTestData(new String(testCase.getName()) + new String(testCase.getStateName())); //new
                newTestData.setM_RiskLevel(testCase.getRiskLevel());
                StructureTestData s_TestData = new StructureTestData();
                setNameDescription2(s_TestData);
                s_TestData.setType(BusinessRules.TYPETDSTRUCTURE_PRIMARY);
                s_TestData.setGlobalIndex(testData.getM_StructureTestData().size() - 1);
                index = testData.getTestDataCombination().getM_TestDatas().size();
                newTestData.getM_TDStructure().getM_StructureTestData().addElement(s_TestData);
                String names = testDataManager.generateTypeDataNameForTDStructure(m_Structure);
                String preservednames = new String(names);
                if(names.equals(";")){
                	return;
                }
                //My add...........
                String ObjectTypes = testDataManager.generateTypeDataObjectTypesForTDStructure(m_Structure);

                String values = testDataManager.generateTypeDataForTDStructure(testCase, m_Structure);
                int numOfName = -1;
//              HCanedo_06122005_Begin
                int lastValueSize=0;
                StructureTestData stdPopulated=null;
//    HCanedo_06122005_end
                while (names.length() != 0 && !names.equals(";")) //$NON-NLS-1$
                {
                    numOfName++;
                    ITypeData typeData = new TypeDataLocal();
                    StructureTestData std = (StructureTestData)newTestData.getM_TDStructure().getM_StructureTestData().elementAt(j); //new
                    stdPopulated= std;
                    String name = testDataManager.generateTypeDataName(names);
                    names = CMCharUtils.trimComa(names);
                    names = CMCharUtils.killFirstElement(names);

//                  My adds
                    String individualObjectTypes = testDataManager.generateTypeDataObjectTypes(ObjectTypes);
                    ObjectTypes = CMCharUtils.trimComa(ObjectTypes);
                    ObjectTypes = CMCharUtils.killFirstElement(ObjectTypes);
                    //My adds end..................

                    int change = value.size();
                    value = testDataManager.generateTypeDataValue(values,testData.getM_TestObject(),intervalAmount);
                    values = CMCharUtils.trimComa(values);
                    values = CMCharUtils.killFirstElement(values);
                    /*Hcanedo_18012006_Begin
                    typeData.setField(name); // new harold
                    typeData.setName(name);

//                  My adds......................................
                    typeData.setToolVendorOT(individualObjectTypes);
              //      typeData.setStateOT(indexFromjComboBoxOT(individualObjectTypes.toString()));
               //     typeData.setTVT(stateTVT);
                	HCanedo_18012006_end*/
                    deleteUknownStructure(value, s_TestData.getGlobalIndex(), numOfName);
                    /*Hcanedo_18012006_Begin
                    typeData.setType(testDataManager.getType(value.firstElement().toString()));
                    typeData.setLength(length(testDataManager.getType(value.firstElement().toString())));
                    HCanedo_18012006_end*/
                    CMDefaultValue defaultValue = new CMDefaultValue(testDataManager.getValue(value.firstElement().toString()));
                    typeData.setValue(defaultValue);
                    //TODO ADD TO THE COMPOUND
                    //typeData.setStringValue(testDataManager.getValue(value.firstElement().toString()));
                    /*Hcanedo_18012006_Begin
                    typeData.setFormat(BusinessRules.FORMULAS_FORMAT_STRING);
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    typeData.setM_Formatter(new TestDataFormat());
                    typeData.getM_Formatter().setValue(typeData.getValue());
                    HCanedo_18012006_end*/
                    setGlobalReferenceStructure(s_TestData.getGlobalIndex(), std.getTypeData().size(),null);
                    typeData.setGlobal("G");
//                  HCanedo_17112005_begin
                    typeData.setStructureTestData(std);
//                  HCanedo_17112005_end
                    value.removeElementAt(0);
                    if (value.size() > 0) {
                        if (change < value.size()) {
//    HCanedo_06122005_begin
                        	Vector missingValues= new Vector();
                        //	for(int indexValue=0;indexValue<(value.size()-lastValueSize);indexValue++){
                        	for(int indexValue=(value.size()-lastValueSize)-1;indexValue>=0;indexValue--){
//    HCanedo_06122005_end
                        		StringBuffer aux = new StringBuffer(value.elementAt(indexValue).toString());
                        		aux.append(","); //$NON-NLS-1$
                        		aux.append(Integer.toString(numOfName));
                        		value.removeElementAt(indexValue);
                        		missingValues.insertElementAt(aux,0);
                        		//value.insertElementAt(aux.toString(), indexValue);
//    HCanedo_06122005_begin
                        	}
                        	value.addElement(missingValues);
                        	lastValueSize=value.size();
//    HCanedo_06122005_end
                        }
                    }
                    std.getTypeData().addElement(typeData);
                }
                //HCanedo_18012006_begin
                if(stdPopulated!= null){
                	setTypeDataReferences(stdPopulated,p_CreatedStructure);
                }
                //HCanedo_18012006_end
                testData.getTestDataCombination().getM_TestDatas().addElement(newTestData); //new
                if (value.size() > 0) {
                    generateCombinationTables(value, index,p_CreatedStructure);
                }
                values = CMCharUtils.trimComa(values);
                if (!values.trim().equals("")) {
                    combinationsValuesInSameTestCase(preservednames, values, testCase, p_CreatedStructure,intervalAmount);
                }
            }
            testData.setM_TestCaseInTDStructure(testCaseIntestData);
            update(0);
        }
        else {
            update();
        }
        System.gc();
    }

    public Vector getTestCaseinTestData() {
        return (Vector)testCaseIntestData.clone();
    }

    //hcanedo_21102004_end
    //hcanedo_21_09_2004_begin
    public void generateFaultyTestDataEdit() {
        StructureTestData createStructure=insertDataTDStructureView(null);//the null one is a CMCompoundEdit
        GenerateTDStructureForFaultyTestCase(createStructure,null,2);//the null one is a CMCompoundEdit
        CMIndexTDStructureUpdate.getInstance().setindex(0);
        CMIndexTDStructureUpdate.getInstance().setindexTestData(0);
        cmFrame.getPanelTDStructureView().update();
        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
        cmFrame.getPanelTestDataView().update();
        cmFrame.getPanelTestDataSetView().update(); //new 05.05.04
    }

    //hcanedo_21_09_2004_end
    public void undoRedoEditTestDataSetAt(Vector testDatas, String description, int p_indextestdataset) {
        TestDataSet tds = (TestDataSet)testData.getM_TestDataSet().elementAt(p_indextestdataset);
        tds.getM_TestDataCombinations().setM_TestDatas(testDatas);
        tds.setDescription(description);
        cmFrame.getPanelTestDataSetView().update();
    }

    //hcanedo_21_09_2004_begin
    public void chargeOldValuesInTDstructure(TDStructure p_TDStructure) {
        testData.setM_ResultComparation(p_TDStructure.getM_ResultComparation());
        testData.setM_StructureTestData(p_TDStructure.getM_StructureTestData());
        testData.setM_TestCaseInTDStructure(p_TDStructure.getM_TestCaseInTDStructure());
        testData.setM_TestDataSet(p_TDStructure.getM_TestDataSet());
        testData.setM_TestDataSetReportUnit(p_TDStructure.getM_TestDataSetReportUnit());
        testData.setTestDataCombination(p_TDStructure.getTestDataCombination());

			CMIndexTDStructureUpdate.getInstance().getTDStructureManager().chargeVectorIds(testData);

        cmFrame.getPanelTestDataView().setM_TestDataCombinations(testData.getTestDataCombination());
    }

    public void initTDStructureForRedo() {
        testData.deleteIds();
        testData.setM_StructureTestData(new Vector());
        testData.setTestDataCombination(new TestDataCombinations());
        testData.setM_TestDataSet(new Vector()); //new 05.05.04
    }

    public void insertNewColumnforRedo(boolean swRedo, String columnName, int indexre, int indexSTD){
    	int index = 0;

        if (swRedo){
           	 m_NameNewColumn = columnName;
           	Vector newcol = new Vector();
           	int globalindex = ((StructureTestData)this.testData.getM_StructureTestData().elementAt(indexSTD)).getGlobalIndex();

       	    StructureTestData tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexSTD);
       	    int sizeTD = this.testData.getTestDataCombination().getM_TestDatas().size();
            for (int i = 0; i < sizeTD; i++) {
            	Vector newcolumnsView = new Vector(5);
            	newcol.addAll(newcolumnsView);
                 TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                 int sizetd = td.getM_TDStructure().getM_StructureTestData().size();
                 for (int j = 0; j < sizetd; j++) {
                	 int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                     if (globalindex == globalindex2) {
                    	 tdS = (StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                    	 Vector headers = new Vector(5);

                        	 //headers = tdS.getNewColumnsHeader();
                    	 	headers.addAll(tdS.getNewColumnsHeader());
                        	 if (headers.size() <= 0){
                        		 Vector newHeaders = new Vector(5);
                        		 newHeaders.addElement(m_NameNewColumn);
                        		 tdS.setNewColumnsHeader(newHeaders);
                        		 index = 0;
                        	 }
                        	 else{
                        		 headers.insertElementAt(m_NameNewColumn,indexre-5);
                        		 tdS.setNewColumnsHeader(headers);
                        		 index = (headers.size()-1);
                        	 }
                        	 swInsertColumn = true;
                    		 ITypeData typedata = null;//new TypeData();
                        	 Vector typeDatas = tdS.getTypeData();

                        	  int sizeTypeDatas = typeDatas.size();

                              for(int k=0; k < sizeTypeDatas;k++){
                             	 Vector columns = new Vector(5);
                             	 typedata = (ITypeData)typeDatas.elementAt(k);
                             	// columns = typedata.getNewColumns();
                             	columns.addAll(typedata.getNewColumns());
                             	 if (columns.size() <= 0){
                             		 Vector newcolumns = new Vector(5);
                             		 newcolumns.addElement("");
                             		 typedata.setNewColumns(newcolumns);
                             		 index = newcolumns.size() + 4;
                             		newcolumnsView.addElement("");
                             	 }
                             	 else{
                             		  index = (headers.size()-1);
                                      columns.insertElementAt("",indexre-5);
                                      typedata.setNewColumns(columns);
                                      index = columns.size() + 4;
                                      newcolumnsView.addElement("");
                             	 }

                                  }


                     }
                 }
            }

         tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexSTD);
         Vector headers = new Vector(5);
       	 //headers = tdS.getNewColumnsHeader();
         headers.addAll(tdS.getNewColumnsHeader());
       	 if (headers.size() <= 0){
       		 Vector newHeaders = new Vector(5);
       		 newHeaders.addElement(m_NameNewColumn);
       		 tdS.setNewColumnsHeader(newHeaders);
       	 }
       	 else{
       		 headers.insertElementAt(m_NameNewColumn,indexre-5);
       		 tdS.setNewColumnsHeader(headers);
       	 }
         	 index = (headers.size()-1);
       	     swInsertColumn = true;
       		 ITypeData typedata = null;//new TypeData();

           	  Vector typeDatas = tdS.getTypeData();

           	  int sizeTypeDatas = typeDatas.size();

                 for(int k=0; k < sizeTypeDatas;k++){
                	 Vector columns = new Vector(5);
                	 typedata = (ITypeData)typeDatas.elementAt(k);
                	 //columns = typedata.getNewColumns();
                	 columns.addAll(typedata.getNewColumns());
                	 if (columns.size() <= 0){
                		 Vector newcolumns = new Vector(5);
                		 newcolumns.addElement("");
                		 typedata.setNewColumns(newcolumns);
                		 index = newcolumns.size() + 4;
                		newcol.addElement("");
                	 }
                	 else{
                		 index = (headers.size()-1);
                         columns.insertElementAt("",indexre-5);
                         typedata.setNewColumns(columns);
                         index = columns.size() + 4;
                         newcol.addElement("");
                	 }

                 }
            cmGridModel.insertColumn(index,newcol);
            update(indexSTD);
            cmFrame.stateDeleteColumnOptionsinStructure(true);
            cmFrame.stateChangeNameColumnOptionsinStructure(true);
        }

    }

    public void deleteNewColumnTDStructure(boolean swUndo,int p_index,int indexStructure) {

    	int index = 0;
    	int sizeTD = testData.getM_StructureTestData().size();
    	String nameNewColumn = "";
        if ( sizeTD >= 0 ) {

        	 Vector headers = new Vector(5);
         	// TDStructure tdS = testData;
        	 StructureTestData tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexStructure);
         	 headers = tdS.getNewColumnsHeader();


        // 	 int index = (headers.size()-1)+ 5;
         	if (swUndo){
        		index = (headers.size()-1);
        	}
         	else{
         		index = p_index - 5;
         	}
         	nameNewColumn = headers.elementAt(index).toString();
         	if (index >= 0){

         		int globalindex = ((StructureTestData)this.testData.getM_StructureTestData().elementAt(indexStructure)).getGlobalIndex();

           	   // StructureTestData tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexStructure);
           	    int sizeTDs = this.testData.getTestDataCombination().getM_TestDatas().size();
                for (int i = 0; i < sizeTDs; i++) {
                     TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                     int sizetd = td.getM_TDStructure().getM_StructureTestData().size();
                     for (int j = 0; j < sizetd; j++) {
                    	 int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                         if (globalindex == globalindex2) {
                        	    tdS = (StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                        	    Vector oldheaders = new Vector(5);
                        	   // oldheaders = tdS.getNewColumnsHeader();
                        	    oldheaders.addAll(tdS.getNewColumnsHeader());
                           	    oldheaders.removeElementAt(index);//headers.size()-1);

                           	   tdS.setNewColumnsHeader(oldheaders);

                           	   ITypeData typedata =null;//new TypeData();



                           	    Vector typeDatas = tdS.getTypeData();

                                int sizeTypeDatas = typeDatas.size();


                                 for(int k=0; k < sizeTypeDatas;k++){
                              	 	  Vector columns = new Vector(5);
                                      typedata = (ITypeData)typeDatas.elementAt(k);
                                    //  columns = typedata.getNewColumns();
                                      columns.addAll(typedata.getNewColumns());
                                      if (columns.size() <= 0){

                                      }
                                      else{
                                    	  //Here there are an error....
                                           columns.removeElementAt(index);//columns.size()-1);

                                           typedata.setNewColumns(columns);
                                           if (columns.size()<=0){
                                          	 cmFrame.stateDeleteColumnOptionsinStructure(false);
                                          	cmFrame.stateChangeNameColumnOptionsinStructure(false);
                                           }
                                      }
                                }
                         }
                     }
                }
               // Vector headers = new Vector(5);
             	// TDStructure tdS = testData;
            	 tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexStructure);
             	 headers = tdS.getNewColumnsHeader();

             headers.removeElementAt(index);//headers.size()-1);

           	 tdS.setNewColumnsHeader(headers);

           	 ITypeData typedata = null;//new TypeData();



           //	tdS = (StructureTestData)testData.getM_StructureTestData().elementAt(indexStructure);


           	  Vector typeDatas = tdS.getTypeData();

           	  int sizeTypeDatas = typeDatas.size();


               for(int k=0; k < sizeTypeDatas;k++){
              	 Vector columns = new Vector(5);
                     typedata = (ITypeData)typeDatas.elementAt(k);
                     columns.addAll(typedata.getNewColumns());
                    // columns = typedata.getNewColumns();
                     if (columns.size() <= 0){

                      }
                      else{
                           columns.removeElementAt(index);//columns.size()-1);
                           typedata.setNewColumns(columns);
                           if (columns.size()<=0){
                          	 cmFrame.stateDeleteColumnOptionsinStructure(false);
                          	cmFrame.stateChangeNameColumnOptionsinStructure(false);
                           }
                      }
               }

                cmGridModel.removeColumns(index+5,1);//insertColumn(5,newcolumnsView);
                update(indexStructure);//index+5);
                if (!swUndo){
                	cmFrame.getM_CMUndoMediator().deleteTDStructureNewColumn(this, index+5, indexStructure, nameNewColumn, cmFrame.getContentTabbedPane(),
                            CMMessages.getString("TESTDATA_TDSTRUCTURE"));
                }





         	}
        }
    

    }

    //hcanedo_21_09_2004_end
    //////////////////////// GridModel ///////////////////////////////////////////
    public class CMGridModel extends GenericGridModel {
        public CMGridModel(int numRows, int numColumns, CMFrameView p_FrameView) {
            super(numRows, numColumns);
            m_FrameView = p_FrameView;
        }



        public boolean isCellEditable(int row, int column) {
            Object obj = super.getValueAt(row, column);

            if (obj == null) {
                return false;
            }
            if (m_FrameView.isIsPanelTestDataSelected()) {

                if (obj instanceof CMCellHeaderTDStructureName || obj instanceof CMCellHeaderTDStructureObjectTypes ||
                	obj instanceof CMCellHeaderTDStructureType || obj instanceof CMCellHeaderTDStructureLength || obj instanceof CMCellHeaderTDStructurePrefix ||
                    obj instanceof CMCellHeaderTDStructureSuffix || obj instanceof CMCellHeaderTDStructureFormula ||
                    obj instanceof CMCellHeaderTDStructureValue || obj instanceof CMCellTDStructureFormula || obj instanceof CMCellHeaderTDStructureFormat ||
                    obj instanceof CMCellHeaderTDStructureField || obj instanceof CMCellHeaderTDStructureKey ||
                    obj instanceof CMCellTDStructureKey || obj instanceof CMCellTDStructureName ||
                    obj instanceof CMCellTDStructureField || obj instanceof CMCellTDStructureObjectTypes ||
                    obj instanceof CMCellTDStructureNewColumn || obj instanceof CMCellTDStructureClassState ||
                    obj instanceof CMCellTDStructureFormat || obj instanceof CMCellHeaderTDStructureGlobal ||
                    obj instanceof CMCellTDStructureGlobal || obj instanceof CMCellTDStructureLength ||
                    obj instanceof CMCellTDStructurePrefix || obj instanceof CMCellTDStructureSuffix) {
                        return false;
                }
                else {
                    return true;
                }
            }
            else {
                if (m_FrameView.isIsPanelResultComparationSelected()) {
                    return false;
                }
                else {
                    if (obj instanceof CMCellHeaderTDStructureName || /*My Add*/obj instanceof CMCellHeaderTDStructureObjectTypes ||
                    		obj instanceof CMCellHeaderTDStructureNewColumn ||
                    	obj instanceof CMCellHeaderTDStructureType || /*My Add*/obj instanceof CMCellHeaderTDStructureNewColumn ||
                        obj instanceof CMCellHeaderTDStructureLength || obj instanceof CMCellHeaderTDStructurePrefix ||

                        obj instanceof CMCellHeaderTDStructureSuffix || obj instanceof CMCellHeaderTDStructureFormula ||
                        obj instanceof CMCellHeaderTDStructureValue || /*obj instanceof CMCellTDStructureLength ||*/
                        obj instanceof CMCellTDStructureFormula || obj instanceof CMCellHeaderTDStructureFormat ||
                        obj instanceof CMCellHeaderTDStructureField || obj instanceof CMCellHeaderTDStructureKey ||
                        obj instanceof CMCellTDStructureKey || obj instanceof CMCellTDStructureFormat || /*obj instanceof CMCellTDStructureNewField ||*/
                        obj instanceof CMCellHeaderTDStructureGlobal || obj instanceof CMCellTDStructureGlobal) {
                            return false;
                    }
                    else {
                        return true;

                    }
                }
            }
        }

        public int numOfCell(int row) {
            int j = row;
            int cont = -1;

            if (row>=this.getRowCount())
            	return this.getRowCount();
            if(row<0)
            	return 0;
            boolean sw = true;
            do {
            	if (j==-1)
            	  sw = false;
            	else{
            		Object obj = super.getValueAt(j, 0);
                    if (obj instanceof CMCellHeaderTDStructureKey) {
                        sw = false;
                    }
                    else {
                        cont++;
                        j--;
                    }
            	}
                
            } while (sw);
            return cont;
        }

   /*     public void setFormulas(String formula, String value, String type, int row, int column, String format) {
            StructureTestData std = (StructureTestData)
                testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //numOfTable(row));
                TypeData s = (TypeData)std.getTypeData().elementAt(numOfCell(row));
            s.setFormula(formula);
            s.setValue(value);
            s.setType(type);
            s.setFormat(format);
        }*/


        private CMFrameView m_FrameView;
    }


    //////////////////////// SpanModel ///////////////////////////////////////////
    public class CMSpanModel extends AbstractDirectSpanModel {
        private CMGridModel model = null;

        public CMSpanModel(CMGridModel m) {
            model = m;
        }

        public ExtentCell getSpanOver(final int row, final int column) {
            return null;
        }

        public boolean isEmpty() {
            return false;
        }
    }


    /////////////////////////////////////////////////////////////////////////////
	/**
	 * @return Returns the cmGridModel.
	 */
	public CMGridModel getCmGridModel() {
		return cmGridModel;
	}

	public TestDataFormat getGlobalFormatter(int numoftable, int numofrow, int numofcol) {
		try {
            if (testData.getM_StructureTestData().size() != 0) {
                StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
                ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
                return (TestDataFormat)typ.getFormatter().clone();
            }
            else{
            	return new TestDataFormat();
            }
		}
		catch (Exception ex) {
            return new TestDataFormat();
        }
	}

	public void setGlobalFormatter(TestDataFormat value, int numoftable, int numofrow, int numofcol) {
		 if (numoftable < testData.getM_StructureTestData().size()) {
	            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(numoftable);
	            ITypeData typ = (ITypeData)std.getTypeData().elementAt(numofrow);
	            typ.setFormatter(value);
		 }

	}
	//svonborries_12102005_begin
	public void enablePopUpMenuItemsInGridTDStructure(Object p_obj,int p_row){
		StructureTestData stdaux = (StructureTestData)
        testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex());
		if (p_obj instanceof CMCellTDStructureFormula) {
            isSelectedCellFormula = true;
            cmFrame.statesMenusFormulas(true);
            cmFrame.statesMenusVariables(true);
            cmFrame.statesMenusLinkElement(true);//svonborries_14112005
            ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(p_row));
            //if (!s.getStringFormula().equals("")) {
            if (!s.getFormula().equals("")) {
                if (s.isFormula()) {
                    CMDialogFormulasValues cmd = new CMDialogFormulasValues();
                    //if (cmd.cantParam(s.getStringFormula()) == 0)
                    if (cmd.cantParam(s.getFormula()) == 0)
                        cmFrame.statesMenusEditFormulas(false);
                    else
                        cmFrame.statesMenusEditFormulas(true);
                    cmFrame.statesMenusDeleteFormulas(true);
                }
                else{
                	if (!s.isLinkValue())
                		cmFrame.statesMenusDeleteVariable(true);
                	}
                //svonborries_14112005_begin
                if(s.isLinkValue()){
                    cmFrame.statesMenusDeleteLinkElement(true);
                }
                //svonborries_14112005_end
            }
            else {
                cmFrame.statesMenusEditFormulas(false);
                cmFrame.statesMenusDeleteFormulas(false);
                cmFrame.statesMenusDeleteVariable(false);
                //svonborries_14112005_begin
                cmFrame.statesMenusDeleteLinkElement(false);
                //svonborries_14112005_end
            }
            //  editFormula = s.getFormula();
        }
        else {
            isSelectedCellFormula = false;
            cmFrame.statesMenusFormulas(false);
            cmFrame.statesMenusVariables(false);
            cmFrame.statesMenusEditFormulas(false);
            cmFrame.statesMenusDeleteFormulas(false);
            cmFrame.statesMenusDeleteVariable(false);
//          svonborries_14112005_begin
            cmFrame.statesMenusLinkElement(false);
            cmFrame.statesMenusDeleteLinkElement(false);
            //svonborries_14112005_end
        }

		 if (p_obj instanceof CMCellTDStructureClassState || p_obj instanceof CMCellTDStructureField ||
	                p_obj instanceof CMCellTDStructureName || p_obj instanceof CMCellTDStructureObjectTypes ||
	                p_obj instanceof CMCellTDStructureNewColumn || p_obj instanceof CMCellTDStructureValue ||
	                p_obj instanceof CMCellTDStructurePrefix || p_obj instanceof CMCellTDStructureSuffix ||
	                p_obj instanceof CMCellTDStructureFormat || p_obj instanceof CMCellTDStructureKey ||
	                p_obj instanceof CMCellTDStructureFormula || p_obj instanceof CMCellTDStructureLength ||
	                p_obj instanceof CMCellTDStructureGlobal) {

	                    if (p_obj instanceof CMCellTDStructureNewColumn){
	                    		cmFrame.stateDeleteColumnOptionsinStructure(true);
	                    		cmFrame.stateInsertColumnOptionsinStructure(true);
	                    		cmFrame.stateChangeNameColumnOptionsinStructure(true);
	                    }
	                    if (this.cmFrame.isIsPanelTestDataSelected()) {
	                        if (p_obj instanceof CMCellTDStructureFormula || p_obj instanceof CMCellTDStructureValue)
	                            cmFrame.statesMenusTestDataAssingGlobalValue(true);
	                    }
	                    else {
	                        cmFrame.statesMenusFields(true);
	                        ITypeData s = (ITypeData)stdaux.getTypeData().elementAt(cmGridModel.numOfCell(p_row));
	                        boolean stateMenus = s.getGlobal().equals("G");
	                        this.cmFrame.stateAssignCancelGlobalValueReferenceinStructure(stateMenus);
	                    }
	            }
		 else {
             cmFrame.statesMenusTestDataAssingGlobalValue(false);
             cmFrame.statesMenusFields(false);
             this.cmFrame.stateGlobalValueReferenceinStructure(false);
             if (p_obj instanceof CMCellHeaderTDStructureType || p_obj instanceof CMCellHeaderTDStructureField ||
                 p_obj instanceof CMCellHeaderTDStructureName || p_obj instanceof CMCellHeaderTDStructureObjectTypes ||
                 p_obj instanceof CMCellHeaderTDStructureNewColumn || p_obj instanceof CMCellHeaderTDStructureValue ||
                 p_obj instanceof CMCellHeaderTDStructurePrefix || p_obj instanceof CMCellHeaderTDStructureSuffix ||
                 p_obj instanceof CMCellHeaderTDStructureFormat || p_obj instanceof CMCellHeaderTDStructureKey ||
                 p_obj instanceof CMCellHeaderTDStructureFormula /*|| p_obj instanceof CMCellHeaderTDStructureType */||
                 p_obj instanceof CMCellHeaderTDStructureLength || p_obj instanceof CMCellHeaderTDStructureGlobal) {
             	    if (p_obj instanceof CMCellHeaderTDStructureNewColumn){
          		        cmFrame.stateDeleteColumnOptionsinStructure(true);
          		        cmFrame.stateInsertColumnOptionsinStructure(true);
          		        cmFrame.stateChangeNameColumnOptionsinStructure(true);
                     }
             	   else{
             		   cmFrame.stateDeleteColumnOptionsinStructure(false);}//svonborries_27122005}
                     cmFrame.statesMenusFieldsHeader(true); //cmFrame.statesMenusFields(true);
                     cmFrame.stateChangeNameColumnOptionsinStructure(false);
                     //cmFrame.stateDeleteColumnOptionsinStructure(false);//svonborries_27122005
             }
             else {
                 cmFrame.statesMenusFields(false);
             }
         }


	}
	//svonborries_12102005_end
	//svonborries_17102005_begin
	public boolean isDeletePossible(){
	    int row =this.getSelectionModel().getLeadRow();
	    int column = this.getSelectionModel().getLeadColumn();
	    Object obj = getCellObjectAt(row,column);
	    if(obj!=null){
	    	return true;
	    }
	    return false;
	}
	//svonborries_17102005_end

	public CMFrameView getCmFrame() {
		return cmFrame;
	}
	public ITypeData getSelectedTypeData(){
		int row = getRowSelected();
        StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
        ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
        return s;
	}
	public void updateTypeDataReferences( String value,ITypeData p_TypeData) {
        CMDefaultValue defaultValue = new CMDefaultValue(value);
        p_TypeData.setValue(defaultValue);
        //TODO ADD TO THE COMPOUND
                //p_TypeData.setStringValue(value);
            update(CMIndexTDStructureUpdate.getInstance().getIndex());
    }
//svonborries_03032006_begin
	/**
	 * @return Returns the rowSelected.
	 */
	public int getRowSelected() {
		return rowSelected;
	}
	/**
	 * @param rowSelected The rowSelected to set.
	 */
	public void setRowSelected(int rowSelected) {
		this.rowSelected = rowSelected;
	}
	/**
	 * @return Returns the columnSelected.
	 */
	public int getColumnSelected() {
		return columnSelected;
	}

	/**
	 * @param columnSelected The columnSelected to set.
	 */
	public void setColumnSelected(int columnSelected) {
		this.columnSelected = columnSelected;
	}
//	svonborries_03032006_end
	/**
	 * @return Returns the isFormulaDelete.
	 * svonborries
	 */
	public boolean isFormulaDelete() {
		return isFormulaDelete;
	}
	/**
	 * @param isFormulaDelete The isFormulaDelete to set.
	 * svonborries
	 */
	public void setFormulaDelete(boolean isFormulaDelete) {
		this.isFormulaDelete = isFormulaDelete;
	}
	/**
	 * @return Returns the m_Technology.
	 * svonborries
	 */
	public Technology getM_Technology() {
		return m_Technology;
	}
	/**
	 * @param technology The m_Technology to set.
	 * svonborries
	 */
	public void setM_Technology(Technology technology) {
		m_Technology = technology;
	}

	public void deleteFieldTDStructure(int p_index, int p_indexTDS) {
        int index = p_indexTDS;
        if (testData.getM_StructureTestData().size() > 0 && index < testData.getM_StructureTestData().size()) {
            int globalindex = ((StructureTestData)this.testData.getM_StructureTestData().elementAt(index)).getGlobalIndex();
            StructureTestData structureTD = (StructureTestData)this.testData.getM_StructureTestData().elementAt(index);
            if (p_index > structureTD.getTypeData().size())
            	p_index = structureTD.getTypeData().size();
            if (p_index >= 0 && structureTD.getTypeData().size() != 0)
                structureTD.getTypeData().removeElementAt(p_index);
            for (int i = 0; i < this.testData.getTestDataCombination().getM_TestDatas().size(); i++) {
                TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                for (int j = 0; j < td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                    int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                    if (globalindex == globalindex2) {
                        structureTD = (StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                        if (p_index >= 0 && structureTD.getTypeData().size() != 0)
                            structureTD.getTypeData().removeElementAt(p_index);
                    }
                }
            }
            update(index);
        }
    }

	public void insertFieldTDStructure(int p_index, int p_indexTDS, ITypeData p_TypeData) {
        int index = p_indexTDS;
        if (testData.getM_StructureTestData().size() > 0 && index < testData.getM_StructureTestData().size()) {
            ITypeData newTypeData = p_TypeData;
            int globalindex = ((StructureTestData)this.testData.getM_StructureTestData().elementAt(index)).getGlobalIndex();
            StructureTestData structureTD = (StructureTestData)this.testData.getM_StructureTestData().elementAt(index);
            if (p_index > structureTD.getTypeData().size())
            	p_index = structureTD.getTypeData().size();
            if (p_index == structureTD.getTypeData().size())
                structureTD.getTypeData().addElement(newTypeData);
            else
                structureTD.getTypeData().insertElementAt(newTypeData, p_index);
            for (int i = 0; i < this.testData.getTestDataCombination().getM_TestDatas().size(); i++) {
                TestData td = (TestData)this.testData.getTestDataCombination().getM_TestDatas().elementAt(i);
                for (int j = 0; j < td.getM_TDStructure().getM_StructureTestData().size(); j++) {
                    int globalindex2 = ((StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j)).getGlobalIndex();
                    if (globalindex == globalindex2) {
                        structureTD = (StructureTestData)td.getM_TDStructure().getM_StructureTestData().elementAt(j);
                        ITypeData newTypeData2 = new TypeDataLocal();
                        newTypeData2.setField(newTypeData.getField());
                        newTypeData2.setFormat(newTypeData.getFormat());
                        newTypeData2.setFormatter(newTypeData.getFormatter());
                        //newTypeData2.setFormula(newTypeData.getStringFormula());
                        //newTypeData2.setisFormula(newTypeData.isFormula());
                        newTypeData2.setKey(newTypeData.getKey());
                        newTypeData2.setLength(newTypeData.getLength());
                        newTypeData2.setName(newTypeData.getName());
                        //My add
                       //ccastedo 27.09.06  newTypeData2.setToolVendorOT(newTypeData.getToolVendorOT());
                        newTypeData2.setStateOT(newTypeData.getStateOT());
                        newTypeData2.setNewColumns(newTypeData.getNewColumns());
                      //  newTypeData2.setStateOT(indexFromjComboBoxOT(newTypeData.getToolVendorOT()));
                    //    newTypeData2.setTVT(stateTVT);

                        newTypeData2.setPrefix(newTypeData.getPrefix());
                        newTypeData2.setSuffix(newTypeData.getSuffix());
                        newTypeData2.setType(newTypeData.getTypeName());
                        newTypeData2.setValue(newTypeData.getValue());
                        //TODO ADD TO THE COMPOUND
                        //newTypeData2.setStringValue(newTypeData.getStringValue());
                        if (p_index == structureTD.getTypeData().size())
                            structureTD.getTypeData().addElement(newTypeData2);
                        else
                            structureTD.getTypeData().insertElementAt(newTypeData2, p_index);
//                      HCanedo_17112005_begin
                        newTypeData2.setStructureTestData(structureTD);
//                      HCanedo_17112005_end
                    }
                }
            }
            update(index);
        }
    }
	/**
	 * @return Returns the m_NameNewColumn.
	 * svonborries
	 */
	public String getM_NameNewColumn() {
		return m_NameNewColumn;
	}
	/**
	 * @param nameNewColumn The m_NameNewColumn to set.
	 * svonborries
	 */
	public void setM_NameNewColumn(String nameNewColumn) {
		m_NameNewColumn = nameNewColumn;
	}
	/**
	 * @return Returns the swInsertColumn.
	 * svonborries
	 */
	public boolean isSwInsertColumn() {
		return swInsertColumn;
	}
	/**
	 * @param swInsertColumn The swInsertColumn to set.
	 * svonborries
	 */
	public void setSwInsertColumn(boolean swInsertColumn) {
		this.swInsertColumn = swInsertColumn;
	}

	/**
	 * @return Returns the numofcolumnsDinamic.
	 * svonborries
	 */
	public int getNumofcolumnsDinamic() {
		return numofcolumnsDinamic;
	}

	/**
	 * @param numofcolumnsDinamic The numofcolumnsDinamic to set.
	 * svonborries
	 */
	public void setNumofcolumnsDinamic(int numofcolumnsDinamic) {
		this.numofcolumnsDinamic = numofcolumnsDinamic;
	}

	/**
	 * @param p_typ
	 */
    public void setGlobalReferenceValuesinTestData(ITypeData p_typ) {
        if (cmFrame.isIsPanelTestDataSelected()) {
            int row = rowSelected;
            int column = columnSelected;
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
            int indexStructure = CMIndexTDStructureUpdate.getInstance().getIndex();
            int numofTable = CMIndexTDStructureUpdate.getInstance().getnumOfTable();
            int numofRow = CMIndexTDStructureUpdate.getInstance().getnumOfRow();
            cmFrame.getM_CMUndoMediator().assignGlobalReferenceinTDStructureinTestDataEdit(cmFrame.getPanelTestDataView(),
                cmFrame.getGridTDStructure(), indexTestData, indexStructure, (ITypeData)s.clone(),
                numofTable, numofRow, row, column, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TESTDATA"), null);
            s.setGlobal("G");
            s.setField(p_typ.getField());
            s.setFormat(p_typ.getFormat());
            s.setFormatter(p_typ.getFormatter());
            //s.setFormula(p_typ.getStringFormula());
            s.setKey(p_typ.getKey());
            s.setLength(p_typ.getLength());
            s.setName(p_typ.getName());
            //My add..........................................
            //ccastedo 27.09.06 s.setToolVendorOT(p_typ.getToolVendorOT());
            s.setStateOT(indexFromjComboBoxOT(p_typ.getToolVendorOT(CMApplication.frame.getTreeWorkspaceView().getCurrentTestObject())));
            s.setNewColumns(p_typ.getNewColumns());
          
            s.setPrefix(p_typ.getPrefix());
            s.setSuffix(p_typ.getSuffix());
            s.setType(p_typ.getTypeName());
            s.setValue(p_typ.getValue());
            //TODO ADD TO THE COMPOUND
            //s.setStringValue(p_typ.getStringValue());
        }
    }

	/**
	 * @return
	 */
    public int cancelGlobalValueReferenceInTestData() {
        if (cmFrame.isIsPanelTestDataSelected()) {
            int row = rowSelected;
            int column = columnSelected;
            StructureTestData std = (StructureTestData)testData.getM_StructureTestData().elementAt(CMIndexTDStructureUpdate.getInstance().getIndex()); //cmGridModel.numOfTable(row));
            ITypeData s = (ITypeData)std.getTypeData().elementAt(cmGridModel.numOfCell(row));
            int indexTestData = CMIndexTDStructureUpdate.getInstance().getindexTestData();
            int indexStructure = CMIndexTDStructureUpdate.getInstance().getIndex();
            int numofTable = CMIndexTDStructureUpdate.getInstance().getnumOfTable();
            int numofRow = CMIndexTDStructureUpdate.getInstance().getnumOfRow();
            cmFrame.getM_CMUndoMediator().cancelAssignGlobalReferenceinTDStructureinTestDataEdit(cmFrame.getPanelTestDataView(),
                cmFrame.getGridTDStructure(), indexTestData, indexStructure, (ITypeData)s.clone(),
                numofTable, numofRow, row, column, cmFrame.getContentTabbedPane(), CMMessages.getString("TESTDATA_TESTDATA"));
            s.setGlobal("");
            return std.getGlobalIndex();
        }
        return -1;
    }
    
    //  ccastedo begins 15.09.06  
	protected HashMap getCellClasses() {
    	HashMap map = new HashMap();
    	map.put(CMCellTDStructureKey.class, new JTextField());
    	map.put(CMCellTDStructureGlobal.class, new JTextField());
    	map.put(CMCellTDStructureField.class, new JTextField());
    	map.put(CMCellTDStructureName.class, new JTextField());
    	map.put(CMCellTDStructureObjectTypes.class,new CMBaseJComboBox(this)); 
    	map.put(CMCellTDStructureNewColumn.class, new JTextField());
    	map.put(CMCellTDStructureClassState.class,new CMBaseJComboBox(this));
    	map.put(CMCellTDStructureLength.class, new JTextField());
    	map.put(CMCellTDStructurePrefix.class, new JTextField());
    	map.put(CMCellTDStructureSuffix.class, new JTextField()); 
    	map.put(CMCellTDStructureFormat.class, new JTextField());
    	map.put(CMCellTDStructureValue.class, new JTextField()); 
    	return map;
    }	
	//	ccastedo ends 15.09.06

	/*public CMScrollpaneGridTDStructure getScrollPaneGridTDStructure() {
		return scrollPaneGridTDStructure;
	}*/
	
public void createGridHeader(int i){      
    		m_CMHeaderGridTDStructure = new CMHeaderGridTDStructure(this);
            m_CMHeaderGridTDStructure.createTDStructureHeaderView(i, testData);
          
            m_GridHeader = new JSmartGridHeader(this,JSmartGrid.HORIZONTAL,m_CMHeaderGridTDStructure.getColumnHeaderModel(),cmSpanModel,new CMStyleModelHeader());
           
            m_GridHeader.setBackground(new Color(36,38,116));
            m_GridHeader.setSelectionBackgroundColor(new Color(36,38,116));
            m_GridHeader.setSelectionForegroundColor(new Color(252,254,252));
            m_GridHeader.setGridColor(new Color(196,194,196));
            m_GridHeader.setSelectionUnit(com.eliad.swing.JSmartGrid.UNIT_CELL);
            m_GridHeader.setFont(new Font("Dialog",Font.PLAIN,12)); 
            m_GridHeader.setForeground(new Color(252,254,252));
            m_GridHeader.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);            
            m_GridHeader.setRowResizable(false);  
            m_GridHeader.setBorder(BorderFactory.createRaisedBevelBorder());
           // m_GridHeader.setColumnAutoResizeMode(com.eliad.swing.JSmartGrid.AUTO_RESIZE_OFF);
            m_GridHeader.setColumnAutoResizeMode(JSmartGridHeader.AUTO_RESIZE_OFF);
            m_GridHeader.addFocusListener(new FocusAdapter(){
           	    public void focusGained(FocusEvent e){   
           	    	setRowSelected(-1);
           			setColumnSelected(-1);
           	    	m_GridHeader.setSelectionCellBorder(BorderFactory.createLineBorder(Color.orange, 2));
           	    	m_GridHeader.setFocusHighlightBorder(BorderFactory.createLineBorder(Color.orange, 2));           	    	
           	    }
           	    public void focusLost(FocusEvent e){           	    	
           	    	//m_GridHeader.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
           	    }

            });
            
           
            
            this.setColumnHeader(m_GridHeader);
            
            m_GridHeader.addMouseListener(new MouseAdapter(){public void mouseClicked(MouseEvent e){GridHeaderMouseClicked(e);}});
            m_GridHeader.addKeyListener(new KeyAdapter(){
            	
           	 public void keyPressed(KeyEvent e){GridHeaderKeyPressed(e);}
            });
          
            m_GridHeader.addGridListener(
                    new com.eliad.swing.GridAdapter() {
                    	public void gridMouseClicked(GridEvent e) {
                    		GridMouseClickedGridHeader(e);
                        }
                       

                    });
   
    }

	public void GridHeaderKeyPressed(KeyEvent e){
		Object obj = null;
		int columnSelected = getM_GridHeader().getSelectionModel().getLeadColumn();
		if (columnSelected != -1)
			obj = getM_CMHeaderGridTDStructure().getGroupHeaderTDStructure().elementAt(columnSelected);    		

		if (e.getKeyCode() == KeyEvent.VK_DELETE){
			CMAction.TESTDATA_DELETE_COLUMN_ADDED.getAction().actionPerformed(null);		
		}
		 if (e.getKeyCode()==KeyEvent.VK_F10){
	        	if(e.isShiftDown()){
	        		
	        		enablePopUpMenuItemsInGridTDStructure(obj,columnSelected);
	        		cmFrame.stateChangeNameColumnOptionsinStructure(true);
	        		cmFrame.jPopupMenuFields().show(getM_GridHeader(),getM_GridHeader().getColumnPosition(columnSelected),0);
	        		
	        	}
		 }
	}
	
	public void GridHeaderMouseClicked(MouseEvent e) { 
		this.clearSelection();
		m_GridHeader.changeSelection(getSelectedHeaderRow(), getSelectedHeaderColumn(), false, false);
	}
   
    public void GridMouseClickedGridHeader(GridEvent e) {
    	m_GridHeader.requestFocus();    	
    	this.clearSelection();
    	MouseEvent mouseEvent = (MouseEvent)e.getSourceEvent();
    	Object obj2 = m_CMHeaderGridTDStructure.getGroupHeaderTDStructure().elementAt(e.getColumn());
    	CMFrameView cmFrame = CMApplication.frame;
    	int row =  e.getRow();
    	int column = e.getColumn();
    	
    	setSelectedHeaderRow(row);
    	setSelectedHeaderColumn(column);
    	
        cmFrame.statesMenusTestDataAssingGlobalValue(false);
        cmFrame.statesMenusFields(false);
        cmFrame.stateGlobalValueReferenceinStructure(false);
        
        if (obj2 instanceof CMCellHeaderTDStructureType || obj2 instanceof CMCellHeaderTDStructureField ||
            obj2 instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
            obj2 instanceof CMCellHeaderTDStructureNewColumn || obj2 instanceof CMCellHeaderTDStructureValue ||
            obj2 instanceof CMCellHeaderTDStructurePrefix || obj2 instanceof CMCellHeaderTDStructureSuffix ||
            obj2 instanceof CMCellHeaderTDStructureFormat || obj2 instanceof CMCellHeaderTDStructureKey ||
            obj2 instanceof CMCellHeaderTDStructureFormula ||
            obj2 instanceof CMCellHeaderTDStructureLength || obj2 instanceof CMCellHeaderTDStructureGlobal) {
        	    if (obj2 instanceof CMCellHeaderTDStructureNewColumn){
     		        cmFrame.stateDeleteColumnOptionsinStructure(true);
     		        cmFrame.stateInsertColumnOptionsinStructure(true);
     		        cmFrame.stateChangeNameColumnOptionsinStructure(true);
                }    	   
        	    else{
        	    	int i = this.getRowCount();
        	    	
        	    	if(i >1 ){
        	    		cmFrame.stateInsertColumnOptionsinStructure(false);
        	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
        	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
    	    		}
        	    	else {
        	    		cmFrame.stateDeleteColumnOptionsinStructure(false);
        	    		cmFrame.stateInsertColumnOptionsinStructure(false);
        	    		cmFrame.stateChangeNameColumnOptionsinStructure(false);
        	    		}

        	    	}

                cmFrame.statesMenusFieldsHeader(false);

        }
        else {
            cmFrame.statesMenusFields(false);
        }
        
        if (e.getSourceEvent().getModifiers() == Event.META_MASK && this.isEnabled()) {

            if (row >= 0 && column >= 0) {
               
            	this.clearSelection();
                          
                if (!cmFrame.isIsPanelTestDataSelected()) {
                    if (obj2 instanceof CMCellHeaderTDStructureType || obj2 instanceof CMCellHeaderTDStructureField ||
                        obj2 instanceof CMCellHeaderTDStructureName || obj2 instanceof CMCellHeaderTDStructureObjectTypes ||
                        obj2 instanceof CMCellHeaderTDStructureNewColumn || obj2 instanceof CMCellHeaderTDStructureValue ||
                        obj2 instanceof CMCellHeaderTDStructurePrefix || obj2 instanceof CMCellHeaderTDStructureSuffix ||
                        obj2 instanceof CMCellHeaderTDStructureFormat || obj2 instanceof CMCellHeaderTDStructureKey ||
                        obj2 instanceof CMCellHeaderTDStructureFormula || obj2 instanceof CMCellHeaderTDStructureType ||
                        obj2 instanceof CMCellHeaderTDStructureLength || obj2 instanceof CMCellHeaderTDStructureGlobal) {

                            cmFrame.jPopupMenuFields().show(this, mouseEvent.getX(), mouseEvent.getY());
                    }
                }
              
               
            }

        }


    	
    }

	public JSmartGridHeader getM_GridHeader() {
		return m_GridHeader;
	}

	public CMHeaderGridTDStructure getM_CMHeaderGridTDStructure() {
		return m_CMHeaderGridTDStructure;
	}

	public int getSelectedHeaderRow() {
		return selectedHeaderRow;
	}

	public void setSelectedHeaderRow(int selectedHeaderRow) {
		this.selectedHeaderRow = selectedHeaderRow;
	}

	public int getSelectedHeaderColumn() {
		return selectedHeaderColumn;
	}

	public void setSelectedHeaderColumn(int selectedHeaderColumn) {
		this.selectedHeaderColumn = selectedHeaderColumn;
	}

	/**
	 * @return the jComboBox
	 * 14/12/2006
	 * svonborries
	 */
	/*public CMBaseJComboBox getJComboBox() {
		return jComboBox;
	}*/
}
