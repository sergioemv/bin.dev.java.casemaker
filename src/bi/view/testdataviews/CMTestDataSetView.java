
/* Generated by Together */

package bi.view.testdataviews;

import java.awt.Color;
import java.awt.Component;
import java.awt.Event;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JViewport;

import model.BusinessRules;
import model.Session2;
import model.TDStructure;
import model.TestCaseExternalReports;
import model.TestDataSet;
import bi.view.actions.CMAction;
import bi.view.cells.CMTestDataSetCellDescription;
import bi.view.cells.CMTestDataSetCellFilePathReportFormat;
import bi.view.cells.CMTestDataSetCellName;
import bi.view.cells.CMTestDataSetCellReportFormat;
import bi.view.cells.CMTestDataSetGroup;
import bi.view.grids.CMBaseJSmartGrid;
import bi.view.lang.CMMessages;
import bi.view.mainframeviews.CMApplication;
import bi.view.mainframeviews.CMFrameView;
import bi.view.report.data.EReportDataSource;
import bi.view.utils.CMBaseJComboBox;

import com.eliad.model.GenericGridModel;
import com.eliad.model.GridContext;
import com.eliad.model.defaults.DefaultGridCellEditor;
import com.eliad.model.defaults.DefaultGridCellRenderer;
import com.eliad.model.defaults.DefaultStyleModel;
import com.eliad.swing.GridEditingEvent;
import com.eliad.swing.GridEvent;
import com.eliad.util.RulerConstants;
public class CMTestDataSetView extends CMBaseJSmartGrid
{
	CMFrameView m_Frame;
    private CMGridModel m_CMGridModel;
	private CMStyleModel m_CMStyleModel;
	private TDStructure m_TDStructure;
    private CMBaseJComboBox jComboBox= new CMBaseJComboBox(this);
    private Session2 m_Session;
    private int columnSelected=0;
    private Object editingObject;
    private boolean isjComboboxActualized=false;

    public CMTestDataSetView(CMFrameView frame)
    {
    	m_Frame=frame;
        initGUI();
    }
     public JViewport getViewport1() {
      return getViewport();    // getViewport is not public in JSmartGrid
    }

    public void initGUI()
    {
     //   m_Session = m_Frame.getTreeWorkspaceView().getM_Session2();

		m_CMGridModel = new CMGridModel(0,4);
		m_CMStyleModel = new CMStyleModel();
        m_CMStyleModel.setEditor(CMTestDataSetCellReportFormat.class, new DefaultGridCellEditor(jComboBox));
    //    chargeJcomBoxXSL();
        setModels();
        setUIProperties();
		addEventListeners();
    }
    public void addEventListeners()
    {
			addGridListener(
        new com.eliad.swing.GridAdapter() {
            public void gridFocusGained(GridEvent e) { thisGridFocusGained(e); }
            public void gridMouseClicked(GridEvent e) {
                eventGridMouseClicked(e);
            }
        });
        this.addGridEditingListener(
            new com.eliad.swing.GridEditingListener() {
                public void editingStarted(GridEditingEvent e) {
                    eventEditingStarted(e);
                }
                public void editingStopped(GridEditingEvent e) {
                    eventEditingStopped(e);
                }
                public void editingCanceled(GridEditingEvent e) {
                    eventEditingCanceled(e);
                }
            });

	}
	void eventGridMouseClicked(GridEvent e)
   	{

    	MouseEvent mouseEvent = (MouseEvent) e.getSourceEvent();
    	int row = e.getRow();
    	int column = e.getColumn();
        columnSelected=column;
         if(m_Frame.isIsPanelResultComparationSelected())
        {
			if(m_TDStructure.isSwActualTarget())
            {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataSetTarget(row);
                CMIndexTDStructureUpdate.getInstance().setindexTestDataTarget(0);
                CMIndexTDStructureUpdate.getInstance().setindexTarget(0);
            }
            else{
                CMIndexTDStructureUpdate.getInstance().setindexTestDataSetActual(row);
                CMIndexTDStructureUpdate.getInstance().setindexTestDataActual(0);
                CMIndexTDStructureUpdate.getInstance().setindexActual(0);
            }
            m_Frame.getPanelResultComparation().update();
        }
        else{
        m_Frame.setStatesMenusTestData(false);
        if( row >= 0 && column >= 0)
       	{
			m_Frame.statesMenusTestDataSetEditDeleteReport(true);
        }
        else
        {
            	m_Frame.statesMenusTestDataSetEditDeleteReport(false);
        }
//hcanedo_21_09_2004_begin
  /*  	if( mouseEvent.getClickCount() == 2)
    	{
    	}
    	else
    	{*/
//hcanedo_21_09_2004_end
				if( row >= 0 && column >= 0)
            	{
					this.changeSelection(row,column,false,false);
                    ///ver que hay que hacer
                    CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(row);
                    m_Frame.getPanelTestDataSetView().update();
				}
                if(e.getSourceEvent().getModifiers() == Event.META_MASK)
    			{
        			if( row >= 0 && column >= 0)
        			{
						this.m_Frame.getJPopupMenuTestDataSet().show(this, mouseEvent.getX(), mouseEvent.getY());
        			}
                }
//hcanedo_21_09_2004_begin
		if( mouseEvent.getClickCount() == 2)
    	{
            CMAction.TESTDATASET_EDIT_TESTDATASET.getAction().actionPerformed(null);//svonborries_12042006
    	}
    //	}
//hcanedo_21_09_2004_end
        }
  	}
	public void setModels()
    {
			this.setStyleModel(m_CMStyleModel);
			this.setModel(m_CMGridModel);
	}
	public void setUIProperties()
    {
			this.setOpaque(false);
			this.setColumnResizable(true);
	        this.setAutoResizeMode(RulerConstants.HORIZONTAL);
    	    this.setGridColor(new Color(127,157,185));
    		this.setSelectionCellBorder(BorderFactory.createLineBorder(Color.orange,2));
			this.setFocusHighlightBorder(BorderFactory.createLineBorder(Color.orange,2));
    		this.setSelectionBackgroundColor(Color.orange);
    		this.setSelectionForegroundColor(Color.black);
			this.setSelectionUnit(com.eliad.swing.JSmartGrid.UNIT_ROW);
			this.setSelectionPolicy(com.eliad.swing.JSmartGrid.POLICY_SINGLE);
	}



 	public CMTestDataSetGroup createCMTestDataSetGroup(TestDataSet p_TestDataSet)
    {
		CMTestDataSetGroup testDataSetGroup = new CMTestDataSetGroup(p_TestDataSet);
        CMTestDataSetCellName cellName= new CMTestDataSetCellName();
        cellName.setM_CMTestDataSetGroup(testDataSetGroup);
        CMTestDataSetCellDescription cellDescription = new  CMTestDataSetCellDescription();
        cellDescription.setM_CMTestDataSetGroup(testDataSetGroup);


        //ccastedo 07.11.06  int index= m_Session.getM_ApplicationSetting().getM_ExternalXSLTReportFormat().getM_Name().indexOf(p_TestDataSet.getM_ReportFormat());
        int index= getIndexFromExternalXSLTReportFormat(p_TestDataSet.getM_ReportFormat());
        String namecombo = jComboBox.getItemAt(index).toString();
        CMTestDataSetCellReportFormat cellReportFormat = (CMTestDataSetCellReportFormat)jComboBox.getItemAt(index);
        cellReportFormat.setM_CMTestDataSetGroup(testDataSetGroup);
         CMTestDataSetCellFilePathReportFormat cellFilePathReportFormat =new CMTestDataSetCellFilePathReportFormat();
        cellFilePathReportFormat.setM_CMTestDataSetGroup(testDataSetGroup);
        testDataSetGroup.setM_CMTestDataSetCellDescription(cellDescription);
        testDataSetGroup.setM_CMTestDataSetCellName(cellName);
        testDataSetGroup.setM_CMTestDataSetCellReportFormat(cellReportFormat);

        testDataSetGroup.setM_CMTestDataSetCellFilePathReportFormat(cellFilePathReportFormat);
        testDataSetGroup.addElement(cellName);
        testDataSetGroup.addElement(cellDescription);
		testDataSetGroup.addElement(cellReportFormat);
		testDataSetGroup.addElement(cellFilePathReportFormat);

        return testDataSetGroup;
    }
    public void selectCMTestDataSetView(int p_index)
    {
			if( p_index >= 0 && this.getRowCount() > 0)
            {
					this.changeSelection(p_index,columnSelected, false, false);
			}
	}
	public void addCMTestDataSetView(CMTestDataSetGroup p_CMTestDataSetGroup)
    {
  		this.m_CMGridModel.addRow(p_CMTestDataSetGroup);
      		int newSelectionIndex = CMIndexTDStructureUpdate.getInstance().getindexTestDataSet();//this.getRowCount()-1;
		selectCMTestDataSetView(newSelectionIndex);
	}

    public void addCMTestDataSetView(CMTestDataSetGroup p_CMTestDataSetGroup, int index)
    {
  		this.m_CMGridModel.addRow(p_CMTestDataSetGroup);
  		int newSelectionIndex =index;
		selectCMTestDataSetView(newSelectionIndex);
	}
    public void addCMTestDataSetViews(Vector p_TestDataSet, int index)
    {
  		int numTestData = p_TestDataSet.size();
  		for( int i = 0; i < numTestData; i++)
  		{
    		TestDataSet testDataSet = (TestDataSet) p_TestDataSet.elementAt(i);
           	addCMTestDataSetView(createCMTestDataSetGroup(testDataSet), index);
  		}
	}
	public void addCMTestDataSetViews(Vector p_TestDataSet)
    {
  		int numTestData = p_TestDataSet.size();
  		for( int i = 0; i < numTestData; i++)
  		{
    		TestDataSet testDataSet = (TestDataSet) p_TestDataSet.elementAt(i);
			String tdsRF= testDataSet.getM_ReportFormat();
			int index = getIndexFromExternalXSLTReportFormat(tdsRF);
            if(index<=-1)
            {
                testDataSet.setM_ReportFormat(BusinessRules.REPORT_XSLT_DEFAULT);
            }
           	addCMTestDataSetView(createCMTestDataSetGroup(testDataSet));
  		}
        if(CMIndexTDStructureUpdate.getInstance().getindexTestDataSet()>m_CMGridModel.getRowCount())
            CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(m_CMGridModel.getRowCount());
		  		int newSelectionIndex = CMIndexTDStructureUpdate.getInstance().getindexTestDataSet();//this.getRowCount()-1;
		selectCMTestDataSetView(newSelectionIndex);
	}
  	void deleteAllViews()
   	{
     	int numOfRows = m_CMGridModel.getRowCount();
     	m_CMGridModel.removeRows(0,numOfRows);
 	}
	public void update()
	{
		chargeJcomBoxXSL();
        m_Session = m_Frame.getTreeWorkspaceView().getM_Session2();
		deleteAllViews();
        addCMTestDataSetViews(m_TDStructure.getM_TestDataSet() );
	}
		public void update(int index)
	{
        chargeJcomBoxXSL();
        m_Session = m_Frame.getTreeWorkspaceView().getM_Session2();
		deleteAllViews();
        addCMTestDataSetViews(m_TDStructure.getM_TestDataSet(), index );
	}
    public TDStructure getM_TDStructure()
    {
        return m_TDStructure;
    }

    public void setM_TDStructure(TDStructure p_TDStructure)
    {
        m_Session = m_Frame.getTreeWorkspaceView().getM_Session2();
        this.m_TDStructure= p_TDStructure;
    }

    public void thisGridFocusGained(GridEvent e) {

    	int row = e.getRow();
    	int column = e.getColumn();
        columnSelected=column;
		 if(m_Frame.isIsPanelResultComparationSelected())
        {
			if(m_TDStructure.isSwActualTarget())
            {
                CMIndexTDStructureUpdate.getInstance().setindexTestDataSetTarget(row);
                CMIndexTDStructureUpdate.getInstance().setindexTestDataTarget(0);
                CMIndexTDStructureUpdate.getInstance().setindexTarget(0);
            }
            else{
                CMIndexTDStructureUpdate.getInstance().setindexTestDataSetActual(row);
                CMIndexTDStructureUpdate.getInstance().setindexTestDataActual(0);
                CMIndexTDStructureUpdate.getInstance().setindexActual(0);
            }
            m_Frame.getPanelResultComparation().update();
        }
        else{
        m_Frame.setStatesMenusTestData(false);
        if( row >= 0 && column >= 0)
       	{
			m_Frame.statesMenusTestDataSetEditDeleteReport(true);
        }
        else
        {
            	m_Frame.statesMenusTestDataSetEditDeleteReport(false);
        }
    	if( row >= 0 && column >= 0)
         	{
					this.changeSelection(row,column,false,false);
                    ///ver que hay que hacer
                    CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(row);
                    m_Frame.getPanelTestDataSetView().update();
		}
        }

    }


 public void eventEditingStarted(GridEditingEvent e) {
        int row = e.getRow();
        int column = e.getColumn();
        editingObject = m_CMGridModel.getCellObjectAt(row, column);
        CMIndexTDStructureUpdate.getInstance().setindexTestDataSet(row);

    }

    public void eventEditingStopped(GridEditingEvent e) {
        int row = e.getRow();
        int column = e.getColumn();
        if (editingObject == null) {
            return;
        }

   	if (editingObject instanceof CMTestDataSetCellReportFormat && !isjComboboxActualized) {
            int index= jComboBox.getSelectedIndex();
            CMTestDataSetCellReportFormat openwith=(CMTestDataSetCellReportFormat)jComboBox.getSelectedItem();
            TestDataSet tds=(TestDataSet)m_TDStructure.getM_TestDataSet().elementAt(CMIndexTDStructureUpdate.getInstance().getindexTestDataSet());
            tds.setM_ReportFormat(openwith.getName());
   		}
    }

    public void eventEditingCanceled(GridEditingEvent e) { }


    public void chargeJcomBoxXSL()
    {
       isjComboboxActualized= true;
        jComboBox.removeAllItems();
        m_Session = m_Frame.getTreeWorkspaceView().getM_Session2();
       Vector testdataSetReport= m_Session.getM_ApplicationSetting().getTestCaseReports(EReportDataSource.REPORTDS_TESTDATASET.ordinal());
       Vector oldtestdataSetReport= m_Session.getM_ApplicationSetting().getTestCaseReports(EReportDataSource.REPORTDS_OLD_TESTDATASET.ordinal());
       for(int i =0; i< testdataSetReport.size(); i++)
       {
            CMTestDataSetCellReportFormat reportFormat= new CMTestDataSetCellReportFormat();
            reportFormat.setName(((TestCaseExternalReports)testdataSetReport.elementAt(i)).getName());
            jComboBox.addItem(reportFormat);
            isjComboboxActualized=false;
          //  jComboBox.getItemAt();
       }
       if (oldtestdataSetReport.size() > 0){
    	   for(int i =0; i< oldtestdataSetReport.size(); i++)
           {
                CMTestDataSetCellReportFormat reportFormat= new CMTestDataSetCellReportFormat();
                reportFormat.setName(((TestCaseExternalReports)oldtestdataSetReport.elementAt(i)).getName());
                jComboBox.addItem(reportFormat);
                isjComboboxActualized=false;
              //  jComboBox.getItemAt();
           }
       }
    }
//////////////////////////////CMGRidModel////////////////////////////////////////
 	public class CMGridModel extends GenericGridModel {
    	private boolean isAlreadyShowTheReportFormatMessage = false;

		public CMGridModel(int numRows, int numColumns)
    	{
      		super(numRows, numColumns);
    	}
    	public boolean isCellEditable(int row, int column)
    	{
			Object obj = super.getValueAt(row, column);
            if (obj == null) {
                return false;
            }
            if(obj instanceof CMTestDataSetCellReportFormat)
                return true;
            else
                return false;
    	}
    	public Object getCellObjectAt(int row, int column)
    	{
      		if( row >= 0 && column >= 0)
      		{
        		return super.getValueAt(row,column);
      		}
      		else
      		{
        		return null;
      		}
    	}

    	public Object getValueAt(int row, int column)
    	{
      		Object obj = null;
      		if( row >= 0 && column >= 0)
      		{
        		obj = super.getValueAt(row,column);
      		}
      		else
      		{
        		return null;
      		}
      		if( obj == null)
      		{
        		return null;
      		}
      		if( obj instanceof CMTestDataSetCellName)
      		{
        		CMTestDataSetCellName nameView = (CMTestDataSetCellName) obj;
        		if( nameView != null)
        		{
            	return (nameView.getM_CMTestDataSetGroup().getM_testDataSet()).getName();
        		}
       			else
       			{
            		return null;
        		}
      		}
      		else if( obj instanceof CMTestDataSetCellDescription)
      		{
					CMTestDataSetCellDescription descriptionView = (CMTestDataSetCellDescription) obj;
					return ( descriptionView.getM_CMTestDataSetGroup().getM_testDataSet()).getDescription();
			}
     		else if(obj instanceof CMTestDataSetCellReportFormat)
     		{
     			try {
     				CMTestDataSetCellReportFormat reportFormatView = (CMTestDataSetCellReportFormat) obj;
            		String searchName = new String();
            		//svonborries_04042006_begin
                    if((reportFormatView.getM_CMTestDataSetGroup()==null)||
                    		(reportFormatView.getM_CMTestDataSetGroup().getM_testDataSet()==null)||
                    		(reportFormatView.getM_CMTestDataSetGroup().getM_testDataSet().getM_ReportFormat()==null))
                    	return null;
                    //svonborries_04042006_end
                    searchName=reportFormatView.getM_CMTestDataSetGroup().getM_testDataSet().getM_ReportFormat();
                    int index = getIndexFromExternalXSLTReportFormat(searchName);
                     //ccastedo 07.11.06  int index=m_Session.getM_ApplicationSetting().getM_ExternalXSLTReportFormat().getM_Name().indexOf(searchName);
     	            return jComboBox.getItemAt(index);
    				//return ( reportFormatView.getM_CMTestDataSetGroup().getM_testDataSet()).getM_ReportFormat();
				} catch (Exception e) {
					return null;
				}

     		}
     		else if(obj instanceof CMTestDataSetCellFilePathReportFormat)
     		{
     			String nameReportFormat = new String();
     			try {
     				CMTestDataSetCellFilePathReportFormat filePathReportFormatView = (CMTestDataSetCellFilePathReportFormat) obj;
                    nameReportFormat=( filePathReportFormatView.getM_CMTestDataSetGroup().getM_testDataSet()).getM_ReportFormat();
					return m_Frame.getCmApplication().getSessionManager().getApplicationSettingManager().getTestCaseReportByName(nameReportFormat).getFilePath();
				} catch (Exception e) {
					if(!isAlreadyShowTheReportFormatMessage ){
						isAlreadyShowTheReportFormatMessage = true;
						JOptionPane.showMessageDialog(CMApplication.frame, CMMessages.getString("TESTDATA_ERRORMESSAGE_REPORTFORMAT_PATH1") + " " +nameReportFormat + " " + CMMessages.getString("TESTDATA_ERRORMESSAGE_REPORTFORMAT_PATH2"), CMMessages.getString("TITLE_FILE_ERROR"), JOptionPane.ERROR_MESSAGE);
					}
					return null;
				}

     		}
     		else
     		{
        		return null;
     		}
    	}
  	}

 	//ccastedo begins 07.11.06
 	private int getIndexFromExternalXSLTReportFormat(String searchName){
 		int index = 0;
 		Vector testDataSetReports= m_Session.getM_ApplicationSetting().getTestCaseReports(EReportDataSource.REPORTDS_TESTDATASET.ordinal());
 		Vector oldtestDataSetReports= m_Session.getM_ApplicationSetting().getTestCaseReports(EReportDataSource.REPORTDS_OLD_TESTDATASET.ordinal());
 		if (oldtestDataSetReports.size() > 0)
 			testDataSetReports.addAll(oldtestDataSetReports);
 		for(int i =0; i < testDataSetReports.size();i++){
			TestCaseExternalReports report= (TestCaseExternalReports)testDataSetReports.elementAt(i);
			if(report.getName().equalsIgnoreCase(searchName)){
				index = i;
				break;
			}
		}
 		return index;
 	}
 	//ccastedo ends 07.11.06

  /////////////////////////////Style Model /////////////////////////////////////

   	public class CMStyleModel extends DefaultStyleModel {
    	public CMStyleModel()
    	{
      		this.setRenderer(String.class, new CMCellRendererDependencies());
    	}

    	public class CMCellRendererDependencies extends DefaultGridCellRenderer
    	{
      		public CMCellRendererDependencies()
      		{
      		}

      		public Component getComponent(Object value, boolean isSelected, boolean hasFocus, boolean isEditable, int row, int column, GridContext context)
      		{
            	Component c = super.getComponent(value, isSelected, hasFocus, isEditable, row, column, context);
              	this.setHorizontalAlignment(JLabel.LEFT);
              	if( !isSelected)
              	{
                	this.setBackground(new Color(235,235,228));
              	}
              	return c;
          	}
    	}
  	}

	@Override
	protected HashMap<Class, Component> getCellClasses() {
		// TODO Auto-generated method stub
		return null;
	}

}

